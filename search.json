[{"path":"https://openpharma.github.io/DoseFinding/articles/analysis_normal.html","id":"background-and-data","dir":"Articles","previous_headings":"","what":"Background and Data","title":"Continuous data MCP-Mod","text":"vignette illustrate usage DoseFinding package analyzing continuously distributed data. separate vignette details sample size power calculation. use data Verkindre et al. (2010), actually use cross-design utilize MCP-Mod supportive analysis. information can found corresponding clinicaltrials.gov page R help page ?glycobrom. main purpose Verkindre et al. (2010) provide safety efficacy data Glycopyrronium Bromide (NVA237) patients stable Chronic Obstructive Pulmonary Disease (COPD). primary endpoint study mean two measurements forced expiratory volume 1 second (FEV1) 23h 15min 23h 45min post dosing, following 7 days treatment. order keep exposition simple, ignore active control focus placebo group four dose groups (12.5, 25, 50, 100μg). purpose , recreate dataset mimicks parallel group design, based published summary statistics. can found glycobrom dataset coming DoseFinding package. fev1 sdev contain mean standard deviation mean (standard error) primary endpoint group, n denotes number participants. want create dataset 60 participants five groups. Noticing standard errors essentially equal across groups, draw five vectors measurement errors centered 0 identical variances 60 * 0.015^2 add observed means. Note use MASS::mvrnorm instead rnorm lets us generate random numbers specified sample mean sd.","code":"library(DoseFinding) data(glycobrom) print(glycobrom) dose  fev1   sdev  n 1   0.0 1.243 0.0156 49 2  12.5 1.317 0.0145 55 3  25.0 1.333 0.0151 51 4  50.0 1.374 0.0148 53 5 100.0 1.385 0.0148 53 set.seed(1, kind = \"Mersenne-Twister\", sample.kind = \"Rejection\", normal.kind = \"Inversion\") rand <- rep(MASS::mvrnorm(60, 0, 60 * 0.015^2, empirical = TRUE), 5) NVA <- data.frame(dose = rep(glycobrom$dose, each = 60),                   FEV1 = rep(glycobrom$fev1, each = 60) + rand) ggplot(NVA) + geom_jitter(aes(dose, FEV1), height = 0, width = 4) +   labs(title = \"Simulated FEV1 by dose (jittered horizontally)\") +   xlab(\"dose [μg]\") + ylab(\"FEV1 [l]\")"},{"path":"https://openpharma.github.io/DoseFinding/articles/analysis_normal.html","id":"design-stage","dir":"Articles","previous_headings":"","what":"Design stage","title":"Continuous data MCP-Mod","text":"Now let’s forget already saw data imagine design trial MCP-Mod. First decide want include two Emax models, one sigmoid Emax model one quadratic model analysis (see ?drmodels choices). (sigmoid) Emax type covers monotonic dose-response-relationships, quadratic model accommodate potentially decreasing effect high doses. Next supply guesstimates nonlinear parameters: ED50 Emax model ED50 Hill parameter h sigmoid emax model coefficient ratio \\(\\delta = \\beta_2/\\lvert\\beta_1\\rvert\\) quadratic model \\(f(d, \\theta) = E_0 + \\beta_1 d + \\beta_2 d^2\\) following choices cover range plausible relationships: ED50 = 2.6 ED25 = 12.5 Emax models (doses substantive effects) ED50 = 30.5 h = 3.5 sigEmax model (first dose negligible effect) delta = -0.00776 quadratic model (downturn fourth dose) also fix effect placebo FEV1 1.25 liters maximum effect 0.15 liters placebo. implicitly sets common linear parameters models. Note syntax arguments Mods function: emax = c(2.6, 12.5) specifies two Emax models, sigEmax = c(30.5, 3.5) specifies one Sigmoid Emax model. ’s always good idea perform visual sanity check functional relationships implied guesstimates.  concludes design phase. can also take look calculated optimal contrasts. contrast maximum power detect non-flat effect profile hypothetical world particular guesstimate actually true value.  can seen balanced sample size case equal variance assumed dose group, optimal contrasts reflect underlying assumed mean dose-response shape. surprise, given optimal contrasts given \\[ c^{\\textrm{opt}} \\propto S^{-1}\\biggl(\\mu^0_m - \\frac{(\\mu^0_m)^T S^{-1}1_K}{1_K^T S^{-1} 1_K}\\biggr) \\] \\(\\mu^0_m\\) standardized mean response, \\(K\\) number doses, \\(1_K\\) -ones vector length \\(K\\) \\(S\\) covariance matrix estimates doses (see Pinheiro et al. 2014 detailed account). equal variance dose groups case correlation, optimal contrasts proportional shapes candidate model mean vectors. standardized model used formula, values linear parameters models impact optimal contrasts.","code":"doses <- c(0, 12.5, 25, 50, 100) mods <- Mods(emax = c(2.6, 12.5), sigEmax = c(30.5, 3.5), quadratic = -0.00776,              placEff = 1.25, maxEff = 0.15, doses = doses) plotMods(mods, ylab = \"FEV1\") optC <- optContr(mods, w=1) print(optC) Optimal contrasts       emax1  emax2 sigEmax quadratic 0    -0.886 -0.813  -0.486    -0.723 12.5  0.116 -0.101  -0.439    -0.240 25    0.211  0.136  -0.120     0.140 50    0.265  0.326   0.448     0.587 100   0.294  0.452   0.597     0.236 plot(optC)"},{"path":"https://openpharma.github.io/DoseFinding/articles/analysis_normal.html","id":"analysis-stage","dir":"Articles","previous_headings":"","what":"Analysis stage","title":"Continuous data MCP-Mod","text":"Now fast-forward time collected data.","code":""},{"path":"https://openpharma.github.io/DoseFinding/articles/analysis_normal.html","id":"multiple-comparisons","dir":"Articles","previous_headings":"Analysis stage","what":"Multiple comparisons","title":"Continuous data MCP-Mod","text":"run multiple contrast test pre-specified models. Note type parameter defaults type=\"normal\", means assume homoscedastic ANOVA model FEV1, .e. critical values taken multivariate t distribution. note data supplied, first two arguments dose FEV1 evaluated, symbolically refer columns data=NVA. test results suggest clear dose-response trend. Alternatively can use generalized MCP-Mod (see FAQ difference). use R’s builtin lm() function manually fit ANOVA model extract estimates model coefficients covariance matrix. also need model degrees freedom. Next supply MCTtest function together type=\"general\". Note contrast invocation supply doses estimates mu_hat S_hat directly within data.frame. simple ANOVA case hand results original generalized MCP-Mod approaches actually coincide. p-values differ due numerical methods used obtaining .","code":"test_normal <- MCTtest(dose = dose, resp = FEV1, models = mods, data = NVA) print(test_normal) Multiple Contrast Test  Contrasts:       emax1  emax2 sigEmax quadratic 0    -0.886 -0.813  -0.486    -0.723 12.5  0.116 -0.101  -0.439    -0.240 25    0.211  0.136  -0.120     0.140 50    0.265  0.326   0.448     0.587 100   0.294  0.452   0.597     0.236  Contrast Correlation:           emax1 emax2 sigEmax quadratic emax1     1.000 0.957   0.648     0.867 emax2     0.957 1.000   0.839     0.929 sigEmax   0.648 0.839   1.000     0.844 quadratic 0.867 0.929   0.844     1.000  Multiple Contrast Test:           t-Stat  adj-p emax2      7.443 <0.001 quadratic  7.016 <0.001 emax1      6.937 <0.001 sigEmax    6.676 <0.001 fitlm <- lm(FEV1 ~ factor(dose) - 1, data = NVA) mu_hat <- coef(fitlm) S_hat <- vcov(fitlm) anova_df <- fitlm$df.residual test_general <- MCTtest(dose = doses, resp = mu_hat, S = S_hat, df = anova_df,                         models = mods, type = \"general\") print(test_general) Multiple Contrast Test  Contrasts:       emax1  emax2 sigEmax quadratic 0    -0.886 -0.813  -0.486    -0.723 12.5  0.116 -0.101  -0.439    -0.240 25    0.211  0.136  -0.120     0.140 50    0.265  0.326   0.448     0.587 100   0.294  0.452   0.597     0.236  Contrast Correlation:           emax1 emax2 sigEmax quadratic emax1     1.000 0.957   0.648     0.867 emax2     0.957 1.000   0.839     0.929 sigEmax   0.648 0.839   1.000     0.844 quadratic 0.867 0.929   0.844     1.000  Multiple Contrast Test:           t-Stat  adj-p emax2      7.443 <0.001 quadratic  7.016 <0.001 emax1      6.937 <0.001 sigEmax    6.676 <0.001 cbind(normal = test_normal$tStat, generalized = test_general$tStat) normal generalized emax1     6.937000    6.937000 emax2     7.442849    7.442849 sigEmax   6.675739    6.675739 quadratic 7.016303    7.016303 cbind(normal = attr(test_normal$tStat, \"pVal\"), generalized = attr(test_general$tStat, \"pVal\")) normal  generalized [1,] 1.221279e-11 1.224099e-11 [2,] 5.375700e-13 6.030731e-13 [3,] 5.924716e-11 6.039769e-11 [4,] 8.166245e-12 7.672307e-12"},{"path":"https://openpharma.github.io/DoseFinding/articles/analysis_normal.html","id":"dose-response-estimation","dir":"Articles","previous_headings":"","what":"Dose-response estimation","title":"Continuous data MCP-Mod","text":"simplest case now proceed fit single model type, example one largest t-statistic (alternatively smallest AIC BIC):  actually want use robust approach combines bootstrapping model averaging generalized MCP-Mod framework. First draw bootstrap samples multivariate normal distribution estimates originating first-stage model. Next, bootstrapped data set fit candidate models, select one lowest AIC save corresponding estimated quantities interest. selection step implies bootstrap samples potentially come different models. Finally use bootstrapped estimates inference. example, can estimate dose-response curve using median bootstrapped means dose. Similarly can derive confidence intervals based bootstrap quantiles. Inference quantities interest can performed analogous way. different models contribute bootstrap resamples, approach can considered robust simple model selection (see also Schorning et al. 2016 simulations topic). Now let’s apply general idea case hand. first-stage model ANOVA, ’re interested estimate dose-response curve plus confidence intervals. set candidate model types consists Emax, sigEmax quadratic. us R’s builtin lm() function fit ANOVA model without intercept extract estimates model coefficients covariance matrix. bootstrap procedure described implemented maFitMod function. Note technical reasons supply boundaries fitting algorithm via bnds argument maFitMod (see ?fitMod ?defBnds details). predict method can obtain predictions fitted model boostrap sample. plot method allows summarize model fits (limited customization possible see ?plot.maFit).","code":"fit_single <- fitMod(dose, FEV1, NVA, model = \"emax\") plot(fit_single) fitlm <- lm(FEV1 ~ factor(dose) - 1, data = NVA) dose <- unique(NVA$dose) mu_hat <- coef(fitlm) S_hat <- vcov(fitlm) fit_mod_av <- maFitMod(dose, mu_hat, S = S_hat,                        models = c(\"emax\", \"sigEmax\", \"quadratic\")) # point estimates (median) and bootstrap quantile intervals can be extracted via ma_pred <- predict(fit_mod_av, doseSeq = c(0, 12.5, 25, 50, 100)) # individual bootstrap estimates via indiv_pred <- predict(fit_mod_av, doseSeq = c(0, 12.5, 25, 50, 100),                       summaryFct = NULL) # plotting can be done via plot(fit_mod_av, plotData = \"meansCI\",      ylab = \"Model averaging estimate with 95% CI\")"},{"path":"https://openpharma.github.io/DoseFinding/articles/analysis_normal.html","id":"how-to-adjust-for-covariates","dir":"Articles","previous_headings":"","what":"How to adjust for covariates?","title":"Continuous data MCP-Mod","text":"practical situations covariates used adjust analysis. MCP step can performed example including covariates addCovars argument. Another approach perform MCP step based differences placebo: first stage lm(.) fit intercept included. treatment differences corresponding covariance matrix extracted. fed MCTtest function, placAdj = TRUE argument, see ?MCTtest example. approaches give result. third alternative calculate adjusted means (corresponding covariance matrix) perform generalized MCP-Mod based estimates (following steps unadjusted analysis , adding type = \"general\" argument well estimated covariance matrix via S). procedure similar situation explained detail vignette analysis binary data, repeated . case normally distributed data adjusted means calculated predicting outcome (using covariate adjusted model) patient study every dose, averaging patients per dose.","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/articles/binary_data.html","id":"background-and-data-set","dir":"Articles","previous_headings":"","what":"Background and data set","title":"Binary Data MCP-Mod","text":"Assume dose-finding study planned hypothetical investigational treatment atopic dermatitis, binary endpoint Investigator’s Global Assessment (IGA). treatment tested doses 0, 0.5, 1.5, 2.5, 4. assumed response rate placebo around 10%, response rate top dose may 35%. example generalized MCP-Mod approach can applied, .e. dose-response testing estimation performed logit scale. generate example data setting just described. 10% placebo effect translates -2.2 logit scale, asymptotic effect 25 percentage points placebo becomes logit(0.35) - logit(0.1), approximately 1.6.","code":"library(DoseFinding) library(ggplot2)  logit <- function(p) log(p / (1 - p)) inv_logit <- function(y) 1 / (1 + exp(-y)) doses <- c(0, 0.5, 1.5, 2.5, 4)  ## set seed and ensure reproducibility across R versions set.seed(1, kind = \"Mersenne-Twister\", sample.kind = \"Rejection\", normal.kind = \"Inversion\") group_size <- 100 dose_vector <- rep(doses, each = group_size) N <- length(dose_vector) ## generate covariates x1 <- rnorm(N, 0, 1) x2 <- factor(sample(c(\"A\", \"B\"), N, replace = TRUE, prob = c(0.6, 0.4))) ## assume approximately logit(10%) placebo and logit(35%) asymptotic response with ED50=0.5 prob <- inv_logit(emax(dose_vector, -2.2, 1.6, 0.5) + 0.3 * x1 + 0.3 * (x2 == \"B\")) dat <- data.frame(y = rbinom(N, 1, prob),                   dose = dose_vector, x1 = x1, x2 = x2)"},{"path":"https://openpharma.github.io/DoseFinding/articles/binary_data.html","id":"candidate-models","dir":"Articles","previous_headings":"","what":"Candidate models","title":"Binary Data MCP-Mod","text":"use following candidate set models mean response logit scale:","code":"mods <- Mods(emax = c(0.25, 1), sigEmax = rbind(c(1, 3), c(2.5, 4)), betaMod = c(1.1, 1.1),              placEff = logit(0.1), maxEff = logit(0.35)-logit(0.1),              doses = doses) plotMods(mods) ## plot candidate models on probability scale plotMods(mods, trafo = inv_logit)"},{"path":"https://openpharma.github.io/DoseFinding/articles/binary_data.html","id":"analysis-without-covariates","dir":"Articles","previous_headings":"","what":"Analysis without covariates","title":"Binary Data MCP-Mod","text":"First assume covariates used analysis (recommended practice). Let \\(\\mu_k\\) denote logit response probability dose \\(k\\), patient \\(j\\) group \\(k\\) \\[ \\begin{aligned}   Y_{kj} &\\sim \\mathrm{Bernoulli}(p_{kj}) \\\\   \\mathrm{logit}(p_{kj}) &= \\mu_{k} \\end{aligned} \\] perform MCP-Mod test logit scale estimates \\(\\hat\\mu=(\\hat\\mu_1,\\dots,\\hat\\mu_K)\\) estimated covariance matrix \\(\\hat S\\). can extract object returned glm() call. Dose-response modeling can proceed combination bootstrapping model averaging. detailed explanations refer vignette analysis continuous data. Fitting done logit scale, plotting transfer fit back probability scale.","code":"fit_nocov <- glm(y~factor(dose) + 0, data = dat, family = binomial) mu_hat <- coef(fit_nocov) S_hat <- vcov(fit_nocov) MCTtest(doses, mu_hat, S = S_hat, models = mods, type = \"general\") Multiple Contrast Test  Contrasts:      emax1  emax2 sigEmax1 sigEmax2 betaMod 0   -0.817 -0.641   -0.471   -0.280  -0.540 0.5 -0.126 -0.377   -0.589   -0.423  -0.356 1.5  0.202  0.103    0.163   -0.300   0.358 2.5  0.338  0.365    0.418    0.228   0.662 4    0.402  0.550    0.479    0.775  -0.124  Contrast Correlation:          emax1 emax2 sigEmax1 sigEmax2 betaMod emax1    1.000 0.945    0.831    0.608   0.789 emax2    0.945 1.000    0.956    0.805   0.762 sigEmax1 0.831 0.956    1.000    0.804   0.788 sigEmax2 0.608 0.805    0.804    1.000   0.327 betaMod  0.789 0.762    0.788    0.327   1.000  Multiple Contrast Test:          t-Stat   adj-p emax2     3.378 0.00104 emax1     3.349 0.00103 sigEmax1  3.047 0.00305 sigEmax2  2.668 0.01108 betaMod   2.631 0.01169 fit_mod_av <- maFitMod(doses, mu_hat, S = S_hat,                        models = c(\"emax\", \"sigEmax\", \"betaMod\")) plot(fit_mod_av, plotData = \"meansCI\",      title = \"Bootstrap estimates for population response probability\",      trafo = function(x) 1/(1+exp(-x)))"},{"path":"https://openpharma.github.io/DoseFinding/articles/binary_data.html","id":"analysis-with-covariates","dir":"Articles","previous_headings":"","what":"Analysis with covariates","title":"Binary Data MCP-Mod","text":"many situations important prognostic covariates (main effects) adjust analysis. Denote vector additional covariates patient \\(j\\) \\(x_{kj}\\). \\[ \\begin{aligned}   Y_{kj} &\\sim \\mathrm{Bernoulli}(p_{kj}) \\\\   \\mathrm{logit}(p_{kj}) &= \\mu_k^d + x_{kj}^T\\beta \\end{aligned} \\] Fitting model gives us estimated coefficients \\(\\hat\\mu=(\\hat\\mu^d, \\hat\\beta)\\) estimate \\(\\hat S\\) covariance matrix estimator \\(\\hat\\mu\\). principle perform testing estimation based \\(\\hat\\mu^d\\) corresponding sub-matrix \\(\\hat S\\), produce estimates patient covariate vector \\(\\beta=0\\), reflect overall population. produce adjusted estimates per dose accommodate potential systematic differences covariates predict mean response probability dose k observed values covariates transform back logit scale: \\[ \\mu^*_k := \\mathrm{logit}\\biggl(\\frac{1}{n} \\sum_{=1}^n \\mathrm{logit}^{-1}(\\hat\\mu^d_k + x_{}^T\\hat\\beta)\\biggr) \\] Note index \\(x\\) \\(\\) runs 1 \\(n\\) (patients randomized study). obtain variance estimate \\(\\mu^*\\) repeat draws \\(\\mathrm{MultivariateNormal}(\\hat\\mu, \\hat S)\\) calculate empirical covariance matrix \\(S^*\\) theses draws. use \\(\\mu^*\\) \\(S^*\\) MCTtest(). case hand results dramatically different. Adjusting covariates gives slightly lower variance estimates.  Dose-response modelling proceeds way , now adjusted estimates.","code":"fit_cov <- glm(y~factor(dose) + 0 + x1 + x2, data = dat, family = binomial)  covariate_adjusted_estimates <- function(mu_hat, S_hat, formula_rhs, doses, other_covariates, n_sim) {   ## predict every patient under *every* dose   oc_rep <- as.data.frame(lapply(other_covariates, function(col) rep(col, times = length(doses))))   d_rep <- rep(doses, each = nrow(other_covariates))   pdat <- cbind(oc_rep, dose = d_rep)   X <- model.matrix(formula_rhs, pdat)   ## average on probability scale then backtransform to logit scale   mu_star <- logit(tapply(inv_logit(X %*% mu_hat), pdat$dose, mean))   ## estimate covariance matrix of mu_star   pred <- replicate(n_sim, logit(tapply(inv_logit(X %*% drop(mvtnorm::rmvnorm(1, mu_hat, S_hat))),                                         pdat$dose, mean)))   return(list(mu_star = as.numeric(mu_star), S_star = cov(t(pred)))) }  ca <- covariate_adjusted_estimates(coef(fit_cov), vcov(fit_cov), ~factor(dose)+0+x1+x2,                                    doses, dat[, c(\"x1\", \"x2\")], 1000) MCTtest(doses, ca$mu_star, S = ca$S_star, type = \"general\", models = mods) Multiple Contrast Test  Contrasts:      emax1  emax2 sigEmax1 sigEmax2 betaMod 0   -0.828 -0.659   -0.494   -0.277  -0.551 0.5 -0.067 -0.317   -0.546   -0.369  -0.299 1.5  0.131  0.021    0.090   -0.372   0.315 2.5  0.384  0.412    0.470    0.251   0.694 4    0.381  0.543    0.480    0.766  -0.160  Contrast Correlation:          emax1 emax2 sigEmax1 sigEmax2 betaMod emax1    1.000 0.945    0.829    0.598   0.785 emax2    0.945 1.000    0.954    0.799   0.750 sigEmax1 0.829 0.954    1.000    0.797   0.777 sigEmax2 0.598 0.799    0.797    1.000   0.299 betaMod  0.785 0.750    0.777    0.299   1.000  Multiple Contrast Test:          t-Stat   adj-p emax2     3.491 < 0.001 emax1     3.471 < 0.001 sigEmax1  3.115 0.00238 sigEmax2  2.749 0.00888 betaMod   2.639 0.01215 ggplot(data.frame(dose = rep(doses, 4),                   est = c(inv_logit(mu_hat), diag(S_hat), inv_logit(ca$mu_star), diag(ca$S_star)),                   name = rep(rep(c(\"mean\", \"var\"), each = length(doses)), times = 2),                   a = rep(c(FALSE, TRUE), each = 2*length(doses)))) +   geom_point(aes(dose, est, color = a)) +   scale_color_discrete(name = \"adjusted\") +   facet_wrap(vars(name), scales = \"free_y\") + ylab(\"\") fit_cov_adj <- maFitMod(doses, ca$mu_star, S = ca$S_star,                         models = c(\"emax\", \"sigEmax\", \"betaMod\")) # plotting on probability scale, need to transform predictions on logit scale plot(fit_cov_adj, plotData = \"meansCI\",      title = \"Bootstrap estimates for population response probability\",      trafo = function(x) 1/(1+exp(-x)))"},{"path":"https://openpharma.github.io/DoseFinding/articles/binary_data.html","id":"avoiding-problems-with-complete-seperation-and-0-responders","dir":"Articles","previous_headings":"","what":"Avoiding problems with complete seperation and 0 responders","title":"Binary Data MCP-Mod","text":"number situations makes sense replace ML estimation logistic regression via glm(..., family=binomial), Firth logistic regression (see Heinze Schemper 2002), implemented logistf function logistf package. particularly important small sample size per dose small number responses expected treatment arms. estimator Firth regression corresponds posterior mode Bayesian logistic regression model Jeffrey’s prior parameter vector. estimator well defined even situations ML estimate logistic regression exist (e.g. complete separation).","code":""},{"path":"https://openpharma.github.io/DoseFinding/articles/binary_data.html","id":"considerations-around-optimal-contrasts-at-design-stage-and-analysis-stage","dir":"Articles","previous_headings":"","what":"Considerations around optimal contrasts at design stage and analysis stage","title":"Binary Data MCP-Mod","text":"formula optimal contrasts given \\[ c^{\\textrm{opt}} \\propto S^{-1}\\biggl(\\mu^0_m - \\frac{(\\mu^0_m)^T S^{-1}1_K}{1_K^T S^{-1} 1_K}\\biggr) \\] \\(\\mu^0_m\\) standardized mean response, \\(K\\) number doses, \\(1_K\\) -ones vector length \\(K\\) \\(S\\) covariance matrix estimates doses (see Pinheiro et al. 2014). calculating optimal contrast generalized MCP step covariance matrix \\(S\\) estimator \\(\\hat\\mu\\) can re-estimated trial data available. normally distributed data possible decent accuracy even rather low sample sizes. case binary data, \\(\\hat\\mu\\) logit scale diagonal elements \\(S\\) approximately \\((np(1-p))^{-1}\\), \\(n\\) sample size dose group. can derived using delta method. estimate variance depends observed response rate can thus quite variable particular small sample sizes per group (e.g. smaller 20). crude alternative situations use estimated \\(S\\) diagonal matrix inverse sample size per dose diagonal formula calculation optimal contrast. contrast calculated way asymptotically equal “optimal” contrast underlying model, simulations show can closer “true” optimal contrast (calculated based true variance per dose group) small sample size, compared contrast calculated based estimated variance. re-run adjusted analysis contrasts, calculated outlined , need calculate hand-contrast matrix manually via contMat MCTtest() function. case (100 patients per group) obtain result slightly different.","code":"## here we have balanced sample sizes across groups, so we select w = 1 ## otherwise would select w proportional to group sample sizes optCont <- optContr(mods, doses, w = 1) MCTtest(doses, ca$mu_star, S = ca$S_star, type = \"general\", contMat = optCont) Multiple Contrast Test  Contrasts:      emax1  emax2 sigEmax1 sigEmax2 betaMod 0   -0.861 -0.753   -0.597   -0.391  -0.679 0.5 -0.010 -0.240   -0.479   -0.389  -0.255 1.5  0.233  0.170    0.223   -0.240   0.383 2.5  0.299  0.346    0.402    0.268   0.573 4    0.340  0.477    0.450    0.752  -0.022  Contrast Correlation:          emax1 emax2 sigEmax1 sigEmax2 betaMod emax1    1.000 0.965    0.863    0.659   0.884 emax2    0.965 1.000    0.959    0.811   0.882 sigEmax1 0.863 0.959    1.000    0.836   0.879 sigEmax2 0.659 0.811    0.836    1.000   0.522 betaMod  0.884 0.882    0.879    0.522   1.000  Multiple Contrast Test:          t-Stat   adj-p emax2     3.427 < 0.001 emax1     3.318 0.00118 sigEmax1  3.166 0.00193 sigEmax2  3.055 0.00255 betaMod   2.907 0.00466"},{"path":"https://openpharma.github.io/DoseFinding/articles/binary_data.html","id":"power-and-sample-size-considerations","dir":"Articles","previous_headings":"","what":"Power and sample size considerations","title":"Binary Data MCP-Mod","text":"can calculate power candidate models top vignette. example, assume Mods(emax = 0.25) calculate vector mean responses lo logit scale. transform back probability scale p, can calculate approximate variance (logit-scale) estimator mu_hat formula \\[ \\mathrm{Var}(\\hat\\mu) = \\frac{1}{np(1-p)} \\] (see section ). Next calculate minimum power across candidate set using powMCT() plot increasing n. See also vignette sample size calculation.","code":"## for simplicity: contrasts as discussed in the previous section contMat <- optContr(mods, w=1)  ## we need each alternative model as a separate object alt_model_par <- list(emax = 0.25, emax = 1, sigEmax = c(1, 3),                       sigEmax = c(2.5, 4), betaMod = c(1.1, 1.1)) alt_common_par <- list(placEff = logit(0.1), maxEff = logit(0.35)-logit(0.1),                        doses = doses) ## this is a bit hackish because we need to pass named arguments to Mods() alt_mods <- lapply(seq_along(alt_model_par), function(i) {   do.call(Mods, append(alt_model_par[i], alt_common_par)) })  prop_true_var_mu_hat <- lapply(seq_along(alt_model_par), function(i) {   ## mean responses on logit scale   lo <- getResp(do.call(Mods, append(alt_model_par[i], alt_common_par)))   p <- inv_logit(lo) # mean responses on probability scale   v <- 1 / (p * (1-p)) # element-wise variance of mu_hat up to a factor of 1/n   return(as.numeric(v)) # drop unnecessary attributes })  min_power_at_group_size <- function(n) {   pwr <- mapply(function(m, v) powMCT(contMat, alpha=0.025, altModels=m, S=diag(v/n), df=Inf),                 alt_mods, prop_true_var_mu_hat)   return(min(pwr)) }  n <- seq(5, 80, by=5) pwrs <- sapply(n, min_power_at_group_size) qplot(n, pwrs, geom=\"line\", ylab=\"Min. Power over candidate set\")+   scale_y_continuous(breaks = seq(0,1,by=0.1), limits = c(0,1)) Warning:  [1m [22m`qplot()` was deprecated in ggplot2 3.4.0.  [90mThis warning is displayed once every 8 hours. [39m  [90mCall `lifecycle::last_lifecycle_warnings()` to see where this warning was [39m  [90mgenerated. [39m"},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/articles/faq.html","id":"preliminaries","dir":"Articles","previous_headings":"","what":"Preliminaries","title":"MCP-Mod FAQ","text":"purpose FAQ document provide answers commonly asked questions, based personal opinions experiences. introduction MCP-Mod please see Bretz et al. (2005) Pinheiro et al. (2014).","code":""},{"path":"https://openpharma.github.io/DoseFinding/articles/faq.html","id":"for-which-types-of-study-designs-can-i-use-mcp-mod","dir":"Articles","previous_headings":"","what":"For which types of study designs can I use MCP-Mod?","title":"MCP-Mod FAQ","text":"MCP-Mod developed efficacy dose-finding studies mind, performed Phase 2 clinical drug-development. Typically studies large scale parallel group randomized studies (e.g. around 50 almost 1000 patients total). also possible use MCP-Mod crossover designs using generalized MCP-Mod (see ). Titration designs scope, administered dose levels depend observed responses patients, thereby making naïve dose-response modelling inappropriate. Phase 1 dose escalation safety studies also scope. major question dose selection next cohort trial, tools developed specifically purpose. addition assessment dose-response signal placebo much interest studies.","code":""},{"path":"https://openpharma.github.io/DoseFinding/articles/faq.html","id":"what-is-the-difference-between-the-original-and-generalized-mcp-mod-and-what-type-of-response-can-generalized-mcp-mod-handle","dir":"Articles","previous_headings":"","what":"What is the difference between the original and generalized MCP-Mod, and what type of response can generalized MCP-Mod handle?","title":"MCP-Mod FAQ","text":"original MCP-Mod approach derived normally distributed response variable assuming homoscedasticity across doses. generalized MCP-Mod approach (Pinheiro et al. 2014) flexible extension allows example binary, count, continuous time--event outcomes. variants one tests estimates dose-response relationship among \\(K\\) doses \\(x_1,\\dots,x_K\\) utilizing \\(M\\) candidate models given functions \\(f_m(x_k, \\theta_m)\\). original MCP-Mod approach assumes normally distributed observations \\[ y_{k,j} \\sim \\mathrm{Normal}(\\mu_k, \\sigma^2) \\] \\(k=1,\\dots,K\\) \\(j=1,\\dots,n_k\\) group, \\(\\mu_k = f_m(x_k, \\theta_m)\\) \\(m\\)-th candidate model. MCP part null hypothesis flat response profile \\(c_m^T \\mu = 0\\) vs \\(c_m^T \\mu > 0\\) (\\(\\neq 0\\)) tested \\(c_m\\) chosen maximize power \\(m\\)-th candidate model. Critical values taken multivariate t distribution \\((\\sum_{k=1}^K n_k) - k\\) degrees freedom. Mod part dose-response model parameters \\(\\theta\\) estimated OLS, minimizing \\(\\sum_{k,j} (y_{k,j} - f_m(x_{k,j}, \\theta))^2\\). generalized MCP-Mod approach specific type distribution assumed observations, \\[ y_{k,j} \\sim \\mathrm{SomeDistribution}(\\mu_k), \\] \\(\\mu_k\\) can interpreted kind “average response” dose \\(k\\). key assumption estimator \\(\\hat\\mu=(\\hat\\mu_1,\\dots,\\hat\\mu_k)\\) exists, (least asymptotically) multivariate normal distribution, \\[ \\hat\\mu \\sim \\mathrm{MultivariateNormal}(\\mu, S), \\] first-stage fitting procedure can provide estimates \\(\\hat\\mu\\) \\(\\hat S\\). \\(m\\)-th candidate model taken imply \\(\\mu_k = f_m(x_k, \\theta)\\) null hypothesis \\(c_m^T \\mu = 0\\) tested optimal contrasts. estimate \\(\\hat S\\) used place unknown \\(S\\), critical values taken multivariate normal distribution. Alternatively, degrees freedom multivariate t distribution can specified. Mod part model parameters \\(\\theta\\) estimated GLS minimizing \\[ (\\hat\\mu - f_m(x, \\theta))^T\\hat{S}^{-1}(\\hat\\mu - f_m(x, \\theta)). \\] generalized MCP-Mod ANOVA first stage (based normality assumption), multiple contrast test (appropriate degrees freedom) provide result original MCP-Mod approach. summary generalized MCP-Mod two-stage approach, first stage model fitted, allows extract (covariate adjusted) estimates dose level, well associated covariance matrix. second stage MCP-Mod performed summary estimates many ways similar original MCP-Mod approach. discuss situation first stage fit logistic regression vignette, many first stage models used, long first fit able produce adjusted estimates doses long associated covariance matrix. See also help page neurodeg data set ?neurodeg, different longitudinal example.","code":""},{"path":"https://openpharma.github.io/DoseFinding/articles/faq.html","id":"how-many-doses-do-we-need-to-perform-mcp-mod","dir":"Articles","previous_headings":"","what":"How many doses do we need to perform MCP-Mod?","title":"MCP-Mod FAQ","text":"using two active doses + placebo technically possible perform MCP Mod steps, particular Mod step limited set dose-response models can fitted. addition limited information dose-response curve can obtained. MCP Mod step make sense, three active doses placebo available, general recommendation use 4-7 active doses. doses cover effective range well (.e., increasing part plateau), large number active doses unlikely produce benefit, simulations Bornkamp et al. (2007) also shown. Optimal design calculations can also provide useful information number doses (doses) use. experience optimal design calculations different candidate sets, number doses optimal design calculation often tend smaller 7 (see also ?optDesign).","code":""},{"path":"https://openpharma.github.io/DoseFinding/articles/faq.html","id":"how-to-determine-the-doses-to-be-used-for-a-trial-using-mcp-mod","dir":"Articles","previous_headings":"","what":"How to determine the doses to be used for a trial using MCP-Mod?","title":"MCP-Mod FAQ","text":"gain information compound, one evaluate dose-range large feasible terms lowest highest dose. rule thumb minimum dose-range > 10-fold investigated (.e., ratio highest versus lowest dose > 10). Plasma drug exposure values (e.g., steady state AUC values) can good predictor effect. situations one can try select doses achieve uniform coverage exposure values. exposure values per patient per dose often follow log-normal distribution (.e., positively skewed, variance increasing mean), spaces doses get larger increasing doses. Often log-spacing doses (.e., ratio consecutive doses constant example equal 2 3) used. alternative approach calculate adequate doses optimal design theory (see ?optDesign). idea calculate design (.e. doses dose allocation weights) given fixed sample size variability dose-response parameter estimates (variance target dose estimate) “small” specified way (see Bretz et al. 2010).","code":""},{"path":"https://openpharma.github.io/DoseFinding/articles/faq.html","id":"how-to-set-up-the-candidate-set-of-models","dir":"Articles","previous_headings":"","what":"How to set up the candidate set of models?","title":"MCP-Mod FAQ","text":"Rule thumb: 3 - 7 dose response shapes 2 - 4 models often sufficient. multiple contrast test quite robust, even model-shapes mis-specified. information utilize? possible use existing information: Similar compounds: Information might available dose-response curve similar compound indication compound different indication. models: dose-exposure-response (PK/PD) model might developed based earlier data (e.g. data proof--concept (PoC) study). can used predict dose-response curve specific time-point. Emax model: Emax type model always included candidate set models. Meta-analyses dose-response curves past years showed, many situations monotonic standard Emax model, sigmoid Emax model able describe data adequately (see Thomas et al. 2015; Thomas Roy 2017). also statistical considerations aware : Small number doses model fitting: active doses feasible used trial, difficult fit complex models, example sigmoid Emax beta model four parameters trial three active doses. models included candidate set one rather use dose-response models fewer parameters obtain adequate breadth candidate set (simple Emax, exponential quadratic model). sigmoid Emax (beta) model shapes approximated well models. one still like include example sigmoid shape can achieved fixing Hill parameter given value (example 3 /5), use different sigmoid Emax candidate models fixed Hill parameter also model fitting. Model fitting models can performed standard Emax model utilizing \\(doses^h\\) instead \\(doses\\) dose variable, \\(h\\) assumed fixed Hill parameter (note interpretation ED50 parameter returned fitMod changes). Consequence model misspecification: Omission “correct” dose-response shape set candidate models might necessarily severe consequences, models can pick omitted shape. can evaluated MCP part (impact power) using explicit calculations (see Pinheiro et al. (2006) vignette sample size). Mod part (impact estimation precision dose-response dose estimation) using simulations see ?planMod. Impact sample size: Using broad flexible set candidate models come “free”. Generally critical value MCP test increase, many different (uncorrelated) candidate shapes included, consequently also sample size. actual impact investigated case--case basis. similar trade-exists terms dose-response model fitting (Mod part), broader candidate set decrease potential bias (case mis-specified model) increase variance estimates. Umbrella-shaped dose-response curve: biological exposure-response relationships often monotonic, -turns clinical dose-response relationship higher doses observed. example , due tolerability issues, patients discontinue treatment higher doses drug. Depending estimand strategy handling intercurrent event (e.g. treatment policy composite) might lead decrease clinical efficacy higher doses. important discuss plausibility umbrella-shaped dose-response stage design stage make decision whether include shape . Caution linear models: Based simulation studies utilizing AIC, observed linear model (fewest parameters) often strongly favored (BIC trend even stronger), see also results Schorning et al. (2016). recommendation exclude linear model usually candidate set. Emax exponential model (also sigmoid Emax model) can approximate linear shape well limiting case.","code":""},{"path":"https://openpharma.github.io/DoseFinding/articles/faq.html","id":"can-mcp-mod-be-used-in-trials-without-placebo-control","dir":"Articles","previous_headings":"","what":"Can MCP-Mod be used in trials without placebo control?","title":"MCP-Mod FAQ","text":"cases use placebo group possible due ethical reasons (e.g., good treatments exist already condition severe). cases, MCP part MCP-Mod focuses establishing dose-response trend among active doses, correspond different question rather dose-response effect versus placebo, may necessarily interest. Mod step conducted model dose-response relationship among active doses. Due non-inclusion placebo group, may challenging perform. One aim dose-finding trial estimate smallest dose new compound achieving treatment effect active control.","code":""},{"path":"https://openpharma.github.io/DoseFinding/articles/faq.html","id":"why-are-bounds-used-for-the-nonlinear-parameters-in-the-fitmod-function","dir":"Articles","previous_headings":"","what":"Why are bounds used for the nonlinear parameters in the fitMod function?","title":"MCP-Mod FAQ","text":"common dose-response models nonlinear parameters. means iterative algorithms need used calculate parameter estimates. Given number dose levels usually relatively small noise relatively large studies, convergence often fails. usually due fact best fitting model shape corresponds case, one model parameters infinite 0. observing cases closely, one observes parameter scale convergence obtained, typically convergence towards fixed model shape obtained. One approach overcome problem use bounds nonlinear parameters model, thus ensure existence estimate. many situations assumed bounds can justified terms requiring shape-space underlying corresponding model covered almost exhaustively (see defBnds function, proposed default bounds). utilizing bounds model fitting, bootstrapping/bagging can used estimation dose-response functions confidence intervals, see Pinheiro et al. (2014). Standard asymptotic confidence intervals reliable.","code":""},{"path":"https://openpharma.github.io/DoseFinding/articles/faq.html","id":"should-model-selection-or-model-averaging-be-used-for-analysis","dir":"Articles","previous_headings":"","what":"Should model-selection or model-averaging be used for analysis?","title":"MCP-Mod FAQ","text":"Mod step can performed using either single model selected initial candidate set weighted average candidate models. Model averaging two main advantages Improved estimation performance: Simulations framework dose-response analyses Phase II shown (range simulation scenarios) model-averaging leads slightly better performance terms dose-response estimation dose-estimation (see Schorning et al. 2016). Improved coverage probability confidence intervals: Model averaging techniques generally lead better performance terms confidence interval coverage model uncertainty (confidence intervals typically closer nominal level). two main (non-Bayesian) ways performing model averaging: Approximate Bayesian approach: models weighted according exp(-0.5*IC), IC information criterion (e.g., AIC) corresponding model consideration. subsequent estimation quantities interest based weighted mean weights . numerical stability minimum IC across models typically subtracted IC model, change model weights. Bagging: One takes bootstrap samples, performs model selection bootstrap re-sample (using, example AIC) uses mean bootstrap predictions overall estimate (see Breiman 1996). predictions typically come different models (bootstrap resample), method can considered “implicit” way model averaging. Bagging advantage one automatically gets bootstrap confidence intervals quantities interest (dose-response curve target doses) performed simulations.","code":""},{"path":"https://openpharma.github.io/DoseFinding/articles/faq.html","id":"which-model-selection-criterion-should-be-used","dir":"Articles","previous_headings":"","what":"Which model selection criterion should be used?","title":"MCP-Mod FAQ","text":"Whether MCP-Mod implemented using model selection model averaging, suitable model selection criterion needs specified. See Schorning et al. (2016) brief review mathematical background different selection criteria. simulation paper supports recommendation utilize AIC criterion.","code":""},{"path":"https://openpharma.github.io/DoseFinding/articles/faq.html","id":"how-to-deal-with-intercurrent-events-and-missing-data","dir":"Articles","previous_headings":"","what":"How to deal with intercurrent events and missing data?","title":"MCP-Mod FAQ","text":"trial intercurrent events handling strategies need identified, well missing data handling (see ICH E9(R1) guideline). many situations (e.g. multiple imputation used part analysis) may easiest use generalized MCP-Mod, first stage model already accounts intercurrent events missing data. model used produce covariate adjusted estimates doses (well covariance matrix), utilized generalized MCP-Mod.","code":""},{"path":"https://openpharma.github.io/DoseFinding/articles/faq.html","id":"can-mcp-mod-be-used-in-trials-with-multiple-treatment-regimens","dir":"Articles","previous_headings":"","what":"Can MCP-Mod be used in trials with multiple treatment regimens?","title":"MCP-Mod FAQ","text":"Many dose-finding trials study multiple doses one treatment regimen, include one treatment regimen (e.g., daily (od), twice daily (bid)). MCP-Mod focused around assessing one dose-response relationship, can extended handle cases, one willing make additional assumptions. scope situations, primary question trial regimen dose, e.g., multiple regimen employed one two doses. scope also situations different regimens differ substantially. example situations treatment groups include loading dose others . naïve dose-response modelling approach dosing regimen easily reduced single dose per patient inappropriate. scope situations primary question focuses around dose-response curve regimen. One possible assumption use dose-response model common dose scale (e.g. daily dose) assume parameters dose-response curves within regimen shared regimen, others different (e.g. different E0, Emax, ED50 parameters regimen Emax dose-response model). See vignette topic. feasible approach requires adequate number doses per regimen able detect dose-response signal regimen estimate dose-response curve regimen. Whether simplifying assumptions parameters shared regimen plausible depends specifics every drug.","code":""},{"path":"https://openpharma.github.io/DoseFinding/articles/faq.html","id":"what-about-dose-response-estimates-when-the-mcp-part-was-or-some-of-the-model-shapes-were-not-significant","dir":"Articles","previous_headings":"","what":"What about dose-response estimates, when the MCP part was (or some of the model shapes were) not significant?","title":"MCP-Mod FAQ","text":"practical reasons, proposal perform Mod step always specified models (even dose-response models significant). obtained dose-response estimate, however, needs interpreted cautiously, overall dose-response trend established MCP step. Using models advisible, non-significance particular contrast may due particular inadequate choice guesstimates - nevertheless model parameters estimated data Mod step, model may fit data adequately (downweighted automatically AIC).","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/articles/mult_regimen.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Multiple Regimen MCP-Mod","text":"Often one regimen studied dose-finding studies. enough doses within regimen, one may still utilize MCP-Mod. specific assumptions needed, depends situation, whether appropriate (thus usage MCP-Mod). first idea bring doses regimen common scale (total dose per time unit). example daily (od) dosing twice daily (bid) dosing used study, one might utilize total daily dose. usually appropriate perform MCP-Mod total daily dose (ignoring regimen doses originate): study investigated one regimen, assessing difference regimen (example total daily dose) interest. possible modelling approach ignores regimen. general approach perform MCP-Mod separately regimen, example adjust p-values originating MCP-part using Bonferroni correction. approach assumes regimen don’t share similarity. Due double-blind nature trials, patients receive two administrations per day (patients od group receive one placebo per day), real od group particular separate placebo od group. often makes sense assume placebo group common od bid dose-response curve. MCP-step contrasts od bid taken respect placebo group modelling step one assume intercept across regimen, parameters separate. One also assume parameters common across regimen (example Emax ED50 parameter Emax model), following example assumption made. motivation simulated data taken recently completed dose-finding study, dose-response drug Licogliflozin assessed od bid regimen (Bays et al. 2020), see also corresponding page clinicaltrials.gov. Note study used MCP-Mod, analysis presented modified simplified (terms candidate models dose-response modelling strategy). following code useful structure first-stage estimates like : \\[ \\hat\\mu=(\\hat\\mu_{\\mathrm{placebo}}, \\hat\\mu_{\\mathrm{od}}, \\hat\\mu_{\\mathrm{bid}}) \\] length sub-vectors \\(\\hat\\mu_{\\mathrm{od}}\\) \\(\\hat\\mu_{\\mathrm{bid}}\\) correspond number different doses two regimens. can different, example 4 elements. Also discussed everything modeled total daily dose scale.","code":"library(DoseFinding) library(ggplot2) ## collect estimates and dosage information in one place example_estimates <- function() {   ## ANOVA mean estimates and ci bounds extracted from fig. 3 of Bays (2020).   ## clinicaltrials.gov page already seems to contain values from the dose-response model fit   mn <- c(-0.55, -1.78, -1.95, -3.29, -4.43, -1.14, -2.74, -4.03, -4.47)   lb <- c(-1.56, -3.15, -3.36, -4.85, -5.40, -2.49, -4.10, -5.50, -5.50)   ub <- c( 0.40, -0.30, -0.54, -1.76, -3.48, 0.24, -1.38, -2.65, -3.44)   se <- (ub - lb)/(2*qnorm(0.975)) # approximate standard error   return(list(mu_hat = mn,               daily_dose = c(0, 2.5, 10, 50, 150, 5, 10, 50, 100),               S_hat = diag(se^2),               # keep track of which elements correspond to which regimen:               index = list(placebo = 1, od = 2:5, bid = 6:9))) }  ## restructure estimates for easy plotting with ggplot tidy_estimates <- function(est) {   se <- sqrt(diag(est$S_hat))   tidy <- data.frame(daily_dose = est$daily_dose, mu_hat = est$mu_hat,                      ub = est$mu_hat + qnorm(0.975) * se, lb = est$mu_hat - qnorm(0.975) * se)   tidy <- rbind(tidy[1, ], tidy) # duplicate placebo   tidy$regimen <- c(\"od\", \"bid\", rep(\"od\", length(est$index$od)), rep(\"bid\", length(est$index$bid)))   return(tidy) }  plot_estimates <- function(est) {   df <- tidy_estimates(est)   ggplot(df, aes(daily_dose, mu_hat)) + geom_point() +     geom_errorbar(aes(ymin = lb, ymax = ub)) +     facet_wrap(vars(regimen), labeller = label_both) +     xlab(\"daily dose\") + ylab(\"percent body weight cange\") +     labs(title = \"ANOVA estimates with 95% confindence intervals\") }  est <- example_estimates() plot_estimates(est)"},{"path":"https://openpharma.github.io/DoseFinding/articles/mult_regimen.html","id":"candidate-models","dir":"Articles","previous_headings":"","what":"Candidate models","title":"Multiple Regimen MCP-Mod","text":"Even though necessary always desired use candidate models regimen .","code":"mods <- list(   od = Mods(emax = c(5, 50),             sigEmax = rbind(c(75, 3.5), c(25, 0.7)),             maxEff = -1,             doses = est$daily_dose[c(est$index$placebo, est$index$od)]),   bid = Mods(emax = c(5, 50),              sigEmax = rbind(c(75, 3.5), c(25, 0.7)),              maxEff = -1,              doses=est$daily_dose[c(est$index$placebo, est$index$bid)]))  plotMods(mods$od, superpose = TRUE, xlab = \"daily dose\") plotMods(mods$bid, superpose = TRUE, xlab = \"daily dose\")"},{"path":"https://openpharma.github.io/DoseFinding/articles/mult_regimen.html","id":"multiple-contrast-test","dir":"Articles","previous_headings":"","what":"Multiple contrast test","title":"Multiple Regimen MCP-Mod","text":"matrix contrasts built separate matrix regimen. stick together way compare \\(\\hat\\mu_{\\mathrm{od}}\\) \\(\\hat\\mu_{\\mathrm{bid}}\\) common placebo response estimate \\(\\hat\\mu_{\\mathrm{placebo}}\\). also need calculate test statistics hand. clear dose-response trend can established regimen.","code":"calculate_contrasts <- function(est, mods) {   S_hat <- est$S_hat   i <- est$index   cm_od <- optContr(mods$od, S=S_hat[c(i$placebo, i$od), c(i$placebo, i$od)])$contMat   cm_bid <- optContr(mods$bid, S=S_hat[c(i$placebo, i$bid), c(i$placebo, i$bid)])$contMat   colnames(cm_od) <- paste0(\"od_\", colnames(cm_od))   rownames(cm_od)[-1] <- paste0(\"od_\", rownames(cm_od)[-1])   colnames(cm_bid) <- paste0(\"bid_\", colnames(cm_bid))   rownames(cm_bid)[-1] <- paste0(\"bid_\", rownames(cm_bid)[-1])   # now build a block matrix (contrasts in columns) like this:   # [ row of placebo coefficients od   | row of placebo coefficients bid   ]   # [----------------------------------+-----------------------------------]   # [ remaining doses' coefficents od  | fill with all zeros               ]   # [----------------------------------+-----------------------------------]   # [ fill with all zeros              | remaining doses' coefficients bid ]   cm_full <- rbind(     \"0\"=c(cm_od[1,],                                cm_bid[1,]                              ),     cbind(cm_od[-1,],                               matrix(0, nrow(cm_od) - 1, ncol(cm_bid))),     cbind(matrix(0, nrow(cm_bid) - 1, ncol(cm_od)), cm_bid[-1, ]                            ))   return(cm_full) }  cont_mat <- calculate_contrasts(est, mods) print(round(cont_mat, 2)) od_emax1 od_emax2 od_sigEmax1 od_sigEmax2 bid_emax1 bid_emax2 0           0.75     0.56        0.41        0.66      0.81      0.60 od_2.5      0.14     0.22        0.19        0.18      0.00      0.00 od_10      -0.08     0.13        0.20        0.03      0.00      0.00 od_50      -0.20    -0.13        0.06       -0.16      0.00      0.00 od_150     -0.61    -0.78       -0.87       -0.71      0.00      0.00 bid_5       0.00     0.00        0.00        0.00      0.04      0.21 bid_10      0.00     0.00        0.00        0.00     -0.08      0.13 bid_50      0.00     0.00        0.00        0.00     -0.24     -0.21 bid_100     0.00     0.00        0.00        0.00     -0.52     -0.73         bid_sigEmax1 bid_sigEmax2 0               0.41         0.72 od_2.5          0.00         0.00 od_10           0.00         0.00 od_50           0.00         0.00 od_150          0.00         0.00 bid_5           0.21         0.12 bid_10          0.21         0.02 bid_50          0.02        -0.23 bid_100        -0.86        -0.64 mct_test <- function(cont_mat, est) {   cont_cov <- t(cont_mat) %*% est$S_hat %*% cont_mat   t_stat <- drop(est$mu_hat %*% cont_mat) / sqrt(diag(cont_cov))   # FIXME: calling non-exported function   p <- MCTpval(contMat = cont_mat, corMat = cov2cor(cont_cov),                df=Inf, tStat=t_stat, alternative = \"one.sided\")   ord <- rev(order(t_stat))   return(data.frame(tStat = t_stat[ord], pVals = p[ord])) } mct_test(cont_mat, est) tStat        pVals bid_sigEmax2 6.027666 1.669425e-09 bid_emax2    5.916858 3.346921e-09 bid_emax1    5.832739 5.574630e-09 od_sigEmax2  5.710927 1.151087e-08 od_emax2     5.640589 1.752113e-08 od_emax1     5.504042 6.425687e-08 od_sigEmax1  5.200171 2.689264e-07 bid_sigEmax1 5.006107 9.856002e-06"},{"path":"https://openpharma.github.io/DoseFinding/articles/mult_regimen.html","id":"dose-response-modelling","dir":"Articles","previous_headings":"","what":"Dose-response modelling","title":"Multiple Regimen MCP-Mod","text":"Dose-response estimation needs handful auxiliary functions. model \\(\\hat\\mu\\) common intercept parameter regimen together two sets remaining parameters family question. example, model based Emax family 5 parameters: one common e0, (eMax, ed50) od regimen, (eMax, ed50) bid regimen. following function calculates responses given dose values model family. Next, need able fit model family observed \\(\\hat\\mu\\). employ usual generalized MCP-Mod approach, .e. generalized least squares estimated covariance matrix \\(\\hat S\\) (Pinheiro et al. 2014). Finally, instead fitting single model, use bootstrap-plus-averaging approach detailed vignette analysis continuous data.","code":"## calculate response under `model` for od/bid with common e0, but separate remaining parameters ## arguments: ## - model: as a string like \"emax\", ## - i_par: list of vectors named \"placebo\", \"od\", \"bid\", used for indexing `par` ## - par: numeric, model parameter structured as c(e0, pars_od, pars_bid) ## returns: response at placebo, dose_od, dose_bid (in this order) eval_model_shared_e0 <- function(model, dose_od, dose_bid, par, i_par) {   resp_placebo <- par[1] # e0   resp_od <- do.call(model, append(list(dose_od, par[1]), as.list(par[i_par$od])))   resp_bid <- do.call(model, append(list(dose_bid, par[1]), as.list(par[i_par$bid])))   resp <- c(resp_placebo, resp_od, resp_bid)   return(resp) } ## find sensible starting values for `fit_model_shared_e0` by fitting separate models, ## index:  list of vectors named \"placebo\", \"od\", \"bid\", used for indexing `dose` ## bounds: passed through to `fitMod` calc_start_values <- function(model, full_mu, full_S, dose, index, bounds) {   separate_coefs <- sapply(c(\"od\", \"bid\"), function(regimen) {     inds <- c(index$placebo, index[[regimen]])     coef(fitMod(dose[inds], full_mu[inds], S = full_S[inds, inds],                 type = \"general\",  model = model, bnds = bounds))[-1] # drop e0 estimate   })   ## remove names to prevent error in do.call() in eval_model_shared_e0;   ## od, bid coefs are in 1st / second column   start <- c(full_mu[1], as.numeric(separate_coefs), use.names=FALSE)   return(start) }  ## fits 'model' to mu_hat with GLS (using S_hat_inv as weight matrix), using a common e0 for od and bid regimens. ## i_reg:  list of vectors named \"placebo\", \"od\", \"bid\", used for indexing `dose` ## i_par: passed through to `eval_model_shared_e0` ## dose: numeric with doses for placebo, od, bid ## lower, upper, start: control parameters fro `nlminb` fit_model_shared_e0 <- function(model, dose, mu_hat, S_hat_inv, lower, upper, start, i_reg, i_par) {   opt_fun <- function(par) { # make use of lexical scope     resp <- eval_model_shared_e0(model, dose[i_reg$od], dose[i_reg$bid], par, i_par)     delta <- resp - mu_hat     return(drop(t(delta) %*% S_hat_inv %*% delta))   }   fit <- nlminb(start, opt_fun, lower = lower, upper = upper)   return(fit) } ## predict population response in each regimen for dose_seq_* ## note: both dose_seq_* vectors should contain a 0 if response at placebo is of interest one_bootstrap_sample <- function(est, dose_seq_od, dose_seq_bid) {   mu_new <- drop(mvtnorm::rmvnorm(1, est$mu_hat, est$S_hat))   mod_info <- list(list(name = \"emax\", bounds = rbind(c(0.15, 225)),                         i_par = list(od = 2:3, bid = 4:5), n_par_gaic = 5),                    list(name = \"sigEmax\", bounds = rbind(c(0.15, 225), c(0.5, 5)),                         i_par = list(od = 2:4, bid = 5:7), n_par_gaic = 7))   fit <- lapply(mod_info, function(m) {     start <- calc_start_values(m$name, mu_new, est$S_hat, est$daily_dose, est$index, m$bounds)     low <- c(-Inf, -Inf, m$bounds[,1]) # no bounds on e0, eMax     up <- c(Inf, Inf, m$bounds[,2])     fit_model_shared_e0(m$name, est$daily_dose, mu_new, solve(est$S_hat), lower = low,  upper = up,                         start = start, i_reg = est$index, i_par = m$i_par)   })   ## calculate gAICs   gaics <- sapply(fit, `[[`, \"objective\") + 2 * sapply(mod_info, `[[`, \"n_par_gaic\")   sel <- which.min(gaics)   mod <- mod_info[[sel]]   ## drop the placebo element   pred <- eval_model_shared_e0(mod$name, dose_seq_od, dose_seq_bid, fit[[sel]]$par, mod$i_par)[-1]   return(pred) }  summarize_bootstrap_samples <- function(samples, probs = c(0.025, 0.25, 0.75, 0.975)) {   stopifnot(length(probs) == 4)   med <- apply(samples, 1, median)   quants <- apply(samples, 1, quantile, probs = probs)   bs_df <- as.data.frame(cbind(med, t(quants)))   names(bs_df) <- c(\"median\", \"low_out\", \"low_in\", \"high_in\", \"high_out\")   return(bs_df) }  dose_seq_od <- seq(0, 150, length.out = 21) # do include placebo! dose_seq_bid <- seq(0, 100, length.out = 21) set.seed(1, kind = \"Mersenne-Twister\", sample.kind = \"Rejection\", normal.kind = \"Inversion\") reps <- replicate(1000, one_bootstrap_sample(est, dose_seq_od, dose_seq_bid)) bs_sum <- summarize_bootstrap_samples(reps) bs_sum$daily_dose <- c(dose_seq_od, dose_seq_bid) bs_sum$regimen <- c(rep(\"od\", length(dose_seq_od)), rep(\"bid\", length(dose_seq_bid)))  ggplot(bs_sum) + geom_ribbon(aes(daily_dose, ymin=low_out, ymax=high_out), alpha = 0.2) +   geom_ribbon(aes(daily_dose, ymin=low_in, ymax=high_in), alpha = 0.2) +   geom_line(aes(daily_dose, median)) +   geom_point(aes(daily_dose, mu_hat), tidy_estimates(est)) +   facet_wrap(vars(regimen), labeller = label_both) +   labs(title = \"Bootstrap estimates for population response\",        subtitle = \"Least squares estimates plus 50% and 95% confidence bands\") +   xlab(\"daily dose\") + ylab(\"percent body weigh change\") +   coord_cartesian(ylim = c(-6, 0))"},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/articles/overview.html","id":"perform-multiple-contrast-test","dir":"Articles","previous_headings":"","what":"Perform multiple contrast test","title":"Overview DoseFinding package","text":"","code":"library(DoseFinding) data(IBScovars) head(IBScovars) gender      resp dose 1      1 1.5769231    1 2      1 0.6833333    3 3      1 0.2857143    0 4      1 0.6307692    3 5      1 0.1428571    2 6      1 0.1571429    1 ## perform (model based) multiple contrast test ## define candidate dose-response shapes models <- Mods(linear = NULL, emax = 0.2, quadratic = -0.17,                doses = c(0, 1, 2, 3, 4)) ## plot models plotMods(models) ## perform multiple contrast test ## functions powMCT and sampSizeMCT provide tools for sample size ## calculation for multiple contrast tests test <- MCTtest(dose, resp, IBScovars, models=models,                 addCovars = ~ gender) test Multiple Contrast Test  Contrasts:   linear   emax quadratic 0 -0.616 -0.889    -0.815 1 -0.338  0.135    -0.140 2  0.002  0.226     0.294 3  0.315  0.252     0.407 4  0.638  0.276     0.254  Contrast Correlation:           linear  emax quadratic linear     1.000 0.768     0.843 emax       0.768 1.000     0.948 quadratic  0.843 0.948     1.000  Multiple Contrast Test:           t-Stat   adj-p emax       3.208 0.00173 quadratic  3.083 0.00242 linear     2.640 0.00855"},{"path":"https://openpharma.github.io/DoseFinding/articles/overview.html","id":"fit-non-linear-dose-response-models-here-illustrated-with-emax-model","dir":"Articles","previous_headings":"","what":"Fit non-linear dose-response models here illustrated with Emax model","title":"Overview DoseFinding package","text":"","code":"fitemax <- fitMod(dose, resp, data=IBScovars, model=\"emax\",                   bnds = c(0.01,5)) ## display fitted dose-effect curve plot(fitemax, CI=TRUE, plotData=\"meansCI\")"},{"path":"https://openpharma.github.io/DoseFinding/articles/overview.html","id":"calculate-optimal-designs-here-illustrated-for-target-dose-td-estimation","dir":"Articles","previous_headings":"","what":"Calculate optimal designs, here illustrated for target dose (TD) estimation","title":"Overview DoseFinding package","text":"","code":"## optimal design for estimation of the smallest dose that gives an ## improvement of 0.2 over placebo, a model-averaged design criterion ## is used (over the models defined in Mods) doses <- c(0, 10, 25, 50, 100, 150) fmodels <- Mods(linear = NULL, emax = 25, exponential = 85,                 logistic = c(50, 10.8811),                 doses = doses, placEff=0, maxEff=0.4) plot(fmodels, plotTD = TRUE, Delta = 0.2) weights <- rep(1/4, 4) desTD <- optDesign(fmodels, weights, Delta=0.2, designCrit=\"TD\") desTD Calculated TD - optimal design:       0      10      25      50     100     150  0.34960 0.09252 0.00366 0.26760 0.13342 0.15319 plot(desTD, fmodels)"},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/articles/sample_size.html","id":"power-for-multiple-contrast-test-versus-group-sample-size","dir":"Articles","previous_headings":"","what":"Power for multiple contrast test versus group sample size","title":"Sample size calculations for MCP-Mod","text":"section investigate power varies sample size. Note maximum effect size within dose-range fixed maxEff candidate models. First calculate matrix optimal contrasts (w=1 denotes homoscedastic residuals equal group sizes, see ?optContr). powN specify sample sizes calculate power. request five equally sized groups alRatio = rep(1, 5). fix residual standard deviation sigma = 0.34, calculate power one-sided test level 0.05. shows power values maximum contrast test assuming different candidate models true. minimum, mean maximum power candidate models also included plot. also wrapper function calculates group sample sizes needed order attain specific power. powers alternative model combined sumFct. look minimum power, potential choices mean max.","code":"contMat <- optContr(mods, w=1) pows <- powN(upperN = 100, lowerN = 10, step = 10, contMat = contMat,              sigma = 0.34, altModels = mods, alpha = 0.05, alRatio = rep(1, 5)) plot(pows) sampSizeMCT(upperN = 150, contMat = contMat, sigma = 0.34, altModels = mods,             power = 0.9, alRatio = rep(1, 5), alpha = 0.05, sumFct = min) Sample size calculation  alRatio: 1 1 1 1 1  Total sample size: 465  Sample size per arm: 93 93 93 93 93  targFunc: 0.9014"},{"path":"https://openpharma.github.io/DoseFinding/articles/sample_size.html","id":"power-versus-treatment-effect","dir":"Articles","previous_headings":"","what":"Power versus treatment effect","title":"Sample size calculations for MCP-Mod","text":"section fix group sample size 90 vary treatment Effect maxEff. Note power decreases assume higher residual standard deviation.","code":"plot_power_vs_treatment_effect <- function(guess, doses, group_size, placEff, maxEffs,                                            sigma_low, sigma_mid, sigma_high, alpha) {   mods_args_fixed <- append(guess, list(placEff = placEff, doses = doses))   grd <- expand.grid(max_eff = maxEffs, sigma = c(sigma_low, sigma_mid, sigma_high))   min_power <- mean_power <- NA   for (i in 1:nrow(grd)) {     mods <- do.call(Mods, append(mods_args_fixed, list(maxEff = grd$max_eff[i])))     p <- powMCT(optContr(mods, w = 1), alpha, mods, group_size, grd$sigma[i])     min_power[i] <- min(p)     mean_power[i] <- mean(p)   }   grd$sigma <- factor(grd$sigma)   pdat <- cbind(grd, power = c(min_power, mean_power),                 sumFct = rep(factor(1:2, labels = c(\"min\", \"mean\")), each = nrow(grd)))   subt <- sprintf(\"group size = %d, α = %.3f\", group_size, alpha)   gg <- ggplot(pdat) + geom_line(aes(max_eff, power, lty = sigma)) +     facet_wrap(~sumFct, labeller = label_both)+     xlab(\"maximum treatment effect\") + ylab(\"power\") +     labs(title = \"Minimum power vs effect size for different residual standard deviations\", subtitle = subt) +     theme(legend.position = \"bottom\") +     scale_y_continuous(limits = c(0,1), breaks = seq(0,1,by=.1))   return(gg) }  plot_power_vs_treatment_effect(guess, doses, group_size = 90, placEff = 1.25,                                maxEffs = seq(0.01, 0.3, length.out = 15),                                sigma_low = 0.3, sigma_mid = 0.34, sigma_high = 0.4, alpha = 0.05)"},{"path":"https://openpharma.github.io/DoseFinding/articles/sample_size.html","id":"power-under-mis-specification","dir":"Articles","previous_headings":"","what":"Power under mis-specification","title":"Sample size calculations for MCP-Mod","text":"MCP-Mod depends candidate models selected. true model among chosen candidate shapes? Often MCP-Mod rather robust. illustrate , let’s assume exponential model shape true model, among candidate shapes. Let exponential model small responses doses last (assuming 20% overall treatment effect achieved 50μg dose). candidate shapes assume almost full effect achieved 50μg dose, shape quite different shapes included candidate set.  Now compare power calculation exponential model based original candidate set, cases contrasts original candidate set used.  expected, power decreases assumed underlying exponential model shape differs substantially shapes included candidate set. However, power loss range 10-15%.","code":"guess_miss <- list(exponential = guesst(50, 0.2, \"exponential\", Maxd = max(doses))) mods_miss <- do.call(Mods, c(guess, guess_miss, list(placEff = 1.25, maxEff = 0.15, doses = doses))) plot(mods_miss, superpose = TRUE) plot_power_misspec <- function(guess, guess_miss, placEff, maxEff, doses,                                upperN, lowerN, step, sigma, alpha) {   mods_extra_par <- list(placEff = placEff, maxEff = maxEff, doses = doses)   pown_extra_par <- list(upperN = upperN, lowerN = lowerN, step = step,                          sigma = sigma, alpha = alpha, alRatio = rep(1, length(doses)))   mods_miss <- do.call(Mods, c(guess_miss, mods_extra_par))   mods_ok <- do.call(Mods, c(guess, mods_extra_par))   cm_ok <- optContr(mods_ok, w = 1)   p_miss <- do.call(powN, c(pown_extra_par, list(contMat = cm_ok, altModels = mods_miss)))   p_ok <- do.call(powN, c(pown_extra_par, list(contMat = cm_ok, altModels = mods_ok)))   pwr <- rbind(data.frame(n = as.numeric(rownames(p_ok)), p_ok[, c(\"min\", \"mean\")], miss = FALSE),                data.frame(n = as.numeric(rownames(p_miss)), p_miss[, c(\"min\", \"mean\")], miss = TRUE))    gg <- ggplot(pwr, aes(group = miss, color = miss)) +     geom_line(aes(n, min, linetype = \"minimum\")) +     geom_line(aes(n, mean, linetype = \"mean\")) +     scale_color_discrete(name = \"miss-specified\") +     scale_linetype_discrete(name = \"aggregation\") +     labs(title = \"Mean and minimum power under mis-specification\") +     xlab(\"group size\") + ylab(\"power\") +     scale_y_continuous(limits = c(0,1), breaks = seq(0,1,by=.1))   return(gg) }  plot_power_misspec(guess, guess_miss, placEff = 1.25, maxEff = 0.15, doses = doses,                    upperN = 100, lowerN = 10, step = 10, sigma = 0.34, alpha = 0.05)"},{"path":"https://openpharma.github.io/DoseFinding/articles/sample_size.html","id":"sample-size-based-on-metrics-other-than-power-for-the-multiple-contrast-test","dir":"Articles","previous_headings":"","what":"Sample size based on metrics other than power for the multiple contrast test","title":"Sample size calculations for MCP-Mod","text":"main purpose dose-finding study selection dose take forward Phase 3. Establishment trend placebo hence minimum requirement considering dose-selection. one considers sample size calculation allow adequate dose selection (see ?TD) turns much harder problem establishing dose-response effect versus placebo based MCP-part: sample size required adequate accuracy estimation target dose (e.g. smallest dose achieving relevant improvement placebo) usually several-fold higher sample size needed adequate power MCP-part. come surprise dose-estimation primarily comparison among investigational doses, MCP-part establishes effect versus placebo. Chapter 12 O’Quigley, Iasonos, Bornkamp (2017) illustrates simulations, based planMod function (see ?planMod example usage). consider brief example: Consider sigEmax(30.5, 3.5) model first section assume “true model” want investigate operating characteristics fitting sigEmax models. Suppose want achieve target improvement \\(\\Delta=0.12 L\\) placebo. One can calculate needs target dose TD 44.4 mg true model. Keep number mind later. Now can ask question variability TD estimation . answer , can run simulation using planMod function. use sample size n=93 power calculation , find: output shows different outputs (see ?planMod details) interest length quantile range target dose (lengthTDCI). default calculated taking difference 5% 95% quantile empirical distribution dose estimates simulation. metric P(TD) indicates many simulations runs TD identified. output can seen variation TD estimates quite large quite unsatisfactory. Experimenting different values n, one quickly realizes need example 1650 patients get length interval 20 mg. Note variability TD estimation depends quite strongly assumed true dose-response model, see simulation results Chapter 12 O’Quigley, Iasonos, Bornkamp (2017). practice, keep size study feasible, one needs find compromise dose-response signal detection estimation precision criteria sample size determination. Irrespective, important properly evaluate operating characteristics given design (including sample size) understand strengths limitations. practice course dose-response curve main efficacy endpoint, consideration dose-selection Phase III: Results efficacy/biomarker endpoints, also results tolerability safety markers, contribute decision.","code":"set.seed(42) ## Note: Warnings related to vcov.DRMod can be ignored if small relative to the total number of simulations pm <- planMod(\"sigEmax\", Mods(sigEmax=c(30.5, 3.5), placEff=1.25, maxEff=0.15, doses=doses),               n=93, sigma = 0.34, doses=doses, simulation=TRUE, nSim=5000, showSimProgress = FALSE,               bnds = defBnds(max(doses))) Running simulations summary(pm,  Delta=0.12) Additional simulation metrics (nSim=5000)         Eff-vs-ANOVA  cRMSE lengthTDCI P(no TD) lengthEDCI sigEmax         1.65 0.0392       62.3    0.153         NA pm <- planMod(\"sigEmax\", Mods(sigEmax=c(30.5, 3.5), placEff=1.25, maxEff=0.15, doses=doses),               n=1650, sigma = 0.34, doses=doses, simulation=TRUE, nSim=5000, showSimProgress = FALSE,               bnds = defBnds(max(doses))) Running simulations summary(pm, Delta=0.12) Additional simulation metrics (nSim=5000)         Eff-vs-ANOVA  cRMSE lengthTDCI P(no TD) lengthEDCI sigEmax          1.4 0.0102       20.2   0.0034         NA"},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bjoern Bornkamp. Author. Jose Pinheiro. Author. Frank Bretz. Author. Ludger Sandig. Author. Marius Thomas. Author, maintainer. Novartis Pharma AG. Copyright holder, funder.","code":""},{"path":"https://openpharma.github.io/DoseFinding/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bornkamp B, Pinheiro J, Bretz F, Sandig L, Thomas M (2025). DoseFinding: Planning Analyzing Dose Finding Experiments. R package version 1.3-1, https://openpharma.github.io/DoseFinding/, https://github.com/openpharma/DoseFinding.","code":"@Manual{,   title = {DoseFinding: Planning and Analyzing Dose Finding Experiments},   author = {Bjoern Bornkamp and Jose Pinheiro and Frank Bretz and Ludger Sandig and Marius Thomas},   year = {2025},   note = {R package version 1.3-1, https://openpharma.github.io/DoseFinding/},   url = {https://github.com/openpharma/DoseFinding}, }"},{"path":"https://openpharma.github.io/DoseFinding/index.html","id":"dosefinding","dir":"","previous_headings":"","what":"Planning and Analyzing Dose Finding Experiments","title":"Planning and Analyzing Dose Finding Experiments","text":"DoseFinding package provides functions design analysis dose-finding experiments (example pharmaceutical Phase II clinical trials). provides functions : multiple contrast tests, fitting non-linear dose-response models, combination testing dose-response modelling calculating optimal designs, normal general response variable.","code":""},{"path":"https://openpharma.github.io/DoseFinding/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Planning and Analyzing Dose Finding Experiments","text":"can install development version DoseFinding GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"bbnkmp/DoseFinding\")"},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/index.html","id":"performing-multiple-contrast-tests","dir":"","previous_headings":"Examples","what":"Performing multiple contrast tests","title":"Planning and Analyzing Dose Finding Experiments","text":"","code":"library(DoseFinding) data(IBScovars)  ## set random seed to ensure reproducible adj. p-values for multiple contrast test set.seed(12)  ## perform (model based) multiple contrast test ## define candidate dose-response shapes models <- Mods(linear = NULL, emax = 0.2, quadratic = -0.17,                doses = c(0, 1, 2, 3, 4)) ## plot models plot(models) ## perform multiple contrast test MCTtest(dose, resp, IBScovars, models=models,                 addCovars = ~ gender) #> Multiple Contrast Test #>  #> Contrasts: #>   linear   emax quadratic #> 0 -0.616 -0.889    -0.815 #> 1 -0.338  0.135    -0.140 #> 2  0.002  0.226     0.294 #> 3  0.315  0.252     0.407 #> 4  0.638  0.276     0.254 #>  #> Contrast Correlation: #>           linear  emax quadratic #> linear     1.000 0.768     0.843 #> emax       0.768 1.000     0.948 #> quadratic  0.843 0.948     1.000 #>  #> Multiple Contrast Test: #>           t-Stat   adj-p #> emax       3.208 0.00128 #> quadratic  3.083 0.00228 #> linear     2.640 0.00848"},{"path":"https://openpharma.github.io/DoseFinding/index.html","id":"fitting-non-linear-dose-response-model","dir":"","previous_headings":"Examples","what":"Fitting non-linear dose-response model","title":"Planning and Analyzing Dose Finding Experiments","text":"","code":"## fit non-linear emax dose-response model fitemax <- fitMod(dose, resp, data=IBScovars, model=\"emax\",                   bnds = c(0.01,5)) ## display fitted dose-effect curve plot(fitemax, CI=TRUE, plotData=\"meansCI\")"},{"path":"https://openpharma.github.io/DoseFinding/index.html","id":"optimal-designs-for-dose-estimation","dir":"","previous_headings":"Examples","what":"Optimal designs for dose estimation","title":"Planning and Analyzing Dose Finding Experiments","text":"","code":"## Calculate optimal designs for target dose (TD) estimation doses <- c(0, 10, 25, 50, 100, 150) fmodels <- Mods(linear = NULL, emax = 25, exponential = 85,                 logistic = c(50, 10.8811),                 doses = doses, placEff=0, maxEff=0.4) plot(fmodels, plotTD = TRUE, Delta = 0.2) weights <- rep(1/4, 4) optDesign(fmodels, weights, Delta=0.2, designCrit=\"TD\") #> Calculated TD - optimal design: #>       0      10      25      50     100     150  #> 0.34960 0.09252 0.00366 0.26760 0.13342 0.15319"},{"path":"https://openpharma.github.io/DoseFinding/reference/DesignMCPModApp.html","id":null,"dir":"Reference","previous_headings":"","what":"Start externally hosted DesignMCPMod Shiny App — DesignMCPModApp","title":"Start externally hosted DesignMCPMod Shiny App — DesignMCPModApp","text":"function starts externally hosted DesignMCPMod Shiny App   browser window. app developed Sophie Sun [aut, cre], Danyi   Xiong [aut], Bjoern Bornkamp [ctb], Frank Bretz [ctb], Ardalan   Mirshani [ctb]. app performs power sample size calculations   multiple contrast test normal, binary negative binomial   outcomes. app uses DoseFinding package calculation backend   R code underlying calculations app can extracted   app.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/DesignMCPModApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start externally hosted DesignMCPMod Shiny App — DesignMCPModApp","text":"","code":"DesignMCPModApp()"},{"path":"https://openpharma.github.io/DoseFinding/reference/DoseFinding-package.html","id":null,"dir":"Reference","previous_headings":"","what":"DoseFinding: Planning and Analyzing Dose Finding Experiments — DoseFinding-package","title":"DoseFinding: Planning and Analyzing Dose Finding Experiments — DoseFinding-package","text":"DoseFinding package provides functions design analysis dose-finding experiments (example pharmaceutical Phase II clinical trials). provides functions : multiple contrast tests (MCTtest), fitting non-linear dose-response models (fitMod), combination testing dose-response modelling (MCPMod), calculating optimal designs (optDesign), normal general response variable.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/DoseFinding-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DoseFinding: Planning and Analyzing Dose Finding Experiments — DoseFinding-package","text":"main functions :MCTtest: Implements multiple contrast testspowMCT: Power calculations multiple contrast testsfitMod: Fits non-linear dose-response modelsoptDesign: Calculates optimal designs dose-response modelsMCPMod: Performs MCPMod methodologysampSize: General function sample size calculation","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/DoseFinding-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DoseFinding: Planning and Analyzing Dose Finding Experiments — DoseFinding-package","text":"Bornkamp, B., Bretz, F., Dette, H. Pinheiro, J. C. (2011). Response-Adaptive Dose-Finding model uncertainty, Annals Applied Statistics, 5, 1611–1631 Bornkamp B., Pinheiro J. C., Bretz, F. (2009). MCPMod: R Package Design Analysis Dose-Finding Studies, Journal Statistical Software, 29(7), 1–23 Bretz, F., Pinheiro, J. C., Branson, M. (2005), Combining multiple comparisons modeling techniques dose-response studies, Biometrics, 61, 738–748 Dette, H., Bretz, F., Pepelyshev, . Pinheiro, J. C. (2008). Optimal Designs Dose Finding Studies, Journal American Statisical Association, 103, 1225–1237 O'Quigley, J., Iasonos, . Bornkamp, B. (2017) Handbook methods designing, monitoring, analyzing dose-finding trials, CRC press, Part 3: Dose-Finding Studies Phase II Pinheiro, J. C., Bornkamp, B., Bretz, F. (2006). Design analysis dose finding studies combining multiple comparisons modeling procedures, Journal Biopharmaceutical Statistics, 16, 639–656 Pinheiro, J. C., Bornkamp, B., Glimm, E. Bretz, F. (2014) Model-based dose finding model uncertainty using general parametric models, Statistics Medicine, 33, 1646–1661 Seber, G..F. Wild, C.J. (2003). Nonlinear Regression, Wiley","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/reference/DoseFinding-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"DoseFinding: Planning and Analyzing Dose Finding Experiments — DoseFinding-package","text":"Maintainer: Marius Thomas marius.thomas@novartis.com Authors: Bjoern Bornkamp bjoern.bornkamp@novartis.com (ORCID) Jose Pinheiro Frank Bretz Ludger Sandig contributors: Novartis Pharma AG [copyright holder, funder]","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/DoseFinding-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DoseFinding: Planning and Analyzing Dose Finding Experiments — DoseFinding-package","text":"","code":"data(IBScovars)  ## perform (model based) multiple contrast test ## define candidate dose-response shapes models <- Mods(linear = NULL, emax = 0.2, quadratic = -0.17,                doses = c(0, 1, 2, 3, 4)) ## plot models plot(models)  ## perform multiple contrast test test <- MCTtest(dose, resp, IBScovars, models=models,                 addCovars = ~ gender)  ## fit non-linear emax dose-response model fitemax <- fitMod(dose, resp, data=IBScovars, model=\"emax\",                   bnds = c(0.01,5)) ## display fitted dose-effect curve plot(fitemax, CI=TRUE, plotData=\"meansCI\")   ## Calculate optimal designs for target dose (TD) estimation doses <- c(0, 10, 25, 50, 100, 150) fmodels <- Mods(linear = NULL, emax = 25, exponential = 85,                 logistic = c(50, 10.8811),                 doses = doses, placEff=0, maxEff=0.4) plot(fmodels, plotTD = TRUE, Delta = 0.2)  weights <- rep(1/4, 4) desTD <- optDesign(fmodels, weights, Delta=0.2, designCrit=\"TD\")"},{"path":"https://openpharma.github.io/DoseFinding/reference/IBScovars.html","id":null,"dir":"Reference","previous_headings":"","what":"Irritable Bowel Syndrome Dose Response data with covariates — IBScovars","title":"Irritable Bowel Syndrome Dose Response data with covariates — IBScovars","text":"subset data used (Biesheuvel Hothorn, 2002).  data part dose ranging trial compound treatment irritable bowel syndrome four active treatment arms, corresponding doses 1,2,3,4 placebo. Note original dose levels blinded data set confidentiality. primary endpoint baseline adjusted abdominal pain score larger values corresponding better treatment effect. total 369 patients completed study, nearly balanced allocation across doses.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/IBScovars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Irritable Bowel Syndrome Dose Response data with covariates — IBScovars","text":"","code":"data(IBScovars)"},{"path":"https://openpharma.github.io/DoseFinding/reference/IBScovars.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Irritable Bowel Syndrome Dose Response data with covariates — IBScovars","text":"data frame 369 observations following 2 variables. gender factor specifying gender dose numeric vector resp numeric vector","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/IBScovars.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Irritable Bowel Syndrome Dose Response data with covariates — IBScovars","text":"Biesheuvel, E. Hothorn, L. . (2002). Many--one comparisons stratified designs, Biometrical Journal, 44, 101–116","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/MCPMod.html","id":null,"dir":"Reference","previous_headings":"","what":"MCPMod - Multiple Comparisons and Modeling — MCPMod","title":"MCPMod - Multiple Comparisons and Modeling — MCPMod","text":"Tests dose-response effect using model-based multiple contrast   test (see MCTtest), selects one (several) model(s)   significant shapes, fits using fitMod.   details method see Bretz et al. (2005).","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/MCPMod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCPMod - Multiple Comparisons and Modeling — MCPMod","text":"","code":"MCPMod(dose, resp, data, models, S = NULL, type = c(\"normal\", \"general\"),        addCovars = ~1, placAdj = FALSE, selModel = c(\"AIC\", \"maxT\", \"aveAIC\"),        alpha = 0.025, df = NULL, critV = NULL, doseType = c(\"TD\", \"ED\"),        Delta, p, pVal = TRUE, alternative = c(\"one.sided\", \"two.sided\"),        na.action = na.fail, mvtcontrol = mvtnorm.control(),        bnds, control = NULL)  # S3 method for class 'MCPMod' predict(object,         predType = c(\"full-model\", \"ls-means\", \"effect-curve\"),         newdata = NULL, doseSeq = NULL, se.fit = FALSE, ...)    # S3 method for class 'MCPMod' plot(x, CI = FALSE, level = 0.95,        plotData = c(\"means\", \"meansCI\", \"raw\", \"none\"),        plotGrid = TRUE, colMn = 1, colFit = 1, ...)"},{"path":"https://openpharma.github.io/DoseFinding/reference/MCPMod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCPMod - Multiple Comparisons and Modeling — MCPMod","text":"dose, resp Either vectors equal length specifying dose response values,     names variables data frame specified data. data Data frame containing variables referenced dose resp     data specified assumed dose     resp variables referenced data (vectors) models object class \"Mods\", see Mods     details S covariance matrix resp type = \"general\",     see Description. type Determines whether inference based ANCOVA model     homoscedastic normality assumption (type = \"normal\"),     estimates doses covariance matrix degrees     freedom specified directly resp, S     df. See also fitMod Pinheiro et al. (2014). addCovars Formula specifying additive linear covariates (type = \"normal\") placAdj Logical, true, assumed placebo-adjusted estimates   specified resp (possible type = \"general\"). selModel Optional character vector specifying model selection criterion   dose estimation.  Possible values AIC: Selects model smallest AIC (default) maxT: Selects model corresponding largest t-statistic. aveAIC: Uses weighted average models corresponding     significant contrasts.  model weights chosen formula:     \\(w_i = \\exp(-0.5AIC_i)/\\sum_i(\\exp(-0.5AIC_i))\\)     See Buckland et al. (1997) details. type = \"general\" \"gAIC\" used. alpha Significance level multiple contrast test df Specify degrees freedom use case type = \"general\",   call MCTtest fitMod.   Infinite degrees (df=Inf) correspond multivariate   normal distribution.   type = \"normal\" degrees freedom deduced (C)OVA fit   used argument ignored. critV Supply pre-calculated critical value. argument NULL,   critical value calculated test decision based   p-values. critV = TRUE critical value calculated. doseType, Delta, p doseType determines dose estimate, ED TD (see also     Mods), Delta p need     specified depending whether TD ED estimated.     See TD ED details. pVal Logical determining, whether p-values calculated. alternative Character determining alternative multiple contrast   trend test. na.action function indicates happen   data contain NAs. mvtcontrol list specifying additional control parameters qmvt   pmvt calls code, see also mvtnorm.control   details. bnds Bounds non-linear parameters. needs list list   entries corresponding selected bounds. names list   entries need correspond model names.   defBnds function provides default selection. control Control list optimization.   list entries: \"nlminbcontrol\", \"optimizetol\" \"gridSize\". entry nlminbcontrol needs list passed directly   control argument nlminb function, used internally   models 2 nonlinear parameters (e.g. sigmoid Emax beta model). entry optimizetol passed directly tol argument   optimize function, used models 1 nonlinear   parameters (e.g. Emax exponential model). entry gridSize needs list entries dim1 dim2   giving size grid gridsearch 1d 2d models. object, x MCPMod object predType, newdata, doseSeq, se.fit, ... predType determines whether predictions returned full   model (including potential covariates), ls-means (SAS type)   effect curve (difference placebo). newdata gives covariates use producing predictions (  predType = \"full-model\"), missing covariates used fitting   used. doseSeq dose-sequence produce predictions (  predType = \"effect-curve\" predType = \"ls-means\").   missing doses used fitting used. se.fit: logical determining, whether standard error   calculated. ...: Additional arguments, plot.MCPMod passed   plot.DRMod. CI, level, plotData, plotGrid, colMn, colFit Arguments plot method: CI determines whether confidence   intervals plotted. level determines level   confidence intervals. plotData determines data plotted:   Either means means CI, raw data none. case   type = \"normal\" covariates ls-means displayed,   type = \"general\" option \"raw\" available.   colMn colFit determine colors fitted model   raw means.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/MCPMod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCPMod - Multiple Comparisons and Modeling — MCPMod","text":"object class MCPMod, contains fitted   MCTtest object well DRMod objects   additional information (model selection criteria, dose estimates,   selected models).","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/MCPMod.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MCPMod - Multiple Comparisons and Modeling — MCPMod","text":"Bretz, F., Pinheiro, J. C., Branson, M. (2005), Combining multiple comparisons modeling techniques dose-response studies, Biometrics, 61, 738–748 Pinheiro, J. C., Bornkamp, B., Bretz, F. (2006). Design analysis dose finding studies combining multiple comparisons modeling procedures, Journal Biopharmaceutical Statistics, 16, 639–656 Pinheiro, J. C., Bretz, F., Branson, M. (2006). Analysis dose-response studies - modeling approaches, N. Ting (ed.). Dose Finding Drug Development, Springer, New York, pp. 146–171 Pinheiro, J. C., Bornkamp, B., Glimm, E. Bretz, F. (2014) Model-based dose finding model uncertainty using general parametric models, Statistics Medicine, 33, 1646–1661 Schorning, K., Bornkamp, B., Bretz, F., & Dette, H. (2016). Model selection versus model averaging dose finding studies. Statistics Medicine, 35, 4021–4040 Xun, X. Bretz, F. (2017) MCP-Mod methodology: Practical Considerations DoseFinding R package, O'Quigley, J., Iasonos, . Bornkamp, B. (eds) Handbook methods designing, monitoring, analyzing dose-finding trials, CRC press Buckland, S. T., Burnham, K. P. Augustin, N. H. (1997). Model selection integral part inference, Biometrics, 53, 603–618 Seber, G..F. Wild, C.J. (2003). Nonlinear Regression, Wiley.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/MCPMod.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MCPMod - Multiple Comparisons and Modeling — MCPMod","text":"Bjoern Bornkamp","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/reference/MCPMod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MCPMod - Multiple Comparisons and Modeling — MCPMod","text":"","code":"data(biom) ## first define candidate model set (only need \"standardized\" models) models <- Mods(linear = NULL, emax=c(0.05,0.2), linInt=c(1, 1, 1, 1),                doses=c(0,0.05,0.2,0.6,1)) plot(models)  ## perform MCPMod procedure MM <- MCPMod(dose, resp, biom, models, Delta=0.5) ## a number of things can be done with an MCPMod object MM # print method provides basic information #> MCPMod #>  #> Multiple Contrast Test: #>        t-Stat   adj-p #> emax2   3.464 < 0.001 #> emax1   3.339 0.00150 #> linear  2.972 0.00402 #> linInt  2.486 0.01632 #>  #> Estimated Dose Response Models: #> linear model #>    e0 delta  #> 0.492 0.559  #>  #> emax model #>    e0  eMax  ed50  #> 0.322 0.746 0.142  #>  #> linInt model #>    d0 d0.05  d0.2  d0.6    d1  #> 0.345 0.457 0.810 0.934 0.949  #>  #> Selected model (AIC): emax #>  #> Estimated TD, Delta=0.5 #> linear   emax linInt  #> 0.8951 0.2886 0.3115  summary(MM) # more information #> MCPMod #>  #> *************************************** #> MCP part  #> *************************************** #> Multiple Contrast Test #>  #> Contrasts: #>      linear  emax1  emax2 linInt #> 0    -0.437 -0.799 -0.643 -0.894 #> 0.05 -0.378 -0.170 -0.361  0.224 #> 0.2  -0.201  0.207  0.061  0.224 #> 0.6   0.271  0.362  0.413  0.224 #> 1     0.743  0.399  0.530  0.224 #>  #> Contrast Correlation: #>        linear emax1 emax2 linInt #> linear  1.000 0.766 0.912  0.488 #> emax1   0.766 1.000 0.949  0.893 #> emax2   0.912 0.949 1.000  0.719 #> linInt  0.488 0.893 0.719  1.000 #>  #> Multiple Contrast Test: #>        t-Stat   adj-p #> emax2   3.464 < 0.001 #> emax1   3.339 0.00150 #> linear  2.972 0.00402 #> linInt  2.486 0.01632 #>  #> *************************************** #> Mod part  #> *************************************** #> ** Fitted model 1  #> Dose Response Model #>  #> Model: linear  #> Fit-type: normal  #>  #> Residuals: #>    Min     1Q Median     3Q    Max  #> -2.097 -0.445  0.136  0.512  2.164  #>  #> Coefficients with approx. stand. error: #>       Estimate Std. Error #> e0       0.492     0.0998 #> delta    0.559     0.1885 #>  #> Residual standard error: 0.714  #> Degrees of freedom: 98  #>  #> ** Fitted model 2  #> Dose Response Model #>  #> Model: emax  #> Fit-type: normal  #>  #> Residuals: #>    Min     1Q Median     3Q    Max  #> -2.000 -0.442  0.130  0.429  2.088  #>  #> Coefficients with approx. stand. error: #>      Estimate Std. Error #> e0      0.322      0.152 #> eMax    0.746      0.236 #> ed50    0.142      0.180 #>  #> Residual standard error: 0.706  #> Degrees of freedom: 97  #>  #> ** Fitted model 3  #> Dose Response Model #>  #> Model: linInt  #> Fit-type: normal  #>  #> Residuals: #>    Min     1Q Median     3Q    Max  #> -1.990 -0.397  0.079  0.456  2.062  #>  #> Coefficients with approx. stand. error: #>       Estimate Std. Error #> d0       0.345      0.159 #> d0.05    0.457      0.159 #> d0.2     0.810      0.159 #> d0.6     0.934      0.159 #> d1       0.949      0.159 #>  #> Residual standard error: 0.712  #> Degrees of freedom: 95  #>  #> *************************************** #> Model selection criteria (AIC): #> *************************************** #>   linear     emax   linInt  #> 220.4986 219.1383 222.8249  #>  #> Selected model: emax  #>  #> *************************************** #> Estimated TD, Delta=0.5 #> *************************************** #> linear   emax linInt  #> 0.8951 0.2886 0.3115  ## predict all significant dose-response models predict(MM, se.fit=TRUE, doseSeq=c(0,0.2,0.4, 0.9, 1),         predType=\"ls-means\") #> $linear #> $linear$fit #> [1] 0.4923408 0.6040619 0.7157829 0.9950856 1.0509461 #>  #> $linear$se.fit #> [1] 0.09984282 0.07829697 0.07166124 0.12282570 0.13859522 #>  #>  #> $emax #> $emax$fit #> [1] 0.3216107 0.7578039 0.8721944 0.9660905 0.9750049 #>  #> $emax$se.fit #> [1] 0.15211417 0.11528764 0.09035778 0.11855885 0.12504802 #>  #>  #> $linInt #> $linInt$fit #> [1] 0.3449054 0.8103158 0.8723763 0.9451428 0.9487114 #>  #> $linInt$se.fit #> [1] 0.1592893 0.1592893 0.1126345 0.1259292 0.1592893 #>  #>  ## display all model functions  plot(MM, plotData=\"meansCI\", CI=TRUE)   ## now perform model-averaging MM2 <- MCPMod(dose, resp, biom, models, Delta=0.5, selModel = \"aveAIC\") sq <- seq(0,1,length=11) pred <- predict(MM, doseSeq=sq, predType=\"ls-means\") modWeights <- MM2$selMod ## model averaged predictions pred <- do.call(\"cbind\", pred)%*%modWeights ## model averaged dose-estimate TDEst <- MM2$doseEst%*%modWeights  ## now an example using a general fit and fitting based on placebo ## adjusted first-stage estimates data(IBScovars) ## ANCOVA fit model including covariates anovaMod <- lm(resp~factor(dose)+gender, data=IBScovars) drFit <- coef(anovaMod)[2:5] # placebo adjusted estimates at doses vCov <- vcov(anovaMod)[2:5,2:5] dose <- sort(unique(IBScovars$dose))[-1] # no estimate for placebo ## candidate models models <- Mods(emax = c(0.5, 1), betaMod=c(1,1), doses=c(0,4)) plot(models)  ## hand over placebo-adjusted estimates drFit to MCPMod MM3 <- MCPMod(dose, drFit, S=vCov, models = models, type = \"general\",               placAdj = TRUE, Delta=0.2) plot(MM3, plotData=\"meansCI\")   ## The first example, but with critical value handed over ## this is useful, e.g. in simulation studies MM4 <- MCPMod(dose, resp, biom, models, Delta=0.5, critV = 2.31)"},{"path":"https://openpharma.github.io/DoseFinding/reference/MCTpval.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate multiplicity adjusted p-values for multiple contrast test — MCTpval","title":"Calculate multiplicity adjusted p-values for multiple contrast test — MCTpval","text":"Calculate multiplicity adjusted p-values maximum contrast test corresponding set contrasts given set observed test statistics. function exported may useful building block used complex testing situations covered MCTtest. users probably need use function.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/MCTpval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate multiplicity adjusted p-values for multiple contrast test — MCTpval","text":"","code":"MCTpval(   contMat,   corMat,   df,   tStat,   alternative = c(\"one.sided\", \"two.sided\"),   control = mvtnorm.control() )"},{"path":"https://openpharma.github.io/DoseFinding/reference/MCTpval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate multiplicity adjusted p-values for multiple contrast test — MCTpval","text":"contMat Contrast matrix use. individual contrasts saved columns matrix corMat Correlation matrix contrasts df Degrees freedom use calculation. tStat Vector contrast test statistics alternative Character determining alternative multiple contrast trend test. control list specifying additional control parameters qmvt pmvt calls code, see also mvtnorm.control details.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/MCTpval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate multiplicity adjusted p-values for multiple contrast test — MCTpval","text":"Numeric containing calculated p-values.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/MCTpval.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate multiplicity adjusted p-values for multiple contrast test — MCTpval","text":"Pinheiro, J. C., Bornkamp, B., Bretz, F. (2006). Design analysis dose finding studies   combining multiple comparisons modeling procedures, Journal Biopharmaceutical Statistics, 16,   639–656","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/reference/MCTpval.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate multiplicity adjusted p-values for multiple contrast test — MCTpval","text":"Bjoern Bornkamp","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/MCTpval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate multiplicity adjusted p-values for multiple contrast test — MCTpval","text":"","code":"data(biom) ## define shapes for which to calculate optimal contrasts modlist <- Mods(emax = 0.05, linear = NULL, logistic = c(0.5, 0.1),                 linInt = c(0, 1, 1, 1), doses = c(0, 0.05, 0.2, 0.6, 1)) contMat <- optContr(modlist, w=1)$contMat ## calculate inputs needed for MCTpval fit <- lm(resp~factor(dose)-1, data=biom) est <- coef(fit) vc <- vcov(fit) ct <- as.vector(est %*% contMat) covMat <- t(contMat) %*% vc %*% contMat den <- sqrt(diag(covMat)) tStat <- ct/den corMat <- cov2cor(t(contMat) %*% vc %*% contMat) MCTpval(contMat, corMat, df=100-5, tStat) #> [1] 0.001250101 0.004534531 0.007129837 0.001111040 ## compare to test <- MCTtest(dose, resp, biom, models=modlist) attr(test$tStat, \"pVal\") #> [1] 0.001434951 0.004199712 0.007229986 0.001094310"},{"path":"https://openpharma.github.io/DoseFinding/reference/MCTtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs multiple contrast test — MCTtest","title":"Performs multiple contrast test — MCTtest","text":"function performs multiple contrast test. contrasts   either directly specified contMat optimal contrasts   derived models argument. directionality   data (.e. whether increase decrease response variable   beneficial inferred models object, see   Mods). type = \"normal\" ANCOVA model based homoscedastic   normality assumption (additive covariates specified   addCovars) fitted. type = \"general\" assumed multivariate normally   distributed estimates specified resp covariance   given S, contrast test statistic calculated based   assumption. Degrees freedom specified df.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/MCTtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs multiple contrast test — MCTtest","text":"","code":"MCTtest(dose, resp, data = NULL, models, S = NULL, type = c(\"normal\", \"general\"),         addCovars = ~1, placAdj = FALSE, alpha = 0.025, df = NULL,         critV = NULL, pVal = TRUE,         alternative = c(\"one.sided\", \"two.sided\"), na.action = na.fail,         mvtcontrol = mvtnorm.control(), contMat = NULL)"},{"path":"https://openpharma.github.io/DoseFinding/reference/MCTtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs multiple contrast test — MCTtest","text":"dose, resp Either vectors equal length specifying dose response values,     names variables data frame specified data. data Data frame containing variables referenced dose resp     data specified assumed dose     resp variables referenced data (vectors) models object class Mods, see Mods     details S covariance matrix resp type = \"general\",     see Description. type Determines whether inference based ANCOVA model     homoscedastic normality assumption (type = \"normal\"),     estimates doses covariance matrix degrees     freedom specified directly resp, S     df. See also fitMod Pinheiro et al. (2014). addCovars Formula specifying additive linear covariates (type = \"normal\") placAdj Logical, true, assumed placebo-adjusted estimates   specified resp (possible type = \"general\"). alpha Significance level multiple contrast test df Specify degrees freedom use case type = \"general\".   argument missing df = Inf used (corresponds   multivariate normal distribution).   type = \"normal\" degrees freedom deduced (C)OVA fit   used argument ignored. critV Supply pre-calculated critical value. argument NULL,   critical value calculated test decision based   p-values. critV = TRUE critical value calculated. pVal Logical determining, whether p-values calculated. alternative Character determining alternative multiple contrast   trend test. na.action function indicates happen   data contain NAs. mvtcontrol list specifying additional control parameters qmvt   pmvt calls code, see also mvtnorm.control   details. contMat Contrast matrix apply ANCOVA dose-response estimates.   contrasts need columns matrix (.e. column   sums need 0).","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/MCTtest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Performs multiple contrast test — MCTtest","text":"Integrals multivariate t multivariate normal distribution   calculated using mvtnorm package.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/MCTtest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs multiple contrast test — MCTtest","text":"object class MCTtest, list containing output.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/MCTtest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Performs multiple contrast test — MCTtest","text":"Hothorn, T., Bretz, F., Westfall, P. (2008). Simultaneous   Inference General Parametric Models, Biometrical Journal,   50, 346–363 Pinheiro, J. C., Bornkamp, B., Glimm, E. Bretz, F. (2014)   Model-based dose finding model uncertainty using general   parametric models, Statistics Medicine, 33,   1646–1661","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/MCTtest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Performs multiple contrast test — MCTtest","text":"Bjoern Bornkamp","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/reference/MCTtest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs multiple contrast test — MCTtest","text":"","code":"## example without covariates data(biom) ## define shapes for which to calculate optimal contrasts modlist <- Mods(emax = 0.05, linear = NULL, logistic = c(0.5, 0.1),                 linInt = c(0, 1, 1, 1), doses = c(0, 0.05, 0.2, 0.6, 1)) m1 <- MCTtest(dose, resp, biom, models=modlist) ## now calculate critical value (but not p-values) m2 <- MCTtest(dose, resp, biom, models=modlist, critV = TRUE, pVal = FALSE) ## now hand over critical value m3 <- MCTtest(dose, resp, biom, models=modlist, critV = 2.24)  ## example with covariates data(IBScovars) modlist <- Mods(emax = 0.05, linear = NULL, logistic = c(0.5, 0.1),                 linInt = c(0, 1, 1, 1), doses = c(0, 1, 2, 3, 4)) MCTtest(dose, resp, IBScovars, models = modlist, addCovars = ~gender) #> Multiple Contrast Test #>  #> Contrasts: #>     emax linear logistic linInt #> 0 -0.894 -0.616   -0.894 -0.521 #> 1  0.207 -0.338    0.228 -0.573 #> 2  0.226  0.002    0.227  0.373 #> 3  0.225  0.315    0.217  0.357 #> 4  0.236  0.638    0.222  0.365 #>  #> Contrast Correlation: #>           emax linear logistic linInt #> emax     1.000  0.715    1.000  0.617 #> linear   0.715  1.000    0.698  0.863 #> logistic 1.000  0.698    1.000  0.598 #> linInt   0.617  0.863    0.598  1.000 #>  #> Multiple Contrast Test: #>          t-Stat   adj-p #> emax      3.178 0.00187 #> logistic  3.164 0.00210 #> linear    2.640 0.01035 #> linInt    2.247 0.02764  ## example using general approach (fitted on placebo-adjusted scale) ancMod <- lm(resp~factor(dose)+gender, data=IBScovars) ## extract estimates and information to feed into MCTtest drEst <- coef(ancMod)[2:5] vc <- vcov(ancMod)[2:5, 2:5] doses <- 1:4 MCTtest(doses, drEst, S = vc, models = modlist, placAdj = TRUE,         type = \"general\", df = Inf) #> Multiple Contrast Test #>  #> Contrasts: #>    emax linear logistic linInt #> 1 0.462 -0.429    0.511 -0.672 #> 2 0.505  0.002    0.507  0.437 #> 3 0.504  0.400    0.485  0.418 #> 4 0.527  0.810    0.497  0.428 #>  #> Contrast Correlation: #>           emax linear logistic linInt #> emax     1.000  0.715    1.000  0.617 #> linear   0.715  1.000    0.698  0.863 #> logistic 1.000  0.698    1.000  0.598 #> linInt   0.617  0.863    0.598  1.000 #>  #> Multiple Contrast Test: #>          t-Stat   adj-p #> emax      3.178 0.00187 #> logistic  3.164 0.00203 #> linear    2.640 0.00988 #> linInt    2.247 0.02681  ## example with general alternatives handed over data(biom) ## calculate contrast matrix for the step-contrasts ## represent them as linInt models models <- Mods(linInt=rbind(c(1,1,1,1),                             c(0,1,1,1),                             c(0,0,1,1),                             c(0,0,0,1)),                 doses=c(0,0.05,0.2,0.6,1)) plot(models)  ## now calculate optimal contrasts for these means ## use weights from actual sample sizes weights <- as.numeric(table(biom$dose)) contMat <- optContr(models, w = weights) ## plot contrasts plot(contMat)  ## perform multiple contrast test MCTtest(dose, resp, data=biom, contMat = contMat) #> Multiple Contrast Test #>  #> Contrasts: #>      linInt1 linInt2 linInt3 linInt4 #> 0     -0.894  -0.548  -0.365  -0.224 #> 0.05   0.224  -0.548  -0.365  -0.224 #> 0.2    0.224   0.365  -0.365  -0.224 #> 0.6    0.224   0.365   0.548  -0.224 #> 1      0.224   0.365   0.548   0.894 #>  #> Contrast Correlation: #>         linInt1 linInt2 linInt3 linInt4 #> linInt1   1.000   0.612   0.408   0.250 #> linInt2   0.612   1.000   0.667   0.408 #> linInt3   0.408   0.667   1.000   0.612 #> linInt4   0.250   0.408   0.612   1.000 #>  #> Multiple Contrast Test: #>         t-Stat   adj-p #> linInt2  3.418 0.00179 #> linInt3  2.780 0.01098 #> linInt1  2.486 0.02423 #> linInt4  1.753 0.11949  ## example for using the Dunnett contrasts ## Dunnett contrasts doses <- sort(unique(biom$dose)) contMat <- rbind(-1, diag(4)) rownames(contMat) <- doses colnames(contMat) <- paste(\"D\", doses[-1], sep=\"\") MCTtest(dose, resp, data=biom, contMat = contMat) #> Multiple Contrast Test #>  #> Contrasts: #>      D0.05 D0.2 D0.6 D1 #> 0       -1   -1   -1 -1 #> 0.05     1    0    0  0 #> 0.2      0    1    0  0 #> 0.6      0    0    1  0 #> 1        0    0    0  1 #>  #> Contrast Correlation: #>       D0.05 D0.2 D0.6  D1 #> D0.05   1.0  0.5  0.5 0.5 #> D0.2    0.5  1.0  0.5 0.5 #> D0.6    0.5  0.5  1.0 0.5 #> D1      0.5  0.5  0.5 1.0 #>  #> Multiple Contrast Test: #>       t-Stat  adj-p #> D1     2.680 0.0151 #> D0.6   2.617 0.0178 #> D0.2   2.066 0.0654 #> D0.05  0.497 0.6034"},{"path":"https://openpharma.github.io/DoseFinding/reference/Mods.html","id":null,"dir":"Reference","previous_headings":"","what":"Define dose-response models — Mods","title":"Define dose-response models — Mods","text":"Mods functions allows define set dose-response models.  function used input object number different functions.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/Mods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define dose-response models — Mods","text":"","code":"Mods(   ...,   doses,   placEff = 0,   maxEff,   direction = c(\"increasing\", \"decreasing\"),   addArgs = NULL,   fullMod = FALSE )  getResp(fmodels, doses)  plotMods(   ModsObj,   nPoints = 200,   superpose = FALSE,   xlab = \"Dose\",   ylab = \"Model means\",   modNams = NULL,   trafo = function(x) x )  # S3 method for class 'Mods' plot(   x,   nPoints = 200,   superpose = FALSE,   xlab = \"Dose\",   ylab = \"Model means\",   modNams = NULL,   plotTD = FALSE,   Delta,   ... )"},{"path":"https://openpharma.github.io/DoseFinding/reference/Mods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define dose-response models — Mods","text":"... function Mods: Dose-response model names parameter values specifying guesstimates \\(\\theta_2\\) parameters. See drmodels complete list dose-response models implemented. See example specification. function plot.Mods: Additional arguments xyplot call. doses Dose levels used, needs include placebo. placEff, maxEff Specify used placebo effect maximum effect placebo.  Either numeric vector size number candidate models length one. parameters specified placEff = 0 assumed, maxEff = 1 assumed, direction = \"increasing\" maxEff = -1 assumed, direction = \"decreasing\". direction Character determining whether beneficial direction increasing decreasing increasing dose levels. argument ignored maxEff specified. addArgs List containing two entries named \"scal\" \"\" \"betaMod\" \"linlog\". addArgs NULL following defaults used list(scal = 1.2*max(doses), = 0.01*max(doses), nodes = doses). fullMod Logical determining, whether model parameters specified Mods function (via ... argument) interpreted standardized full model parameters. fmodels object class Mods ModsObj function plotMods ModsObj contain object class Mods. nPoints Number points plotting superpose Logical determining, whether model plots superposed xlab, ylab Label y-axis x-axis. modNams modNams == NULL, names panels determined underlying model functions, otherwise contents modNams used. trafo function plotMods option plot candidate model set transformed scale (e.g. probability scale candidate models formulated log-odds scale). default trafo identity function. x Object class Mods type Mods plotTD plotTD logical determining, whether TD plotted. Delta target effect estimate TD. Delta Delta: target effect size use target dose (TD) (Delta > 0).","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/Mods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define dose-response models — Mods","text":"Returns object class \"Mods\". object contains specified model parameter values   derived linear parameters (based \"placEff\" \"maxEff\") list.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/Mods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define dose-response models — Mods","text":"dose-response models used package (see drmodels details) form $$f(d) = \\theta_0+\\theta_1 f^0(d,\\theta_2)$$ parameter \\(\\theta_2\\) non-linear parameter can one- two-dimensional, depending used model. One needs hand effect placebo maximum effect dose range, \\(\\theta_0,\\theta_1\\) back-calculated, output object class \"Mods\". object can form input functions extract mean response (getResp) target doses (TD ED) corresponding models. also needed input functions powMCT, optDesign models, example beta model (scal) linlog model () parameters estimated data, need specified via addArgs argument. default plot method Mods objects based plot using lattice package backward compatibility. function plotMods function implements plot using ggplot2 package. NOTE: decreasing effect beneficial considered response variable needs specified , either using direction = \"decreasing\" specifying negative \"maxEff\" argument.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/Mods.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Define dose-response models — Mods","text":"Pinheiro, J. C., Bornkamp, B., Bretz, F. (2006). Design analysis dose finding studies   combining multiple comparisons modeling procedures, Journal Biopharmaceutical Statistics, 16,   639–656","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/reference/Mods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Define dose-response models — Mods","text":"Bjoern Bornkamp","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/Mods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define dose-response models — Mods","text":"","code":"## Example on how to specify candidate models  ## Suppose one would like to use the following models with the specified ## guesstimates for theta2, in a situation where the doses to be used are ## 0, 0.05, 0.2, 0.6, 1  ## Model            guesstimate(s) for theta2 parameter(s) (name) ## linear           - ## linear in log    - ## Emax             0.05 (ED50) ## Emax             0.3 (ED50) ## exponential      0.7 (delta) ## quadratic       -0.85 (delta) ## logistic         0.4  0.09 (ED50, delta) ## logistic         0.3  0.1 (ED50, delta) ## betaMod          0.3  1.3 (delta1, delta2) ## sigmoid Emax     0.5  2 (ED50, h) ## linInt           0.5 0.75 1 1 (perc of max-effect at doses) ## linInt           0.5 1 0.7 0.5 (perc of max-effect at doses)  ## for the linInt model one specifies the effect over placebo for ## each active dose. ## The fixed \"scal\" parameter of the betaMod is set to 1.2 ## The fixed \"off\"  parameter of the linlog is set to 0.1 ## These (standardized) candidate models can be specified as follows  models <- Mods(linear = NULL, linlog = NULL, emax = c(0.05, 0.3),                exponential = 0.7, quadratic = -0.85,                logistic = rbind(c(0.4, 0.09), c(0.3, 0.1)),                betaMod = c(0.3, 1.3), sigEmax = c(0.5, 2),                linInt = rbind(c(0.5, 0.75, 1, 1), c(0.5, 1, 0.7, 0.5)),                doses = c(0, 0.05, 0.2, 0.6, 1),                addArgs = list(scal=1.2, off=0.1)) ## \"models\" now contains the candidate model set, as placEff, maxEff and ## direction were not specified a placebo effect of 0 and an effect of 1 ## is assumed  ## display of specified candidate set using default plot (based on lattice) plot(models)  ## display using ggplot2 plotMods(models)   ## example for creating a candidate set with decreasing response doses <- c(0, 10, 25, 50, 100, 150) fmodels <- Mods(linear = NULL, emax = 25,                    logistic = c(50, 10.88111), exponential = 85,                    betaMod = rbind(c(0.33, 2.31), c(1.39, 1.39)),                    linInt = rbind(c(0, 1, 1, 1, 1),                                   c(0, 0, 1, 1, 0.8)),                    doses=doses, placEff = 0.5, maxEff = -0.4,                    addArgs=list(scal=200)) plot(fmodels)  plotMods(fmodels)  ## some customizations (different model names, symbols, line-width) plot(fmodels, lwd = 3, pch = 3, cex=1.2, col=\"red\",      modNams = paste(\"mod\", 1:8, sep=\"-\"))   ## for a full-model object one can calculate the responses ## in a matrix getResp(fmodels, doses=c(0, 20, 100, 150)) #>        linear      emax  logistic exponential  betaMod1  betaMod2   linInt1 #> 0   0.5000000 0.5000000 0.5000000   0.5000000 0.5000000 0.5000000 0.5000000 #> 20  0.4466667 0.2925926 0.4799218   0.4780753 0.1034104 0.4033236 0.2333333 #> 100 0.2333333 0.1266667 0.1039996   0.3146301 0.3264910 0.1000000 0.1000000 #> 150 0.1000000 0.1000000 0.1000000   0.1000000 0.4600007 0.2318393 0.1000000 #>     linInt2 #> 0      0.50 #> 20     0.50 #> 100    0.10 #> 150    0.18 #> attr(,\"parList\") #> attr(,\"parList\")$linear #>           e0        delta  #>  0.500000000 -0.002666667  #>  #> attr(,\"parList\")$emax #>         e0       eMax       ed50  #>  0.5000000 -0.4666667 25.0000000  #>  #> attr(,\"parList\")$logistic #>         e0       eMax       ed50      delta  #>  0.5040408 -0.4040820 50.0000000 10.8811100  #>  #> attr(,\"parList\")$exponential #>          e0          e1       delta  #>  0.50000000 -0.08264711 85.00000000  #>  #> attr(,\"parList\")$betaMod1 #>     e0   eMax delta1 delta2   scal  #>   0.50  -0.40   0.33   2.31 200.00  #>  #> attr(,\"parList\")$betaMod2 #>     e0   eMax delta1 delta2   scal  #>   0.50  -0.40   1.39   1.39 200.00  #>  #> attr(,\"parList\")$linInt1 #>   d0  d10  d25  d50 d100 d150  #>  0.5  0.5  0.1  0.1  0.1  0.1  #>  #> attr(,\"parList\")$linInt2 #>   d0  d10  d25  d50 d100 d150  #> 0.50 0.50 0.50 0.10 0.10 0.18  #>   ## calculate doses giving an improvement of 0.3 over placebo TD(fmodels, Delta=0.3, direction = \"decreasing\") #>      linear        emax    logistic exponential    betaMod1    betaMod2  #>  112.500000   45.000000   62.095220  130.265330    4.880978   56.762044  #>     linInt1     linInt2  #>   21.250000   43.750000  ## discrete version TD(fmodels, Delta=0.3, TDtype = \"discrete\", doses=doses, direction = \"decreasing\") #>      linear        emax    logistic exponential    betaMod1    betaMod2  #>         150          50         100         150          10         100  #>     linInt1     linInt2  #>          25          50  ## doses giving 50% of the maximum effect ED(fmodels, p=0.5) #>      linear        emax    logistic exponential    betaMod1    betaMod2  #>   75.000000   18.750000   50.215409  104.517639    1.255838   37.337384  #>     linInt1     linInt2  #>   17.500000   37.500000  ED(fmodels, p=0.5, EDtype = \"discrete\", doses=doses) #>      linear        emax    logistic exponential    betaMod1    betaMod2  #>         100          25         100         150          10          50  #>     linInt1     linInt2  #>          25          50   plot(fmodels, plotTD = TRUE, Delta = 0.3)   ## example for specifying all model parameters (fullMod=TRUE) fmods <- Mods(emax = c(0, 1, 0.1), linear = cbind(c(-0.4,0), c(0.2,0.1)),               sigEmax = c(0, 1.1, 0.5, 3),               doses = 0:4, fullMod = TRUE) getResp(fmods, doses=seq(0,4,length=11)) #>          emax linear1 linear2   sigEmax #> 0   0.0000000   -0.40    0.00 0.0000000 #> 0.4 0.8000000   -0.32    0.04 0.3724868 #> 0.8 0.8888889   -0.24    0.08 0.8841444 #> 1.2 0.9230769   -0.16    0.12 1.0257960 #> 1.6 0.9411765   -0.08    0.16 1.0674248 #> 2   0.9523810    0.00    0.20 1.0830769 #> 2.4 0.9600000    0.08    0.24 1.0901427 #> 2.8 0.9655172    0.16    0.28 1.0937718 #> 3.2 0.9696970    0.24    0.32 1.0958198 #> 3.6 0.9729730    0.32    0.36 1.0970608 #> 4   0.9756098    0.40    0.40 1.0978558 #> attr(,\"parList\") #> attr(,\"parList\")$emax #> [1] 0.0 1.0 0.1 #>  #> attr(,\"parList\")$linear1 #> [1] -0.4  0.2 #>  #> attr(,\"parList\")$linear2 #> [1] 0.0 0.1 #>  #> attr(,\"parList\")$sigEmax #> [1] 0.0 1.1 0.5 3.0 #>  ## calculate doses giving an improvement of 0.3 over placebo TD(fmods, Delta=0.3) #>       emax    linear1    linear2    sigEmax  #> 0.04285714 1.50000000 3.00000000 0.36056239  ## discrete version TD(fmods, Delta=0.3, TDtype = \"discrete\", doses=0:4) #>    emax linear1 linear2 sigEmax  #>       1       2       3       1  ## doses giving 50% of the maximum effect ED(fmods, p=0.5) #>      emax   linear1   linear2   sigEmax  #> 0.0952381 2.0000000 2.0000000 0.4993506  ED(fmods, p=0.5, EDtype = \"discrete\", doses=0:4) #>    emax linear1 linear2 sigEmax  #>       1       3       3       1  plot(fmods)"},{"path":"https://openpharma.github.io/DoseFinding/reference/bFitMod.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a dose-response model using Bayesian or bootstrap methods. — bFitMod","title":"Fit a dose-response model using Bayesian or bootstrap methods. — bFitMod","text":"type = \"Bayes\", MCMC sampling posterior distribution   dose-response model done. function assumes multivariate   normal distribution resp covariance matrix S,   taken likelihood function combined prior   distributions specified prior form posterior distribution. type = \"bootstrap\", multivariate normal distribution   resp covariance matrix S assumed, large   number samples drawn distribution. draw   fitMod function type = \"general\" used fit draws   multivariate normal distribution.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/bFitMod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a dose-response model using Bayesian or bootstrap methods. — bFitMod","text":"","code":"bFitMod(dose, resp, model, S, placAdj = FALSE,         type = c(\"Bayes\", \"bootstrap\"),         start = NULL, prior = NULL, nSim = 1000,         MCMCcontrol = list(), control = NULL, bnds,          addArgs = NULL)  # S3 method for class 'bFitMod' coef(object, ...)  # S3 method for class 'bFitMod' predict(object, predType = c(\"full-model\", \"effect-curve\"),         summaryFct = function(x) quantile(x, probs = c(0.025, 0.25, 0.5, 0.75, 0.975)),         doseSeq = NULL, lenSeq = 101, ...)  # S3 method for class 'bFitMod' plot(x, plotType = c(\"dr-curve\", \"effect-curve\"),         quant = c(0.025, 0.5, 0.975),          plotData = c(\"means\", \"meansCI\", \"none\"),         level = 0.95, lenDose = 201, ...)"},{"path":"https://openpharma.github.io/DoseFinding/reference/bFitMod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a dose-response model using Bayesian or bootstrap methods. — bFitMod","text":"dose Numeric specifying dose variable. resp Numeric specifying response estimate     corresponding doses dose S Covariance matrix associated dose-response     estimate specified via resp model Dose-response model fit, possible models     \"linlog\", \"linear\", \"quadratic\", \"emax\", \"exponential\",     \"sigEmax\", \"betaMod\" \"logistic\", see drmodels. placAdj Whether estimates \"placAdj\"     placebo-adjusted (note linear log     logistic model fitted placebo-adjusted data) type Character allowed values \"Bayes\" \"bootstrap\", Determining     whether samples drawn posterior, bootstrap     distribution. start Optional starting values dose-response     parameters MCMC algorithm. prior List containing information regarding prior distributions     type = \"Bayes\".     list needs many entries model     parameters. ordering list entries      arguments list model see (see drmodels).     example Emax model first entry determines prior     e0, second eMax third ed50. list entry user choice choose     4 possible distributions: norm: Vector length 2 giving mean standard deviation. t: Vector length 3  giving median, scale degrees       freedom t-distribution. lnorm: Vector length 2 giving mean standard       deviation log scale. beta: Vector length 4 giving lower upper bound       beta prior well alpha beta parameters       beta distribution  nSim Desired number samples produce algorithm MCMCcontrol List control parameters MCMC algorithm thin Thinning rate. Must positive integer. w Numeric length number parameters       model, specifies width parameters slice sampler. adapt Logical whether adapt w (width)       parameter slice sampler short trial run. widths       chosen IQR/1.3 trial run.  control control argument fitMod. bnds Bounds non-linear parameters, case type =     \"bootstrap\". missing default bounds     defBnds used. addArgs List containing two entries named \"scal\" \"\" \"betaMod\"     \"linlog\" model. addArgs NULL following defaults     used list(scal = 1.2*max(doses), = 0.01*max(doses)) x, object bFitMod object predType, summaryFct, doseSeq, lenSeq Arguments predict method. predType: predType determines whether predictions returned     dose-response curve effect curve (difference placebo). summaryFct: equal NULL predictions calculated     sampled parameter value. Otherwise summary function     applied dose-response predictions parameter value.     default calculate 0.025, 0.25, 0.5, 0.75, 0.975 quantiles     predictions dose. doseSeq: calculate predictions. specified     predictions calculated grid length lenSeq     minimum maximum dose. lenSeq: Length default grid calculate     predictions. plotType, quant, plotData, level, lenDose Arguments plot method. plotType: Determining whether dose-response curve     effect curve plotted. quant: Vector quantiles display plot plotData: Determines original data plotted:     Either means means CI . level CI     determined argument level. level: Level CI, plotData equal     meansCI. lenDose: Number grid values use display. ... Additional arguments ignored.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/bFitMod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a dose-response model using Bayesian or bootstrap methods. — bFitMod","text":"Componentwise univariate slice samplers implemented (see Neal,   2003) sample posterior distribution.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/bFitMod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a dose-response model using Bayesian or bootstrap methods. — bFitMod","text":"object class bFitMod, list containing matrix   posterior simulations plus additional information fitted   model.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/bFitMod.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a dose-response model using Bayesian or bootstrap methods. — bFitMod","text":"Neal, R. M. (2003), Slice sampling, Annals Statistics, 31, 705-767","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/bFitMod.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit a dose-response model using Bayesian or bootstrap methods. — bFitMod","text":"Bjoern Bornkamp","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/reference/bFitMod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a dose-response model using Bayesian or bootstrap methods. — bFitMod","text":"","code":"data(biom)   ## produce first stage fit (using dose as factor)   anMod <- lm(resp~factor(dose)-1, data=biom)   drFit <- coef(anMod)   S <- vcov(anMod)   dose <- sort(unique(biom$dose))   ## define prior list   ## normal prior for E0 (mean=0 and sdev=10)   ## normal prior for Emax (mean=0 and sdev=100)   ## beta prior for ED50: bounds: [0,1.5] parameters shape1=0.45, shape2=1.7   prior <- list(norm = c(0, 10), norm = c(0,100), beta=c(0,1.5,0.45,1.7))   ## now fit an emax model   gsample <- bFitMod(dose, drFit, S, model = \"emax\",                        start = c(0, 1, 0.1), nSim = 1000, prior = prior)   ## summary information   gsample #> Dose Response Model #>  #> Model: emax  #>  #> Summary of posterior draws #>       mean  sdev   2.5%   25%   50%   75% 97.5% n.eff #> e0   0.347 0.139 0.0476 0.266 0.355 0.446 0.588   184 #> eMax 0.893 0.342 0.3428 0.652 0.856 1.074 1.742   156 #> ed50 0.378 0.335 0.0218 0.115 0.266 0.557 1.216   133 #>  #> Fitted to: #>       0    0.05     0.2     0.6       1  #> 0.34491 0.45675 0.81032 0.93444 0.94871    ## samples are stored in   head(gsample$samples) #>               e0      eMax        ed50 #> [1,]  0.15284581 0.9570781 0.042075268 #> [2,]  0.03231835 0.8573154 0.044708444 #> [3,]  0.05388497 0.9142132 0.024812400 #> [4,] -0.05152308 0.8731606 0.008853658 #> [5,]  0.06155071 0.8297683 0.073817334 #> [6,]  0.22650197 0.9404226 0.217721379   ## predict 0.025, 0.25, 0.5, 0.75, 0.975 Quantile at 0, 0.5 and 1   predict(gsample, doseSeq = c(0, 0.5, 1)) #>               0       0.5        1 #> [1,] 0.04759272 0.7076645 0.769421 #> [2,] 0.26585613 0.8132222 0.904595 #> [3,] 0.35469505 0.8794331 0.992379 #> [4,] 0.44627453 0.9414073 1.083946 #> [5,] 0.58765331 1.0659162 1.241633   ## simple plot function   plot(gsample)     ## now look at bootstrap distribution   gsample <- bFitMod(dose, drFit, S, model = \"emax\", type = \"bootstrap\",                      nSim = 100, bnds = defBnds(1)$emax)   plot(gsample)     ## now fit linear interpolation   prior <- list(norm = c(0,1000), norm = c(0,1000),                 norm = c(0,1000), norm = c(0,1000), norm = c(0,100))   gsample <- bFitMod(dose, drFit, S, model = \"linInt\",                       start = rep(1,5), nSim = 1000, prior = prior)   gsample <- bFitMod(dose, drFit, S, model = \"linInt\", type = \"bootstrap\",                      nSim = 100)    ## data fitted on placebo adjusted scale   data(IBScovars)   anovaMod <- lm(resp~factor(dose)+gender, data=IBScovars)   drFit <- coef(anovaMod)[2:5] # placebo adjusted estimates at doses   vCov <- vcov(anovaMod)[2:5,2:5]   dose <- sort(unique(IBScovars$dose))[-1]   prior <- list(norm = c(0,100), beta=c(0,6,0.45,1.7))   ## Bayes fit   gsample <- bFitMod(dose, drFit, vCov, model = \"emax\", placAdj=TRUE,                      start = c(1, 0.1), nSim = 1000, prior = prior)   ## bootstrap fit   gsample <- bFitMod(dose, drFit, vCov, model = \"emax\", placAdj=TRUE,                      type = \"bootstrap\", start = c(1, 0.1),                      nSim = 100, prior = prior, bnds = c(0.01,6))   ## calculate target dose estimate   TD(gsample, Delta = 0.2) #>   [1] 5.483246e-01           NA 2.082177e-02           NA 1.012294e+00 #>   [6] 7.170960e+00 9.170305e-02 1.164439e+00 4.473308e-01 8.647422e-03 #>  [11] 8.524866e-01 3.265359e-01 6.115726e-03 6.464406e-01 1.168766e+00 #>  [16] 8.012687e-02 4.644101e-02 2.918858e-01 1.980985e-02 8.306477e-03 #>  [21] 3.249893e+00 5.186899e-02 6.817803e+02           NA 3.955707e-01 #>  [26] 1.173023e-02 1.762746e-02 1.609045e+00 3.311992e-01 1.252110e+00 #>  [31] 1.046662e-02 3.420285e-02 3.278316e-01 7.190523e-01 1.830558e+00 #>  [36] 4.315960e-01 6.644240e-01 4.524656e-01 2.626864e+00 9.839347e-03 #>  [41] 8.395836e-01 8.418548e-01 9.022919e-01 3.124601e-01 4.169349e-01 #>  [46] 1.878729e-02 1.573643e-01 2.584459e-01 1.086026e+00 2.016593e-02 #>  [51] 1.142066e-01 1.245746e-02 5.157838e-02           NA 1.162715e+00 #>  [56] 6.292261e-01 2.938004e-01 4.014124e-01 8.601197e+00 1.414026e-02 #>  [61] 4.714891e-02           NA 2.442323e+00           NA 1.013448e-01 #>  [66] 1.678585e-01 1.624529e-02 9.736559e-01 9.079957e-01 2.013135e+00 #>  [71] 5.200823e-01 3.835070e-01 2.728112e-02 6.631502e-01 2.449805e-02 #>  [76] 1.046263e+00 3.623976e-01 1.311963e+00 1.315941e+00           NA #>  [81] 6.498328e-02 7.201673e+00 1.084076e-02 7.791422e-01 2.891102e+01 #>  [86] 2.429044e+00 6.605563e-01 3.567867e-01 1.220284e-02 1.625772e+00 #>  [91] 4.291899e-01 6.428695e-03 8.695904e-01 6.967239e-01 1.238257e+00 #>  [96] 2.416458e-01 3.849889e-01 8.106360e-01 1.399761e+00 1.162878e+00   ## now fit linear interpolation   prior <- list(norm = c(0,1000), norm = c(0,1000), norm = c(0,1000), norm = c(0,100))   gsample <- bFitMod(dose, drFit, vCov, model = \"linInt\", placAdj=TRUE,                      start = rep(1,4), nSim = 1000, prior = prior)   gsample <- bFitMod(dose, drFit, vCov, model = \"linInt\", type = \"bootstrap\",                      placAdj = TRUE, nSim = 100)"},{"path":"https://openpharma.github.io/DoseFinding/reference/bMCTtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs Bayesian multiple contrast test — bMCTtest","title":"Performs Bayesian multiple contrast test — bMCTtest","text":"function performs Bayesian multiple contrast test using normal mixture priors response dose, proposed Fleischer et al. (2022). general description multiple contrast test see MCTtest.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/bMCTtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs Bayesian multiple contrast test — bMCTtest","text":"","code":"bMCTtest(   dose,   resp,   data = NULL,   models,   S = NULL,   type = c(\"normal\", \"general\"),   prior,   alpha = 0.025,   na.action = na.fail,   mvtcontrol = mvtnorm.control(),   contMat = NULL,   critV = NULL )"},{"path":"https://openpharma.github.io/DoseFinding/reference/bMCTtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs Bayesian multiple contrast test — bMCTtest","text":"dose, resp Either vectors equal length specifying dose response values, names variables data frame specified data. data Data frame containing variables referenced dose resp data specified assumed dose resp variables referenced data (vectors) models object class Mods, see Mods details S covariance matrix resp type = \"general\", see Description. type Determines whether inference based ANCOVA model homoscedastic normality assumption (type = \"normal\"), estimates doses covariance matrix degrees freedom specified directly resp, S df. See also fitMod Pinheiro et al. (2014). prior List length equal number doses prior arm.  element needs class normMix (See RBesT package documentation). assumed -th component prior list corresponds -th largest dose. example first entry list prior placebo group, second entry prior second lowest dose .  Internally priors across different arms combined (densities multiplied) assuming independence. resulting multivariate normal mixture prior many components product number components individual mixture priors. posterior mixture part result object \"posterior\". alpha Significance level frequentist multiple contrast test. critical values supplied via critV used derive critical values Bayesian decision rule. na.action function indicates happen data contain NAs. mvtcontrol list specifying additional control parameters qmvt pmvt calls code, see also mvtnorm.control details. contMat Contrast matrix apply posterior dose-response estimates. contrasts need columns matrix (.e. column sums need 0). specified optimal contrasts calculated using optContr. critV Supply critical value maximum posterior probability contrasts greater zero needs surpassed establish non-flat dose-response. argument NULL, derived critical values frequentist MCP-Mod using provided alpha.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/bMCTtest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs Bayesian multiple contrast test — bMCTtest","text":"object class bMCTtest, list containing output.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/bMCTtest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Performs Bayesian multiple contrast test — bMCTtest","text":"type = \"normal\", ANCOVA model based homoscedastic normality assumption fitted posteriors dose-response contrast vectors obtained assuming known variance. type = \"general\" assumed multivariate normally distributed estimates specified resp covariance given S, define likelihood.  Posteriors dose-response contrast vectors obtained assuming known covariance matrix S multiple contrast test decision based maximum posterior probability contrast greater zero. Thresholds posterior probability can either supplied derived frequentist critical values. latter case Bayesian test give approximately results frequentist multiple contrast test uninformative priors used. default calculation optimal contrasts prior information ignored (.e. contrasts calculated way MCTtest).  Fleischer et al. (2022) discuss using contrasts take prior effective sample sizes account, can slightly favourable Bayesian MCT test. alternative contrasts can directly handed via contMat argument. analysis covariate adjustment, covariate-adjusted resp S can supplied together using type = \"general\". See  `vignette(\"binary_data\")` vignette \"Design analysis template MCP-Mod binary data\" example obtain covariate adjusted estimates.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/bMCTtest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Performs Bayesian multiple contrast test — bMCTtest","text":"Fleischer, F., Bossert, S., Deng, Q., Loley, C. Gierse, J. (2022).  Bayesian MCP-Mod,   Pharmaceutical Statistics, 21, 654–670","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/reference/bMCTtest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Performs Bayesian multiple contrast test — bMCTtest","text":"Marius Thomas","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/bMCTtest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs Bayesian multiple contrast test — bMCTtest","text":"","code":"if (require(\"RBesT\")) {  ############################### ## Normal outcome ###############################  data(biom) ## define shapes for which to calculate optimal contrasts doses <- c(0, 0.05, 0.2, 0.6, 1) modlist <- Mods(emax = 0.05, linear = NULL, logistic = c(0.5, 0.1),                 linInt = c(0, 1, 1, 1), doses = doses) ## specify an informative prior for placebo, weakly informative for other arms plc_prior <- mixnorm(inf = c(0.8, 0.4, 0.1), rob = c(0.2, 0.4, 10)) vague_prior <- mixnorm(c(1, 0, 10)) ## i-th component of the prior list corresponds to the i-th largest dose ## (e.g. 1st component -> placebo prior; last component prior for top dose) prior <- list(plc_prior, vague_prior, vague_prior, vague_prior, vague_prior)  m1 <- bMCTtest(dose, resp, biom, models=modlist, prior = prior) ## now supply a critical value (= threshold for maxmimum posterior probability) m2 <- bMCTtest(dose, resp, biom, models=modlist, prior = prior, critV = 0.99)  #################################### ## Binary outcome with covariates #################################### if (FALSE) { # \\dontrun{ ## generate data logit <- function(p) log(p / (1 - p)) inv_logit <- function(y) 1 / (1 + exp(-y)) doses <- c(0, 0.5, 1.5, 2.5, 4)  ## set seed and ensure reproducibility across R versions set.seed(1, kind = \"Mersenne-Twister\", sample.kind = \"Rejection\", normal.kind = \"Inversion\") group_size <- 100 dose_vector <- rep(doses, each = group_size) N <- length(dose_vector) ## generate covariates x1 <- rnorm(N, 0, 1) x2 <- factor(sample(c(\"A\", \"B\"), N, replace = TRUE, prob = c(0.6, 0.4))) ## assume approximately logit(10%) placebo and logit(35%) asymptotic response with ED50=0.5 prob <- inv_logit(emax(dose_vector, -2.2, 1.6, 0.5) + 0.3 * x1 + 0.3 * (x2 == \"B\")) dat <- data.frame(y = rbinom(N, 1, prob),                   dose = dose_vector, x1 = x1, x2 = x2)  ## specify an informative prior for placebo (on logit scale), weakly informative for other arms plc_prior <- mixnorm(inf = c(0.8, -2, 0.5), rob = c(0.2, -2, 10)) vague_prior <- mixnorm(c(1, 0, 10)) prior <- list(plc_prior, vague_prior, vague_prior, vague_prior, vague_prior)  ## candidate models mods <- Mods(emax = c(0.25, 1), sigEmax = rbind(c(1, 3), c(2.5, 4)), betaMod = c(1.1, 1.1),              placEff = logit(0.1), maxEff = logit(0.35)-logit(0.1),              doses = doses)  fit_cov <- glm(y~factor(dose) + 0 + x1 + x2, data = dat, family = binomial)  covariate_adjusted_estimates <- function(mu_hat, S_hat, formula_rhs,                                          doses, other_covariates, n_sim) {   ## predict every patient under *every* dose   oc_rep <- as.data.frame(lapply(other_covariates, function(col) rep(col, times = length(doses))))   d_rep <- rep(doses, each = nrow(other_covariates))   pdat <- cbind(oc_rep, dose = d_rep)   X <- model.matrix(formula_rhs, pdat)   ## average on probability scale then backtransform to logit scale   mu_star <- logit(tapply(inv_logit(X %*% mu_hat), pdat$dose, mean))   ## estimate covariance matrix of mu_star   pred <- replicate(n_sim, logit(tapply(inv_logit(X %*% drop(mvtnorm::rmvnorm(1, mu_hat, S_hat))),                                         pdat$dose, mean)))   return(list(mu_star = as.numeric(mu_star), S_star = cov(t(pred)))) }  ca <- covariate_adjusted_estimates(coef(fit_cov), vcov(fit_cov), ~factor(dose)+0+x1+x2,                                    doses, dat[, c(\"x1\", \"x2\")], 1000) bMCTtest(doses, ca$mu_star, S = ca$S_star, type = \"general\", models = mods, prior = prior) } # } ################################################ ## example with contrasts handed over ################################################  data(biom) ## define shapes for which to calculate optimal contrasts doses <- c(0, 0.05, 0.2, 0.6, 1) modlist <- Mods(emax = 0.05, linear = NULL, sigEmax = c(0.5, 5),                 linInt = c(0, 1, 1, 1), doses = doses)  ## specify an informative prior for placebo, weakly informative for other arms plc_prior <- mixnorm(inf = c(0.8, 0.4, 0.1), rob = c(0.2, 0.4, 10), sigma = 0.7) vague_prior <- mixnorm(c(1, 0, 10), sigma = 0.7) prior <- list(plc_prior, vague_prior, vague_prior, vague_prior, vague_prior)  ## use prior effective sample sizes to calculate optimal contrasts prior_ess <- unlist(lapply(prior, ess)) n_grp <- as.numeric(table(biom$dose)) weights <- n_grp + prior_ess cmat <- optContr(modlist, w = weights)  bMCTtest(dose, resp, biom, models=modlist, prior = prior, contMat = cmat) } #> Loading required package: RBesT #> This is RBesT version 1.8.1 (released 2025-01-20, git-sha 5048c0b) #> Using default prior reference scale 0.7 #> Using default prior reference scale 0.7 #> Using default prior reference scale 0.7 #> Using default prior reference scale 0.7 #> Using default prior reference scale 0.7 #> Bayesian MCP-Mod #>  #> Contrasts: #>        emax linear sigEmax linInt #> 0    -0.870 -0.681  -0.609 -0.762 #> 0.05  0.026 -0.191  -0.210 -0.263 #> 0.2   0.221 -0.060  -0.201  0.342 #> 0.6   0.302  0.291   0.400  0.342 #> 1     0.321  0.641   0.620  0.342 #>  #> Posterior Mixture Weights: #> Comp. 1 Comp. 2  #>   0.995   0.005  #>  #> Bayesian t-statistics: #>         Comp. 1 Comp. 2 posterior probability #> linInt    4.167   3.372                     1 #> emax      4.111   2.996                     1 #> linear    3.709   3.198                     1 #> sigEmax   3.437   3.095                     1 #>  #> Critical value (for maximum posterior probability): 0.987 (alpha = 0.025, one-sided)"},{"path":"https://openpharma.github.io/DoseFinding/reference/biom.html","id":null,"dir":"Reference","previous_headings":"","what":"Biometrics Dose Response data — biom","title":"Biometrics Dose Response data — biom","text":"example data set dose response studies. data set used Bretz et al. (2005) illustrate MCPMod methodology.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/biom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Biometrics Dose Response data — biom","text":"","code":"data(biom)"},{"path":"https://openpharma.github.io/DoseFinding/reference/biom.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Biometrics Dose Response data — biom","text":"data frame 100 observations following 2 variables. resp numeric vector containing response values dose numeric vector containing dose values","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/biom.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Biometrics Dose Response data — biom","text":"Bretz, F., Pinheiro, J. C., Branson, M. (2005), Combining multiple comparisons modeling techniques dose-response studies, Biometrics, 61, 738–748","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/critVal.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate critical value for multiple contrast test — critVal","title":"Calculate critical value for multiple contrast test — critVal","text":"Calculation critical value maximum contrast test. based equicoordinate quantile function multivariate normal t distribution implemented qmvt function mvtnorm package.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/critVal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate critical value for multiple contrast test — critVal","text":"","code":"critVal(   corMat,   alpha = 0.025,   df = NULL,   alternative = c(\"one.sided\", \"two.sided\"),   control = mvtnorm.control() )"},{"path":"https://openpharma.github.io/DoseFinding/reference/critVal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate critical value for multiple contrast test — critVal","text":"corMat Correlation matrix contrasts alpha Significance level multiple contrast test df Specify degrees freedom use, argument missing df = Inf used (corresponds multivariate normal distribution). alternative Character determining alternative multiple contrast trend test. control list specifying additional control parameters qmvt pmvt calls code, see also mvtnorm.control details.","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/reference/critVal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate critical value for multiple contrast test — critVal","text":"Bjoern Bornkamp","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/critVal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate critical value for multiple contrast test — critVal","text":"","code":"R <- matrix(c(1,0.5,0.5,1), nrow=2) critVal(R, alpha = 0.05, df = 1) #> [1] 9.509978 critVal(R, alpha = 0.05, df = 20) #> [1] 2.027525 critVal(R, alpha = 0.05, df = Inf) #> [1] 1.916399"},{"path":"https://openpharma.github.io/DoseFinding/reference/defBnds.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates default bounds for non-linear parameters in dose-response models — defBnds","title":"Calculates default bounds for non-linear parameters in dose-response models — defBnds","text":"Calculates reasonable bounds non-linear parameters   built-non-linear regression model based dose range   investigation. logistic model first row corresponds ED50 parameter   second row delta parameter. sigmoid Emax model   first row corresponds ED50 parameter second row   h parameter, beta model first second row correspond   delta1 delta2 parameters. See logistic,   sigEmax betaMod details.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/defBnds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates default bounds for non-linear parameters in dose-response models — defBnds","text":"","code":"defBnds(mD, emax = c(0.001, 1.5)*mD,            exponential = c(0.1, 2)*mD,             logistic = matrix(c(0.001, 0.01, 1.5, 1/2)*mD, 2),            sigEmax = matrix(c(0.001*mD, 0.5, 1.5*mD, 10), 2),            betaMod = matrix(c(0.05,0.05,4,4), 2))"},{"path":"https://openpharma.github.io/DoseFinding/reference/defBnds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates default bounds for non-linear parameters in dose-response models — defBnds","text":"mD Maximum dose study. emax, exponential, logistic, sigEmax, betaMod values nonlinear parameters model-functions","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/defBnds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates default bounds for non-linear parameters in dose-response models — defBnds","text":"List containing bounds model parameters.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/defBnds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates default bounds for non-linear parameters in dose-response models — defBnds","text":"Bjoern Bornkamp","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/reference/defBnds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates default bounds for non-linear parameters in dose-response models — defBnds","text":"","code":"defBnds(mD = 1) #> $emax #> [1] 0.001 1.500 #>  #> $logistic #>       [,1] [,2] #> [1,] 0.001  1.5 #> [2,] 0.010  0.5 #>  #> $sigEmax #>       [,1] [,2] #> [1,] 0.001  1.5 #> [2,] 0.500 10.0 #>  #> $exponential #> [1] 0.1 2.0 #>  #> $betaMod #>      [,1] [,2] #> [1,] 0.05    4 #> [2,] 0.05    4 #>    defBnds(mD = 200) #> $emax #> [1]   0.2 300.0 #>  #> $logistic #>      [,1] [,2] #> [1,]  0.2  300 #> [2,]  2.0  100 #>  #> $sigEmax #>      [,1] [,2] #> [1,]  0.2  300 #> [2,]  0.5   10 #>  #> $exponential #> [1]  20 400 #>  #> $betaMod #>      [,1] [,2] #> [1,] 0.05    4 #> [2,] 0.05    4 #>"},{"path":"https://openpharma.github.io/DoseFinding/reference/drmodels.html","id":null,"dir":"Reference","previous_headings":"","what":"Built-in dose-response models in DoseFinding — drmodels","title":"Built-in dose-response models in DoseFinding — drmodels","text":"Dose-response model functions gradients. definitions model functions: Emax model $$$$$$ f(d,\\theta)=E_0+E_{max}\\frac{d}{ED_{50}+d}$$ Sigmoid Emax Model $$$$$$ f(d,\\theta)=E_0+E_{max}\\frac{d^h}{ED^h_{50}+d^h}$$ Exponential Model $$$$$$ f(d,\\theta)=E_0+E_1(\\exp(d/\\delta)-1)$$ Beta model $$$$$$ f(d,\\theta)=E_0+E_{max}B(\\delta_1,\\delta_2)(d/scal)^{\\delta_1}(1-d/scal)^{\\delta_2} $$ $$$$ $$B(\\delta_1,\\delta_2)=(\\delta_1+\\delta_2)^{\\delta_1+\\delta_2}/(\\delta_1^{\\delta_1} $$$$ \\delta_2^{\\delta_2})$$ \\(scal\\) fixed dose scaling parameter. Linear Model $$$$$$ f(d,\\theta)=E_0+\\delta d$$ Linear log Model $$$$$$ f(d,\\theta)=E_0+\\delta \\log(d + )$$ \\(\\) fixed offset parameter. Logistic Model $$ f(d, \\theta) = E_0 + E_{\\max}/\\left\\{1 + \\exp\\left[ \\left(ED_{50} - d \\right)/\\delta \\right] \\right\\}$$ Quadratic Model $$$$$$ f(d,\\theta)=E_0+\\beta_1d+\\beta_2d^2$$ standardized model equation quadratic model \\(d+\\delta d^2\\), \\(\\delta=\\beta_2/\\beta_1\\). Linear Interpolation model linInt model provides linear interpolation values defined nodes vector. virtually situations nodes vector equal doses used analysis. example Mods fitMod function automatically use doses used context function call nodes. guesstimates specified Mods function need treatment effects active doses standardized interval [0,1] (see examples Mods function).","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/drmodels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Built-in dose-response models in DoseFinding — drmodels","text":"","code":"emax(dose, e0, eMax, ed50) emaxGrad(dose, eMax, ed50, ...)  sigEmax(dose, e0, eMax, ed50, h) sigEmaxGrad(dose, eMax, ed50, h, ...)  exponential(dose, e0, e1, delta) exponentialGrad(dose, e1, delta, ...)  quadratic(dose, e0, b1, b2) quadraticGrad(dose, ...)  betaMod(dose, e0, eMax, delta1, delta2, scal) betaModGrad(dose, eMax, delta1, delta2, scal, ...)  linear(dose, e0, delta) linearGrad(dose, ...)  linlog(dose, e0, delta, off = 1) linlogGrad(dose, off, ...)  logistic(dose, e0, eMax, ed50, delta) logisticGrad(dose, eMax, ed50, delta, ...)  linInt(dose, resp, nodes) linIntGrad(dose, resp, nodes, ...)"},{"path":"https://openpharma.github.io/DoseFinding/reference/drmodels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Built-in dose-response models in DoseFinding — drmodels","text":"dose Dose variable e0 models placebo effect. logistic model left-asymptote parameter, corresponding basal effect level (placebo effect) eMax Beta Model: Maximum effect within dose-range Emax, sigmoid Emax, logistic Model: Asymptotic maximum effect ed50 Dose giving half asymptotic maximum effect ... Just included convenience gradient functions, example quadratic(dose, e0=0, b1=1, b2=3) throw error (although gradient quadratic model independent e0, b1 b2). h Hill parameter, determining steepness model ED50 e1 Slope parameter exponential model delta Exponential model: Parameter, controlling convexity model. Linear linlog model: Slope parameter Logistic model: Parameter controlling determining steepness curve b1 first parameter quadratic model b2 second parameter quadratic model (controls, whether model convex concave) delta1 delta1 parameter beta model delta2 delta2 parameter beta model scal Scale parameter (treated fixed value, estimated) Offset value avoid problems dose=0 (treated fixed value, estimated) resp Response values nodes linInt model nodes Interpolation nodes linear interpolation linInt model (treated fixed value, estimated)","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/drmodels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Built-in dose-response models in DoseFinding — drmodels","text":"Response value model functions matrix containing gradient evaluations.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/drmodels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Built-in dose-response models in DoseFinding — drmodels","text":"Emax model used represent monotone, concave dose-response shapes.  distinguish general sigmoid emax model sometimes also called hyperbolic emax model. sigmoid Emax model extension (hyperbolic) Emax model introducing additional parameter h, determines steepness curve ed50 value. sigmoid Emax model describes monotonic, sigmoid dose-response relationships. toxicology literature model also called four-parameter log-logistic (4pLL) model. quadratic model intended capture possible non-monotonic dose-response relationship. exponential model intended capture possible sub-linear convex dose-response relationship. beta model intended capture non-monotone dose-response relationships flexible quadratic model.  kernel beta model function consists kernel density function beta distribution interval [0,scal]. parameter scal estimated needs set value larger maximum dose. can set functions (fitMod, Mods) via addArgs argument, omitted value 1.2*(maximum dose) used default, maximum dose inferred input respective function. linear log-dose model intended capture concave shapes. parameter estimated code set pre-specified value. can set functions (fitMod, Mods) via addArgs argument, omitted value 0.01*(maximum dose) used default, maximum dose inferred input respective function. logistic model intended capture general monotone, sigmoid dose-response relationships. logistic model sigmoid Emax model closely related: sigmoid Emax model logistic model log(dose). linInt model provids linear interpolation means doses. can used \"nonparametric\" estimate dose-response curve, probably interesting specifying \"nonparametric\" truth planning assess well parametric models work nonparametric truth. function Mods fitMod interpolation nodes selected equal dose-levels specified.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/drmodels.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Built-in dose-response models in DoseFinding — drmodels","text":"MacDougall, J. (2006). Analysis dose-response studies - Emax model,N. Ting (ed.), Dose Finding Drug Development, Springer, New York, pp. 127–145 Pinheiro, J. C., Bretz, F. Branson, M. (2006). Analysis dose-response studies - modeling approaches, N. Ting (ed.). Dose Finding Drug Development, Springer, New York, pp. 146–171","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/reference/drmodels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Built-in dose-response models in DoseFinding — drmodels","text":"","code":"## some quadratic example shapes quadModList <- Mods(quadratic = c(-0.5, -0.75, -0.85, -1), doses = c(0,1)) plotMods(quadModList)   ## some emax example shapes emaxModList <- Mods(emax = c(0.02,0.1,0.5,1), doses = c(0,1)) plotMods(emaxModList)  ## example for gradient emaxGrad(dose = (0:4)/4, eMax = 1, ed50 = 0.5) #>      e0      eMax       ed50 #> [1,]  1 0.0000000  0.0000000 #> [2,]  1 0.3333333 -0.4444444 #> [3,]  1 0.5000000 -0.5000000 #> [4,]  1 0.6000000 -0.4800000 #> [5,]  1 0.6666667 -0.4444444  ## some sigmoid emax example shapes sigEmaxModList <- Mods(sigEmax = rbind(c(0.05,1), c(0.15,3), c(0.4,8),                        c(0.7,8)), doses = c(0,1)) plotMods(sigEmaxModList)  sigEmaxGrad(dose = (0:4)/4, eMax = 1, ed50 = 0.5, h = 8) #>      e0        eMax        ed50            h #> [1,]  1 0.000000000  0.00000000  0.000000000 #> [2,]  1 0.003891051 -0.06201456 -0.002686576 #> [3,]  1 0.500000000 -4.00000000  0.000000000 #> [4,]  1 0.962446824 -0.57828696  0.014654699 #> [5,]  1 0.996108949 -0.06201456  0.002686576  ## some exponential example shapes expoModList <- Mods(exponential = c(0.1,0.25,0.5,2), doses=c(0,1)) plotMods(expoModList)  exponentialGrad(dose = (0:4)/4, e1 = 1, delta = 2) #>      e0        e1       delta #> [1,]  1 0.0000000  0.00000000 #> [2,]  1 0.1331485 -0.07082178 #> [3,]  1 0.2840254 -0.16050318 #> [4,]  1 0.4549914 -0.27281089 #> [5,]  1 0.6487213 -0.41218032  ## some beta model example shapes betaModList <- Mods(betaMod = rbind(c(1,1), c(1.5,0.75), c(0.8,2.5),                     c(0.4,0.9)), doses=c(0,1), addArgs=list(scal = 1.2)) plotMods(betaModList)  betaModGrad(dose = (0:4)/4, eMax = 1, delta1 = 1, delta2 = 1, scal = 5) #>      e0 eMax     delta1    delta2 #> [1,]  1 0.00  0.0000000 0.0000000 #> [2,]  1 0.19 -0.4374912 0.1219522 #> [3,]  1 0.36 -0.5793976 0.2116032 #> [4,]  1 0.51 -0.6140261 0.2706204 #> [5,]  1 0.64 -0.5864261 0.3008023  ## some logistic model example shapes logistModList <- Mods(logistic = rbind(c(0.5,0.05), c(0.5,0.15),                       c(0.2,0.05), c(0.2,0.15)), doses=c(0,1)) plotMods(logistModList)  logisticGrad(dose = (0:4)/4, eMax = 1, ed50 = 0.5, delta = 0.05) #>      e0         eMax          ed50        delta #> [1,]  1 4.539787e-05 -0.0009079162  0.009079162 #> [2,]  1 6.692851e-03 -0.1329611334  0.664805667 #> [3,]  1 5.000000e-01 -5.0000000000  0.000000000 #> [4,]  1 9.933071e-01 -0.1329611334 -0.664805667 #> [5,]  1 9.999546e-01 -0.0009079162 -0.009079162  ## some linInt shapes genModList <- Mods(linInt = rbind(c(0.5,1,1),                       c(0,1,1), c(0,0,1)), doses=c(0,0.5,1,1.5)) plotMods(genModList)  linIntGrad(dose = (0:4)/4, resp=c(0,0.5,1,1,1), nodes=(0:4)/4) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    1    0    0    0 #> [3,]    0    0    1    0    0 #> [4,]    0    0    0    1    0 #> [5,]    0    0    0    0    1"},{"path":"https://openpharma.github.io/DoseFinding/reference/fitMod.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit non-linear dose-response model — fitMod","title":"Fit non-linear dose-response model — fitMod","text":"Fits dose-response model. Built-dose-response models \"linlog\", \"linear\", \"quadratic\", \"emax\", \"exponential\", \"sigEmax\", \"betaMod\" \"logistic\" (see drmodels).","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/fitMod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit non-linear dose-response model — fitMod","text":"","code":"fitMod(   dose,   resp,   data = NULL,   model = NULL,   S = NULL,   type = c(\"normal\", \"general\"),   addCovars = ~1,   placAdj = FALSE,   bnds,   df = NULL,   start = NULL,   na.action = na.fail,   control = NULL,   addArgs = NULL )  # S3 method for class 'DRMod' coef(object, sep = FALSE, ...)  # S3 method for class 'DRMod' vcov(object, ...)  # S3 method for class 'DRMod' predict(   object,   predType = c(\"full-model\", \"ls-means\", \"effect-curve\"),   newdata = NULL,   doseSeq = NULL,   se.fit = FALSE,   ... )  # S3 method for class 'DRMod' plot(   x,   CI = FALSE,   level = 0.95,   plotData = c(\"means\", \"meansCI\", \"raw\", \"none\"),   plotGrid = TRUE,   colMn = 1,   colFit = 1,   ... )  # S3 method for class 'DRMod' logLik(object, ...)  # S3 method for class 'DRMod' AIC(object, ..., k = 2)  # S3 method for class 'DRMod' gAIC(object, ..., k = 2)"},{"path":"https://openpharma.github.io/DoseFinding/reference/fitMod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit non-linear dose-response model — fitMod","text":"dose, resp Either vectors equal length specifying dose response values, names variables data frame specified data. data Data frame containing variables referenced dose resp data specified assumed dose resp variables referenced data (vectors) model dose-response model used fitting data. Built-models \"linlog\", \"linear\", \"quadratic\", \"emax\", \"exponential\", \"sigEmax\", \"betaMod\" \"logistic\" (see drmodels). S inverse weighting matrix used case, type = \"general\", see Description. later inference statements (vcov predict methods) assumed estimated covariance estimates first stage fit. type Determines whether inference based ANCOVA model homoscedastic normality assumption (type = \"normal\"), estimates doses covariance matrix degrees freedom specified directly resp, S df. See also Description Pinheiro et al. (2014). addCovars Formula specifying additional additive linear covariates (type = \"normal\") placAdj Logical, true, assumed placebo-adjusted estimates specified resp (possible type = \"general\"). bnds Bounds non-linear parameters. missing default bounds defBnds used. dose-response model one non-linear parameter (example Emax exponential model), bnds   needs vector containing upper lower bound. models two non-linear parameters bnds needs   matrix containing bounds rows, see Description section defBnds details   formatting bounds individual models. df Degrees freedom use case type = \"general\". argument missing df = Inf used. type = \"normal\" argument ignored exact degrees freedom can deduced model. start Vector starting values nonlinear parameters (ignored linear models). equal NULL, grid optimization performed best value used starting value local optimizer. na.action function indicates happen data contain NAs. control list entries: \"nlminbcontrol\", \"optimizetol\" \"gridSize\". entry nlminbcontrol needs list passed directly control argument nlminb function,   used internally models 2 nonlinear parameters. entry optimizetol passed directly tol argument optimize function, used models   1 nonlinear parameters. entry gridSize needs list entries dim1 dim2 giving size grid gridsearch   1d 2d models. addArgs List containing two entries named \"scal\" \"\" \"betaMod\" \"linlog\" model. addArgs NULL following defaults used list(scal = 1.2*max(doses), = 0.01*max(doses)). object, x DRMod object sep Logical determining whether coefficients returned one numeric separated list. ... Additional arguments plotting plot method. cases additional arguments ignored. predType, newdata, doseSeq, se.fit predType determines whether predictions returned full model  (including potential covariates), ls-means (SAS type) effect curve (difference placebo). newdata gives covariates use producing predictions (predType = \"full-model\"), missing  covariates used fitting used. doseSeq dose-sequence produce predictions (predType = \"effect-curve\" predType = \"ls-means\").  missing doses used fitting used. se.fit: logical determining, whether standard error calculated. CI, level, plotData, plotGrid, colMn, colFit Arguments plot method: CI determines whether confidence intervals plotted. level determines level confidence intervals. plotData determines data plotted: Either means means CI, raw data none. case type = \"normal\" covariates ls-means displayed, type = \"general\" option \"raw\" available. colMn colFit determine colors fitted model raw means. k Penalty use model-selection criterion (AIC uses 2, BIC uses log(n)).","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/fitMod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit non-linear dose-response model — fitMod","text":"object class DRMod. Essentially list containing information fitted model coefficients,   residual sum squares (generalized residual sum squares),","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/fitMod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit non-linear dose-response model — fitMod","text":"type = \"normal\" ordinary least squares used additional additive covariates can specified addCovars. underlying assumption hence normally distributed data homoscedastic variance. type = \"general\" generalized least squares criterion used $$$$$$ (f(dose,\\theta)-resp)'S^{-1}(f(dose,\\theta)-resp)$$ inverse weighting matrix specified S, type = \"general\" primarily interest, fitting model (C)OVA type estimates obtained first stage fit, resp contains estimates S estimated covariance matrix estimates resp. Statistical inference (e.g. confidence intervals) rely asymptotic normality first stage estimates, makes method interest sufficiently large sample size first stage fit. modified model-selection criterion can applied model fits (see also Pinheiro et al. 2014 details). details implemented numerical optimizer see Details section . Details numerical optimizer model-fitting: linear models fitting done using numerical linear algebra based QR decomposition.  nonlinear models numerical optimization performed nonlinear parameters model optimizing linear parameters iteration (similar Golub-Pereyra implemented nls). models 1 nonlinear parameter optimize function used 2 nonlinear parameters nlminb function used. starting value generated using grid-search (grid size specified via control$gridSize), can directly handed via start. details asymptotic approximation used type = \"normal\", see Seber Wild (2003, chapter 5). details asymptotic approximation used type = \"general\", gAIC, see Pinheiro et al. (2014).","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/fitMod.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit non-linear dose-response model — fitMod","text":"Pinheiro, J. C., Bornkamp, B., Glimm, E. Bretz, F. (2014) Model-based dose finding model   uncertainty using general parametric models, Statistics Medicine, 33, 1646–1661 Seber, G..F. Wild, C.J. (2003). Nonlinear Regression, Wiley.","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/reference/fitMod.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit non-linear dose-response model — fitMod","text":"Bjoern Bornkamp","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/fitMod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit non-linear dose-response model — fitMod","text":"","code":"## Fit the emax model to the IBScovars data set data(IBScovars) fitemax <- fitMod(dose, resp, data=IBScovars, model=\"emax\",                   bnds = c(0.01, 4))  ## methods for DRMod objects summary(fitemax) #> Dose Response Model #>  #> Model: emax  #> Fit-type: normal  #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.8748 -0.4734 -0.0296  0.4940  2.1631  #>  #> Coefficients with approx. stand. error: #>      Estimate Std. Error #> e0      0.217     0.0903 #> eMax    0.377     0.1515 #> ed50    0.363     0.7679 #>  #> Residual standard error: 0.761  #> Degrees of freedom: 366  ## extracting coefficients coef(fitemax) #>        e0      eMax      ed50  #> 0.2171129 0.3773367 0.3628365  ## (asymptotic) covariance matrix of estimates vcov(fitemax) #>                e0         eMax       ed50 #> e0    0.008151233 -0.007833365 0.01169729 #> eMax -0.007833365  0.022948049 0.07412872 #> ed50  0.011697291  0.074128715 0.58972101 ## predicting newdat <- data.frame(dose = c(0,0.5,1), gender=factor(1)) predict(fitemax, newdata=newdat, predType = \"full-model\", se.fit = TRUE) #> $fit #> [1] 0.2171129 0.4357735 0.4939889 #>  #> $se.fit #> [1] 0.09028418 0.13019577 0.08060712 #>  ## plotting plot(fitemax, plotData = \"meansCI\", CI=TRUE)   ## now include (additive) covariate gender fitemax2 <- fitMod(dose, resp, data=IBScovars, model=\"emax\",                    addCovars = ~gender, bnds = c(0.01, 4)) vcov(fitemax2) #>                   e0          eMax          ed50       gender2 #> e0       0.011767275 -0.0080170385  0.0118789742 -0.0050993260 #> eMax    -0.008017039  0.0230221644  0.0744025962  0.0002308542 #> ed50     0.011878974  0.0744025962  0.5924163063 -0.0001905096 #> gender2 -0.005099326  0.0002308542 -0.0001905096  0.0072354137 plot(fitemax2)  ## fitted log-likelihood logLik(fitemax2) #> 'log Lik.' -421.1925 (df=5) ## extracting AIC (or BIC) AIC(fitemax2) #> [1] 852.3851  ## Illustrating the \"general\" approach for a binary regression ## produce first stage fit (using dose as factor) data(migraine) PFrate <- migraine$painfree/migraine$ntrt doseVec <- migraine$dose doseVecFac <- as.factor(migraine$dose) ## fit logistic regression with dose as factor fitBin <- glm(PFrate~doseVecFac-1, family = binomial,               weights = migraine$ntrt) drEst <- coef(fitBin) vCov <- vcov(fitBin) ## now fit an Emax model (on logit scale) gfit <- fitMod(doseVec, drEst, S=vCov, model = \"emax\", bnds = c(0,100),                 type = \"general\") ## model fit on logit scale plot(gfit, plotData = \"meansCI\", CI = TRUE)  ## model on probability scale logitPred <- predict(gfit, predType =\"ls-means\", doseSeq = 0:200,                      se.fit=TRUE) plot(0:200, 1/(1+exp(-logitPred$fit)), type = \"l\", ylim = c(0, 0.5),      ylab = \"Probability of being painfree\", xlab = \"Dose\") LB <- logitPred$fit-qnorm(0.975)*logitPred$se.fit UB <- logitPred$fit+qnorm(0.975)*logitPred$se.fit lines(0:200, 1/(1+exp(-LB))) lines(0:200, 1/(1+exp(-UB)))    ## now illustrate \"general\" approach for placebo-adjusted data (on ## IBScovars) note that the estimates are identical to fitemax2 above) anovaMod <- lm(resp~factor(dose)+gender, data=IBScovars) drFit <- coef(anovaMod)[2:5] # placebo adjusted estimates at doses vCov <- vcov(anovaMod)[2:5,2:5] dose <- sort(unique(IBScovars$dose))[-1] ## now fit an emax model to these estimates gfit2 <- fitMod(dose, drFit, S=vCov, model = \"emax\", type = \"general\",                placAdj = TRUE, bnds = c(0.01, 2)) ## some outputs summary(gfit2) #> Dose Response Model #>  #> Model: emax  #> Fit-type: general  #>  #> Coefficients with approx. stand. error: #>      Estimate Std. Error #> eMax    0.377      0.152 #> ed50    0.363      0.772 #>  #> Fitted to: #>     1     2     3     4  #> 0.285 0.297 0.350 0.348  #>  #> with Covariance Matrix: #>         1       2       3       4 #> 1 0.01570 0.00822 0.00822 0.00822 #> 2 0.00822 0.01600 0.00825 0.00821 #> 3 0.00822 0.00825 0.01640 0.00820 #> 4 0.00822 0.00821 0.00820 0.01620 coef(gfit2) #>      eMax      ed50  #> 0.3771103 0.3630332  vcov(gfit2) #>            eMax      ed50 #> eMax 0.02314275 0.0747923 #> ed50 0.07479230 0.5955193 predict(gfit2, se.fit = TRUE, doseSeq = c(1,2,3,4), predType = \"effect-curve\") #> $fit #> [1] 0.2766699 0.3191748 0.3364020 0.3457323 #>  #> $se.fit #> [1] 0.1213133 0.1016972 0.1050097 0.1110139 #>  plot(gfit2, CI=TRUE, plotData = \"meansCI\")  gAIC(gfit2) #> [1] 4.098152"},{"path":"https://openpharma.github.io/DoseFinding/reference/glycobrom.html","id":null,"dir":"Reference","previous_headings":"","what":"Glycopyrronium Bromide dose-response data — glycobrom","title":"Glycopyrronium Bromide dose-response data — glycobrom","text":"Data clinical study evaluating Efficacy Safety Four Doses Glycopyrronium Bromide Patients Stable Chronic Obstructive Pulmonary Disease (COPD).  data set obtained clinicaltrials.gov (NCT00501852).  study design 4 period incomplete cross-design. primary endpoint trough forced expiratory volume 1 second (FEV1) following 7 days Treatment.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/glycobrom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glycopyrronium Bromide dose-response data — glycobrom","text":"","code":"data(glycobrom)"},{"path":"https://openpharma.github.io/DoseFinding/reference/glycobrom.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Glycopyrronium Bromide dose-response data — glycobrom","text":"data frame 5 summary estimates (one per dose). Variables:   data frame 5 summary estimates (one per dose). Variables: dose numeric vector containing dose values fev1 numeric vector containing least square      mean per dose sdev numeric vector containing standard errors      least square means per dose n Number participants analyzed per treatment group","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/glycobrom.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Glycopyrronium Bromide dose-response data — glycobrom","text":"http://clinicaltrials.gov/ct2/show/results/NCT00501852","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/glycobrom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Glycopyrronium Bromide dose-response data — glycobrom","text":"data given summary estimates (least-square means) dose.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/glycobrom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Glycopyrronium Bromide dose-response data — glycobrom","text":"","code":"## simulate a full data set with given means and sdv (here we ignore   ## the original study was a cross-over design, and simulate a parallel   ## group design)   simData <- function(mn, sd, n, doses, fixed = TRUE){     ## simulate data with means (mns) and standard deviations (sd), for     ## fixed = TRUE, the data set will have observed means and standard     ## deviations as given in mns and sd     resp <- numeric(sum(n))     uppind <- cumsum(n)     lowind <- c(0,uppind)+1     for(i in 1:length(n)){       rv <- rnorm(n[i])       if(fixed)         rv <- scale(rv)       resp[lowind[i]:uppind[i]] <- mn[i] + sd[i]*rv     }     data.frame(doses=rep(doses, n), resp=resp)   }   data(glycobrom)   fullDat <- simData(glycobrom$fev1, glycobrom$sdev, glycobrom$n,                      glycobrom$dose)"},{"path":"https://openpharma.github.io/DoseFinding/reference/guesst.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate guesstimates based on prior knowledge — guesst","title":"Calculate guesstimates based on prior knowledge — guesst","text":"Calculates guesstimates standardized model parameter(s) using general approach described Pinheiro et al. (2006).","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/guesst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate guesstimates based on prior knowledge — guesst","text":"","code":"guesst(   d,   p,   model = c(\"emax\", \"exponential\", \"logistic\", \"quadratic\", \"betaMod\", \"sigEmax\"),   less = TRUE,   local = FALSE,   dMax,   Maxd,   scal )"},{"path":"https://openpharma.github.io/DoseFinding/reference/guesst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate guesstimates based on prior knowledge — guesst","text":"d Vector containing dose value(s). p Vector expected percentages maximum effect achieved d. model Character string. one \"emax\", \"exponential\", \"quadratic\", \"betaMod\", \"sigEmax\", \"logistic\". less Logical, needed case quadratic model.  Determines d smaller (less=TRUE) larger (less=FALSE) dopt (see Pinheiro et al. (2006) details). local Logical indicating whether local asymptotic version guesstimate derived (defaults FALSE).  needed emax, logistic sigEmax model.  local=TRUE maximum dose must provided via Maxd. dMax Dose maximum effect occurs, needed beta model Maxd Maximum dose administered trial scal Scale parameter, needed beta model","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/guesst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate guesstimates based on prior knowledge — guesst","text":"Returns numeric vector containing guesstimates.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/guesst.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate guesstimates based on prior knowledge — guesst","text":"Calculates guesstimates parameters \\(\\theta_2\\) standardized model function based prior expected percentage maximum effect certain dose levels. Note function used together plot.Mods function ensure guesstimates reflecting prior beliefs. logistic sigmoid emax models least two pairs (d,p) need specified. beta model dose maximum effect occurs (dMax) specified addition (d,p) pair. exponential model maximum dose administered (Maxd) needs specified addition (d,p) pair. quadratic model one (d,p) pair needed. advisable specify location maximum within dose range pair. emax, sigmoid Emax logistic model one can choose local asymptotic version. local version one explicitly forces standardized model function pass specified points (d,p). asymptotic version assumed standardized model function equal 1 largest dose (approach described Pinheiro et al. (2006)). local version used, convergence problems underlying nonlinear optimization can occur.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/guesst.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate guesstimates based on prior knowledge — guesst","text":"Bornkamp B., Pinheiro J. C., Bretz, F. (2009). MCPMod: R Package Design Analysis Dose-Finding Studies, Journal Statistical Software, 29(7), 1–23 Pinheiro, J. C., Bretz, F., Branson, M. (2006). Analysis dose-response studies - modeling approaches,   N. Ting (ed.), Dose Finding Drug Development, Springer, New York, pp. 146–171","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/reference/guesst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate guesstimates based on prior knowledge — guesst","text":"","code":"## Emax model ## Expected percentage of maximum effect: 0.8 is associated with ## dose 0.3 (d,p)=(0.3, 0.8), dose range [0,1] emx1 <- guesst(d=0.3, p=0.8, model=\"emax\") emax(0.3,0,1,emx1) #> ed50  #>  0.8  ## local approach emx2 <- guesst(d=0.3, p=0.8, model=\"emax\", local = TRUE, Maxd = 1) emax(0.3,0,1,emx2)/emax(1,0,1,emx2) #> ed50  #>  0.8  ## plot models models <- Mods(emax=c(emx1, emx2), doses=c(0,1)) plot(models)   ## Logistic model ## Select two (d,p) pairs (0.2, 0.6) and (0.2, 0.95) lgc1 <- guesst(d = c(0.2, 0.6), p = c(0.2, 0.95), \"logistic\") logistic(c(0.2,0.6), 0, 1, lgc1[1], lgc1[2]) #> [1] 0.20 0.95 ## local approach lgc2 <- guesst(d = c(0.2, 0.6), p = c(0.2, 0.95), \"logistic\",                local = TRUE, Maxd = 1) r0 <- logistic(0, 0, 1, lgc2[1], lgc2[2]) r1 <- logistic(1, 0, 1, lgc2[1], lgc2[2]) (logistic(c(0.2,0.6), 0, 1, lgc2[1], lgc2[2])-r0)/(r1-r0) #> [1] 0.2000062 0.9500019 ## plot models models <- Mods(logistic = rbind(lgc1, lgc2), doses=c(0,1)) plot(models)   ## Beta Model ## Select one pair (d,p): (0.4,0.8) ## dose, where maximum occurs: 0.8 bta <- guesst(d=0.4, p=0.8, model=\"betaMod\", dMax=0.8, scal=1.2, Maxd=1) ## plot models <- Mods(betaMod = bta, doses=c(0,1), addArgs = list(scal = 1.2)) plot(models)   ## Sigmoid Emax model ## Select two (d,p) pairs (0.2, 0.6) and (0.2, 0.95) sgE1 <- guesst(d = c(0.2, 0.6), p = c(0.2, 0.95), \"sigEmax\") sigEmax(c(0.2,0.6), 0, 1, sgE1[1], sgE1[2]) #> [1] 0.20 0.95 ## local approach sgE2 <- guesst(d = c(0.2, 0.6), p = c(0.2, 0.95), \"sigEmax\",                local = TRUE, Maxd = 1) sigEmax(c(0.2,0.6), 0, 1, sgE2[1], sgE2[2])/sigEmax(1, 0, 1, sgE2[1], sgE2[2]) #> [1] 0.1999998 0.9500006 models <- Mods(sigEmax = rbind(sgE1, sgE2), doses=c(0,1)) plot(models)   ## Quadratic model ## For the quadratic model it is assumed that the maximum effect occurs at ## dose 0.7 quad <- guesst(d = 0.7, p = 1, \"quadratic\") models <- Mods(quadratic = quad, doses=c(0,1)) plot(models)   ## exponential model ## (d,p) = (0.8,0.5) expo <- guesst(d = 0.8, p = 0.5, \"exponential\", Maxd=1) models <- Mods(exponential = expo, doses=c(0,1)) plot(models)"},{"path":"https://openpharma.github.io/DoseFinding/reference/maFitMod.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit dose-response models via bootstrap model averaging (bagging) — maFitMod","title":"Fit dose-response models via bootstrap model averaging (bagging) — maFitMod","text":"function fits dose-response models bootstrap model averaging approach motivated bagging procedure (Breiman 1996). Given summary estimates outcome dose, function samples summary data multivariate normal distribution. sample dose-response models fit summary estimates best model according gAIC selected.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/maFitMod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit dose-response models via bootstrap model averaging (bagging) — maFitMod","text":"","code":"maFitMod(dose, resp, S, models, nSim = 1000, control, bnds, addArgs = NULL)  # S3 method for class 'maFit' predict(   object,   summaryFct = function(x) quantile(x, probs = c(0.025, 0.25, 0.5, 0.75, 0.975)),   doseSeq = NULL,   ... )  # S3 method for class 'maFit' plot(   x,   plotData = c(\"means\", \"meansCI\", \"none\"),   xlab = \"Dose\",   ylab = \"Response\",   title = NULL,   level = 0.95,   trafo = function(x) x,   lenDose = 201,   ... )"},{"path":"https://openpharma.github.io/DoseFinding/reference/maFitMod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit dose-response models via bootstrap model averaging (bagging) — maFitMod","text":"dose Numeric specifying dose variable. resp Numeric specifying response estimate corresponding doses dose S Covariance matrix associated dose-response estimate specified via resp models dose-response models fit nSim Number bootstrap simulations control control argument fitMod. bnds Bounds non-linear parameters. needs list list entries corresponding selected bounds. names list entries need correspond model names. defBnds function provides default selection. addArgs List containing two entries named \"scal\" \"\" \"betaMod\" \"linlog\" model. addArgs NULL following defaults used list(scal = 1.2*max(doses), = 0.01*max(doses)) object Object class maFit summaryFct equal NULL predictions calculated sampled parameter value. Otherwise summary function applied dose-response predictions parameter value.  default calculate 0.025, 0.25, 0.5, 0.75, 0.975 quantiles predictions dose. doseSeq calculate predictions. ... Additional parametes (unused) x object class maFit plotData Determines original data plotted: Either means means CI . level CI determined argument level. xlab x-axis label ylab y-axis label title plot title level Level CI, plotData equal meansCI. trafo Plot fitted models transformed scale (e.g. probability scale models fitted log-odds scale). default trafo identity function. lenDose Number grid values use display.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/maFitMod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit dose-response models via bootstrap model averaging (bagging) — maFitMod","text":"object class maFit, contains fitted   dose-response models DRMod objects, information model   selected bootstrap basic input parameters.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/maFitMod.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit dose-response models via bootstrap model averaging (bagging) — maFitMod","text":"Breiman, L. (1996). Bagging predictors. Machine learning, 24, 123-140.","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/reference/maFitMod.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit dose-response models via bootstrap model averaging (bagging) — maFitMod","text":"Bjoern Bornkamp","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/maFitMod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit dose-response models via bootstrap model averaging (bagging) — maFitMod","text":"","code":"data(biom) ## produce first stage fit (using dose as factor) anMod <- lm(resp~factor(dose)-1, data=biom) drFit <- coef(anMod) S <- vcov(anMod) dose <- sort(unique(biom$dose)) ## fit an emax and sigEmax model (increase nSim for real use) mFit <- maFitMod(dose, drFit, S, model = c(\"emax\", \"sigEmax\"), nSim = 10) #> Message: Need bounds in \"bnds\" for nonlinear models, using default bounds from \"defBnds\". mFit #> Bootstrap model averaging fits #>  #> Specified summary data: #> doses: 0, 0.05, 0.2, 0.6, 1 #> mean: 0.345, 0.457, 0.81, 0.934, 0.949 #> Covariance Matrix: #>          0  0.05   0.2   0.6     1 #> 0    0.025 0.000 0.000 0.000 0.000 #> 0.05 0.000 0.025 0.000 0.000 0.000 #> 0.2  0.000 0.000 0.025 0.000 0.000 #> 0.6  0.000 0.000 0.000 0.025 0.000 #> 1    0.000 0.000 0.000 0.000 0.025 #>  #> Models fitted: emax, sigEmax #>  #> Models selected by gAIC on bootstrap samples (nSim = 10) #> emax  #>   10  plot(mFit, plotData = \"meansCI\")  ED(mFit, direction = \"increasing\", p = 0.9) #> [1] 0.45"},{"path":"https://openpharma.github.io/DoseFinding/reference/migraine.html","id":null,"dir":"Reference","previous_headings":"","what":"Migraine Dose Response data — migraine","title":"Migraine Dose Response data — migraine","text":"Data set obtained clinicaltrials.gov (NCT00712725).  randomized placebo controlled dose-response trial treatment acute migraine. primary endpoint \"pain freedom 2 hours postdose\" (binary measurement).","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/migraine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Migraine Dose Response data — migraine","text":"","code":"data(migraine)"},{"path":"https://openpharma.github.io/DoseFinding/reference/migraine.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Migraine Dose Response data — migraine","text":"data frame 517 columns corresponding patients  completed trial dose numeric vector containing dose values painfree number treatment responders ntrt number subject per treatment group","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/migraine.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Migraine Dose Response data — migraine","text":"http://clinicaltrials.gov/ct2/show/results/NCT00712725","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/mvpostmix.html","id":null,"dir":"Reference","previous_headings":"","what":"Prior to posterior updating for a multivariate normal mixture — mvpostmix","title":"Prior to posterior updating for a multivariate normal mixture — mvpostmix","text":"Calculate conjugate posterior mixture multivariate normals known covariance matrix","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/mvpostmix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prior to posterior updating for a multivariate normal mixture — mvpostmix","text":"","code":"mvpostmix(priormix, mu_hat, S_hat)"},{"path":"https://openpharma.github.io/DoseFinding/reference/mvpostmix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prior to posterior updating for a multivariate normal mixture — mvpostmix","text":"priormix Prior multivariate normal mixture given list length 3.     first list entry contains mixture weights, second component     mean vectors third component list covariance matrices. mu_hat estimated mean response dose S_hat estimated covariance matrix","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/mvpostmix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prior to posterior updating for a multivariate normal mixture — mvpostmix","text":"Returns posterior multivariate normal mixture list length 3,   containing mixture weights, mean vectors covariance matrices.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/mvpostmix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Prior to posterior updating for a multivariate normal mixture — mvpostmix","text":"Bernardo, J. M., Smith, . F. (1994). Bayesian theory. John Wiley & Sons.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/mvpostmix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prior to posterior updating for a multivariate normal mixture — mvpostmix","text":"Marius Thomas","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/mvtnorm-control.html","id":null,"dir":"Reference","previous_headings":"","what":"Control options for pmvt and qmvt functions — mvtnorm-control","title":"Control options for pmvt and qmvt functions — mvtnorm-control","text":"Returns list (object class \"GenzBretz\") control parameters pmvt qmvt functions mvtnorm package. Note DoseFinding package always uses \"GenzBretz\" algorithm. See mvtnorm documentation information.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/mvtnorm-control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control options for pmvt and qmvt functions — mvtnorm-control","text":"","code":"mvtnorm.control(maxpts = 30000, abseps = 0.001, releps = 0, interval = NULL)"},{"path":"https://openpharma.github.io/DoseFinding/reference/mvtnorm-control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control options for pmvt and qmvt functions — mvtnorm-control","text":"maxpts Maximum number function values integer. abseps Absolute error tolerance double. releps Relative error tolerance double. interval Interval searched, quantile calculated.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/neurodeg.html","id":null,"dir":"Reference","previous_headings":"","what":"Neurodegenerative disease simulated longitudinal dose-finding data set — neurodeg","title":"Neurodegenerative disease simulated longitudinal dose-finding data set — neurodeg","text":"simulated data set motivated real Phase 2 clinical study new drug neurodegenerative disease. state disease measured functional scale, smaller values corresponding severe neurodeterioration. goal drug reduce rate disease progression, measured linear slope functional scale time.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/neurodeg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neurodegenerative disease simulated longitudinal dose-finding data set — neurodeg","text":"","code":"data(neurodeg)"},{"path":"https://openpharma.github.io/DoseFinding/reference/neurodeg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Neurodegenerative disease simulated longitudinal dose-finding data set — neurodeg","text":"data frame 100 observations following 2 variables. resp numeric vector containing response values dose numeric vector containing dose values id Patient ID time time measurement","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/neurodeg.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Neurodegenerative disease simulated longitudinal dose-finding data set — neurodeg","text":"Pinheiro, J. C., Bornkamp, B., Glimm, E. Bretz, F. (2014) Model-based dose finding model uncertainty using general parametric models, Statistics Medicine, 33, 1646–1661","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/neurodeg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Neurodegenerative disease simulated longitudinal dose-finding data set — neurodeg","text":"trial design includes placebo four doses: 1, 3, 10, 30 mg, balanced allocation 50 patients per arm. Patients followed one year, measurements functional scale taken baseline every three months. functional scale response assumed normally distributed , based historical data, believed longitudinal progression functional scale one year follow can modeled simple linear trend. See example analyse type data. data set used Pinheiro et al. (2014) illustrate generalized MCPMod methodology.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/neurodeg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Neurodegenerative disease simulated longitudinal dose-finding data set — neurodeg","text":"","code":"if (FALSE) { # \\dontrun{ ## reproduce analysis from Pinheiro et al. (2014) data(neurodeg) ## first fit the linear mixed effect model library(nlme) fm <- lme(resp ~ as.factor(dose):time, neurodeg, ~time|id, method = \"ML\") muH <- fixef(fm)[-1] # extract estimates covH <- vcov(fm)[-1,-1]  ## derive optimal contrasts for candidate shapes doses <- c(0, 1, 3, 10, 30) mod <- Mods(emax = 1.11, quadratic= -0.022, exponential = 8.867,             linear = NULL, doses = doses) #  contMat <- optContr(mod, S=covH) # calculate optimal contrasts ## multiple contrast test MCTtest(doses, muH, S=covH, type = \"general\", critV = TRUE,         contMat=contMat) ## fit the emax model fitMod(doses, muH, S=covH, model=\"emax\", type = \"general\",        bnds=c(0.1, 10))   ## alternatively one can also fit the model using nlme nlme(resp ~ b0 + (e0 + eM * dose/(ed50 + dose))*time, neurodeg,      fixed = b0 + e0 + eM + ed50 ~ 1, random = b0 + e0 ~ 1 | id,      start = c(200, -4.6, 1.6, 3.2)) ## both approaches lead to rather similar results } # }"},{"path":"https://openpharma.github.io/DoseFinding/reference/optContr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate optimal contrasts — optContr","title":"Calculate optimal contrasts — optContr","text":"function calculates contrast vectors optimal detecting certain alternatives. contrast optimal sense maximizing non-centrality parameter underlying contrast test statistic: $$\\frac{c'\\mu}{\\sqrt{c'Sc}}$$ \\(\\mu\\) mean vector alternative \\(S\\) covariance matrix associated estimate \\(\\mu\\).  optimal contrast given $$c^{opt} \\propto S^{-1}\\left(\\mu - \\frac{\\mu^{\\prime}S^{-1}1} {1^\\prime S^{-1} 1}\\right),$$ see Pinheiro et al. (2014).","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/optContr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate optimal contrasts — optContr","text":"","code":"optContr(   models,   doses,   w,   S,   placAdj = FALSE,   type = c(\"unconstrained\", \"constrained\") )  # S3 method for class 'optContr' plot(   x,   superpose = TRUE,   xlab = \"Dose\",   ylab = NULL,   plotType = c(\"contrasts\", \"means\"),   ... )  plotContr(optContrObj, xlab = \"Dose\", ylab = \"Contrast coefficients\")"},{"path":"https://openpharma.github.io/DoseFinding/reference/optContr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate optimal contrasts — optContr","text":"models object class Mods defining dose-response shapes calculate optimal contrasts. doses Optional argument. argument missing doses attribute Mods object specified models used. w, S Arguments determining matrix S used formula optimal contrasts. Exactly one w S specified. Note w S specified proportionality w Vector specifying weights different doses, formula calculation optimal contrasts. Specifying weights vector equivalent specifying S=diag(1/w) (e.g. homoscedastic case unequal sample sizes, w proportional group sample sizes). S Directly specify matrix proportional covariance matrix use. placAdj Logical determining, whether contrasts applied placebo-adjusted estimates. yes returned coefficients longer contrasts (.e. sum 0). However, result multiplying \"contrast\" matrix placebo adjusted estimates, give results multiplying original contrast matrix unadjusted estimates. type type = \"constrained\" contrast coefficients zero dose group constrained different coefficients active treatment groups. weighted sum active treatments compared zero dose group. increasing trend coefficient zero dose group negative coefficients positive (decreasing trend way round). x, superpose, xlab, ylab, plotType Arguments plot method optContr objects. plotType determines, whether contrasts underlying (standardized) mean matrix plotted. ... Additional arguments plot method optContrObj function plotContr optContrObj contain object class optContr.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/optContr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate optimal contrasts — optContr","text":"Object class optContr. list containing entries contMat muMat (.e. contrast, mean correlation matrix).","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/optContr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate optimal contrasts — optContr","text":"Note directionality (.e. whether \"increase\" response variable beneficial \"decrease\", inferred specified models object, see Mods details). Constrained contrasts (type = \"constrained\") add additional constraint optimization sign contrast coefficient control active treatments need different. quadratic programming algorithm quadprog package used calculate contrasts.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/optContr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate optimal contrasts — optContr","text":"Bretz, F., Pinheiro, J. C., Branson, M. (2005), Combining multiple comparisons modeling techniques dose-response studies, Biometrics, 61, 738–748 Pinheiro, J. C., Bornkamp, B., Glimm, E. Bretz, F. (2014) Model-based dose finding model uncertainty using general parametric models, Statistics Medicine, 33, 1646–1661","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/reference/optContr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate optimal contrasts — optContr","text":"Bjoern Bornkamp","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/optContr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate optimal contrasts — optContr","text":"","code":"doses <- c(0,10,25,50,100,150) models <- Mods(linear = NULL, emax = 25,                logistic = c(50, 10.88111), exponential= 85,                betaMod=rbind(c(0.33,2.31), c(1.39,1.39)),                doses = doses, addArgs = list(scal = 200)) contMat <- optContr(models, w = rep(50,6)) plot(contMat)  plotContr(contMat) # display contrasts using ggplot2   ## now we would like the \"contrasts\" for placebo adjusted estimates dosPlac <- doses[-1] ## matrix proportional to cov-matrix of plac. adj. estimates for balanced data S <- diag(5)+matrix(1, 5,5) ## note that we explicitly hand over the doses here contMat0 <- optContr(models, doses=dosPlac, S = S, placAdj = TRUE) ## -> contMat0 is no longer a contrast matrix (columns do not sum to 0) colSums(contMat0$contMat) #>      linear        emax    logistic exponential    betaMod1    betaMod2  #>   0.4735130   0.9961621   0.4448535   0.3515726   0.6868100   0.6305744  ## calculate contrast matrix for unadjusted estimates from this matrix ## (should be same as above) aux <- rbind(-colSums(contMat0$contMat), contMat0$contMat) t(t(aux)/sqrt(colSums(aux^2))) ## compare to contMat$contMat #>          linear        emax    logistic exponential   betaMod1   betaMod2 #>     -0.42795997 -0.70574595 -0.40645053  -0.3316718 -0.5661425 -0.5333855 #> 10  -0.35131042 -0.31666702 -0.39242821  -0.3019187  0.3515776 -0.4179871 #> 25  -0.23633610 -0.02485782 -0.32885490  -0.2501813  0.4607560 -0.1655178 #> 50  -0.04471224  0.20210489  0.06107771  -0.1408259  0.3379656  0.2447717 #> 100  0.33853550  0.38367506  0.52860594   0.2028509 -0.1207023  0.6273470 #> 150  0.72178323  0.46149085  0.53804999   0.8217468 -0.4634544  0.2447717  ## now calculate constrained contrasts  if(requireNamespace(\"quadprog\", quietly = TRUE)){ optContr(models, w = rep(50,6), type = \"constrained\") optContr(models, doses=dosPlac, S = S, placAdj = TRUE,          type = \"constrained\") } #> Optimal contrasts #>     linear  emax logistic exponential betaMod1 betaMod2 #> 10   0.000 0.000    0.000           0    0.487    0.000 #> 25   0.000 0.000    0.000           0    0.746    0.000 #> 50   0.000 0.236    0.000           0    0.455    0.197 #> 100  0.243 0.604    0.696           0    0.000    0.960 #> 150  0.970 0.761    0.718           1    0.000    0.197"},{"path":"https://openpharma.github.io/DoseFinding/reference/optDesign.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate optimal designs — optDesign","title":"Function to calculate optimal designs — optDesign","text":"Given set models (full parameter values model probabilities) optDesign function calculates optimal design estimating dose-response model parameters (D-optimal) design estimating target dose (TD-optimal design) (see Dette, Bretz, Pepelyshev Pinheiro (2008)), mixture two criteria. design can plotted (together candidate models) using plot.design. calcCrit calculates design criterion discrete set design(s). rndDesign provides efficient rounding calculated continous design finite sample size.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/optDesign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate optimal designs — optDesign","text":"","code":"optDesign(   models,   probs,   doses,   designCrit = c(\"Dopt\", \"TD\", \"Dopt&TD\", \"userCrit\"),   Delta,   standDopt = TRUE,   weights,   nold = rep(0, length(doses)),   n,   control = list(),   optimizer = c(\"solnp\", \"Nelder-Mead\", \"nlminb\", \"exact\"),   lowbnd = rep(0, length(doses)),   uppbnd = rep(1, length(doses)),   userCrit,   ... )  calcCrit(   design,   models,   probs,   doses,   designCrit = c(\"Dopt\", \"TD\", \"Dopt&TD\"),   Delta,   standDopt = TRUE,   weights,   nold = rep(0, length(doses)),   n )  rndDesign(design, n, eps = 1e-04)  # S3 method for class 'DRdesign' plot(x, models, lwdDes = 10, colDes = rgb(0, 0, 0, 0.3), ...)"},{"path":"https://openpharma.github.io/DoseFinding/reference/optDesign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate optimal designs — optDesign","text":"models object class c(Mods, fullMod), see Mods function details. TD optimal design calculated, TD needs exist models. D-optimal design calculated, need least many doses parameters specified models. probs Vector model probabilities models specified models, assumed order specified models doses Optional argument. argument missing doses attribute c(Mods, fullMod) object specified models used. designCrit Determines type design calculate. \"TD&Dopt\" uses optimality criteria equal weight. Delta Target effect needed calculating \"TD\" \"TD&Dopt\" type designs. standDopt Logical determining, whether D-optimality criterion (specifically log-determinant) standardized number parameters model (interest type = \"Dopt\" type = \"TD&Dopt\"). interest, one model class candidate model set (traditionally standardization done optimal design literature). weights Vector weights associated response doses. Needs length doses.  can used calculate designs heteroscedastic generalized linear model situations. nold, n calculating optimal design interim analysis, nold specifies vector sample   sizes already allocated different doses, n gives sample size next cohort. optimizer = \"exact\" one always needs specify total sample size via n. control List containing control parameters passed numerical optimization algorithms   (optim, nlminb solnp function). type = \"exact\" list possible entries maxvls1 maxvls2,   determining maximum number designs allowed passing criterion function (default   maxvls2=1e5) creating initial unrestricted matrix designs (default maxvls1=1e6).   addition can entry groupSize case patients allocated minimum group size   required. optimizer Algorithm used calculating optimal design. Options \"Nelder-Mead\" \"nlminb\" use   optim nlminb function use trigonometric transformation turn   constrained optimization problem unconstrained one (see Atkinson, Donev Tobias, 2007, pages 130,131). Option \"solnp\" uses solnp function Rsolnp package, implements optimizer non-linear   optimization general constraints. Option \"exact\" tries given combinations n patients given dose groups (subject bounds   specified via lowbnd uppbnd) reports best design. patients allowed   allocated groups certain groupSize, can adjusted via control argument.   n/groupSize length(doses) rather small approach feasible. number doses small (<8) usually \"Nelder-Mead\" \"nlminb\" best suited   (\"nlminb\" usually bit faster less stable \"Nelder-Mead\"). larger number doses   \"solnp\" reliable option (also slowest) (\"Nelder-Mead\" \"nlminb\" often   fail). sample size small \"exact\" provides optimal solution rather quickly. lowbnd, uppbnd Vectors length dose vector specifying upper lower limits allocation weights. option available using \"solnp\" \"exact\" optimizers. userCrit User defined design criterion, function given vector allocation weights   doses returns criterion function. specified models need handed . first argument userCrit vector design weights, second argument   doses argument (see example ). Additional arguments userCrit can passed via ... ... function optDesign additional arguments passed userCrit. function plot.design additional parameters passed plot.Mods. design Argument rndDesign calcCrit functions: Numeric vector (matrix) allocation weights different doses. rows matrices need sum 1. Alternatively also object class \"DRdesign\" can used rndDesign. Note least many design points available parameters dose-response models selected models (otherwise code returns NA). eps Argument rndDesign function: Value elements w regarded 0. x Object class DRdesign (plot.design) lwdDes, colDes Line width color lines plotted design (plot.design)","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/optDesign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to calculate optimal designs — optDesign","text":"Let \\(M_m\\) denote Fisher information matrix model m (proportionality). \\(M_m\\) given \\(\\sum a_i w_i \\)\\( g_i^Tg_i\\), \\(a_i\\) allocation weight dose , \\(w_i\\) weight dose specified via weights \\(g_i\\) gradient vector model m evaluated dose . designCrit = \"Dopt\" code minimizes design criterion $$-\\sum_{m}p_m/k_m \\log(\\det(M_m))$$ \\(p_m\\) probability model m \\(k_m\\) number parameters model m. standDopt = FALSE \\(k_m\\) assumed equal one. designCrit = \"TD\" code minimizes design criterion $$\\sum_{m}p_m \\log(v_m)$$ \\(p_m\\) probability model m \\(v_m\\) proportional asymptotic variance TD estimate given \\(b_m'M_m^{-}b_m\\) (see Dette et al. (2008), p. 1227 details). designCrit = \"Dopt&TD\" code minimizes design criterion $$\\sum_{m}p_m(-0.5\\log(\\det(M_m))/k_m+0.5\\log(v_m))$$ , standDopt = FALSE \\(k_m\\) assumed equal one. details rndDesign function, see Pukelsheim (1993), Chapter 12.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/optDesign.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Function to calculate optimal designs — optDesign","text":"cases (particularly number doses large, e.g. 7 larger) might necessary allow   larger number iterations algorithm (via argument control), particularly Nelder-Mead   algorithm. Alternatively one can use solnp optimizer usually reliable, fastest option.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/optDesign.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Function to calculate optimal designs — optDesign","text":"Atkinson, .C., Donev, .N. Tobias, R.D. (2007). Optimum Experimental Designs, SAS, Oxford   University Press Dette, H., Bretz, F., Pepelyshev, . Pinheiro, J. C. (2008). Optimal Designs Dose Finding Studies, Journal American Statisical Association, 103, 1225–1237 Pinheiro, J.C., Bornkamp, B. (2017) Designing Phase II Dose-Finding Studies: Sample Size, Doses Dose Allocation   Weights, O'Quigley, J., Iasonos, . Bornkamp, B. (eds) Handbook methods designing, monitoring,   analyzing dose-finding trials, CRC press Pukelsheim, F. (1993). Optimal Design Experiments, Wiley","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/reference/optDesign.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to calculate optimal designs — optDesign","text":"Bjoern Bornkamp","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/optDesign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to calculate optimal designs — optDesign","text":"","code":"## calculate designs for Emax model doses <- c(0, 10, 100) emodel <- Mods(emax = 15, doses=doses, placEff = 0, maxEff = 1) optDesign(emodel, probs = 1) #> Calculated D - optimal design: #>       0      10     100  #> 0.33333 0.33333 0.33333  ## TD-optimal design optDesign(emodel, probs = 1, designCrit = \"TD\", Delta=0.5) #> Calculated TD - optimal design: #>       0      10     100  #> 0.50000 0.48225 0.01775  ## 50-50 mixture of Dopt and TD optDesign(emodel, probs = 1, designCrit = \"Dopt&TD\", Delta=0.5) #> Calculated TD and D mixture - optimal design: #>       0      10     100  #> 0.42190 0.41062 0.16748  ## use dose levels different from the ones specified in emodel object des <- optDesign(emodel, probs = 1, doses = c(0, 5, 20, 100)) ## plot models overlaid by design plot(des, emodel)  ## round des to a sample size of exactly 90 patients rndDesign(des, n=90) ## using the round function would lead to 91 patients #> [1] 29  6 26 29  ## illustrating different optimizers (see Note above for more comparison) optDesign(emodel, probs=1, optimizer=\"Nelder-Mead\") #> Calculated D - optimal design: #>       0      10     100  #> 0.33333 0.33333 0.33333  optDesign(emodel, probs=1, optimizer=\"nlminb\") #> Calculated D - optimal design: #>       0      10     100  #> 0.33333 0.33333 0.33333  ## optimizer solnp (the default) can deal with lower and upper bounds: optDesign(emodel, probs=1, designCrit = \"TD\", Delta=0.5,           optimizer=\"solnp\", lowbnd = rep(0.2,3)) #> Calculated TD - optimal design: #>       0      10     100  #> 0.40723 0.39277 0.20000  ## exact design using enumeration of all possibilites optDesign(emodel, probs=1, optimizer=\"exact\", n = 30) #> Calculated D - optimal design: #>       0      10     100  #> 0.33333 0.33333 0.33333  ## also allows to fix minimum groupSize optDesign(emodel, probs=1, designCrit = \"TD\", Delta=0.5,           optimizer=\"exact\", n = 30,  control = list(groupSize=5)) #> Calculated TD - optimal design: #>       0      10     100  #> 0.50000 0.33333 0.16667    ## optimal design at interim analysis ## assume there are already 10 patients on each dose and there are 30 ## left to randomize, this calculates the optimal increment design optDesign(emodel, 1, designCrit = \"TD\", Delta=0.5,           nold = c(10, 10, 10), n=30) #> Calculated TD - optimal design: #>       0      10  #> 0.51506 0.48494   ## use a larger candidate model set doses <- c(0, 10, 25, 50, 100, 150) fmods <- Mods(linear = NULL, emax = 25, exponential = 85,              linlog = NULL, logistic = c(50, 10.8811),              doses = doses, addArgs=list(off=1),              placEff=0, maxEff=0.4) probs <- rep(1/5, 5) # assume uniform prior desDopt <- optDesign(fmods, probs, optimizer = \"nlminb\") desTD <- optDesign(fmods, probs, designCrit = \"TD\", Delta = 0.2,                    optimizer = \"nlminb\") desMix <- optDesign(fmods, probs, designCrit = \"Dopt&TD\", Delta = 0.2) ## plot design and truth plot(desMix, fmods)   ## illustrate calcCrit function ## calculate optimal design for beta model doses <- c(0, 0.49, 25.2, 108.07, 150) models <- Mods(betaMod = c(0.33, 2.31), doses=doses,                 addArgs=list(scal=200),                 placEff=0, maxEff=0.4) probs <- 1 deswgts <- optDesign(models, probs, designCrit = \"Dopt\",                      control=list(maxit=1000)) ## now compare this design to equal allocations on ## 0, 10, 25, 50, 100, 150 doses2 <- c(0, 10, 25, 50, 100, 150) design2 <- c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6) crit2 <- calcCrit(design2, models, probs, doses2, designCrit = \"Dopt\") ## ratio of determinants (returned criterion value is on log scale) exp(deswgts$crit-crit2) #> [1] 0.677752  ## example for calculating an optimal design for logistic regression doses <- c(0, 0.35, 0.5, 0.65, 1) fMod <- Mods(linear = NULL, doses=doses, placEff=-5, maxEff = 10) ## now calculate weights to use in the covariance matrix mu <- as.numeric(getResp(fMod, doses=doses)) mu <- 1/(1+exp(-mu)) weights <- mu*(1-mu) des <- optDesign(fMod, 1, doses, weights = weights)  ## one can also specify a user defined criterion function ## here D-optimality for cubic polynomial CubeCrit <- function(w, doses){   X <- cbind(1, doses, doses^2, doses^3)   CVinv <- crossprod(X*w)   -log(det(CVinv)) } optDesign(doses = c(0,0.05,0.2,0.6,1),           designCrit = \"userCrit\", userCrit = CubeCrit,           optimizer = \"nlminb\") #> Calculated userCrit - optimal design: #>    0  0.2  0.6    1  #> 0.25 0.25 0.25 0.25"},{"path":"https://openpharma.github.io/DoseFinding/reference/planMod.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate performance metrics for fitting dose-response models — planMod","title":"Evaluate performance metrics for fitting dose-response models — planMod","text":"function evaluates, performance metrics fitting dose-response models (using asymptotic approximations simulations). Note metrics available via print method others via summary method applied planMod objects. implemented metrics Root mean-squared error estimate placebo-adjusted dose-response averaged used dose-levels, .e. rather discrete set (dRMSE). Available via print method planMod objects. Root mean-squared error estimate placebo-adjusted dose-response (cRMSE) averaged fine (almost continuous) grid 101 equally spaced values placebo maximum dose. NOTE: Available via summary method applied planMod objects. Ratio placebo-adjusted mean-squared error (observed doses) model-based vs ANOVA approach (Eff-vs-ANOVA). can interpreted sample size scale. NOTE: Available via summary method applied planMod objects. Power (unadjusted) one-sided 1-alpha confidence interval comparing dose maximum effect vs placebo larger tau. default alpha = 0.025 tau = 0 (Pow(maxDose)). Available via print method planMod objects. Probability EDp estimate within true [EDpLB, EDpUB] (default p=0.5, pLB=0.25 pUB=0.75). metric gives idea ability characterize increasing part dose-response curve (P(EDp)). Available via print method planMod objects. Length quantile range target dose (TD EDp). calculated taking difference dUB dLB quantile empirical distribution dose estimates. (lengthTDCI lengthEDpCI). calculated calculating confidence interval lengths simulated data-set taking mean. NOTE: Available via summary method planMod objects.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/planMod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate performance metrics for fitting dose-response models — planMod","text":"","code":"planMod(   model,   altModels,   n,   sigma,   S,   doses,   asyApprox = TRUE,   simulation = FALSE,   alpha = 0.025,   tau = 0,   p = 0.5,   pLB = 0.25,   pUB = 0.75,   nSim = 100,   cores = 1,   showSimProgress = TRUE,   bnds,   addArgs = NULL )  # S3 method for class 'planMod' summary(   object,   digits = 3,   len = 101,   Delta = NULL,   p = NULL,   dLB = 0.05,   dUB = 0.95,   ... )  # S3 method for class 'planMod' plot(   x,   type = c(\"dose-response\", \"ED\", \"TD\"),   p,   Delta,   placAdj = FALSE,   xlab = \"Dose\",   ylab = \"\",   ... )"},{"path":"https://openpharma.github.io/DoseFinding/reference/planMod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate performance metrics for fitting dose-response models — planMod","text":"model Character vector determining dose-response model(s) used fitting data.  one dose-response model provided best fitting model chosen using AIC. Built-models \"linlog\", \"linear\", \"quadratic\", \"emax\", \"exponential\", \"sigEmax\", \"betaMod\" \"logistic\" (see drmodels). altModels object class Mods, defining true mean vectors operating characteristics calculated. n, sigma, S Either vector n sigma S need specified.  n   sigma specified assumed computations made normal homoscedastic ANOVA model group   sample sizes given n residual standard deviation sigma, .e. covariance matrix used   estimates thus sigma^2*diag(1/n) degrees freedom calculated   sum(n)-nrow(contMat). single number specified n assumed sample size   per group balanced allocations used. S specified used covariance matrix estimates. doses Doses use asyApprox, simulation Logicals determining, whether asymptotic approximations simulations calculated. multiple models specified model asymptotic approximations available. alpha, tau Significance level one-sided confidence interval model-based contrast best dose vs placebo. Tau threshold compare confidence interval limit . CI(MaxDCont) gives percentage bound confidence interval larger tau. p, pLB, pUB p determines type EDp estimate. pLB pUB define bounds EDp estimate. performance metric Pr(Id-ED) gives percentage estimated EDp within true EDpLB EDpUB. nSim Number simulations cores Number cores use simulations. default 1 cores used, note cores > 1 effect Windows, mclapply function used internally. showSimProgress case simulations show progress using progress-bar. bnds Bounds non-linear parameters. needs list list entries corresponding selected bounds. names list entries need correspond model names. defBnds function provides default selection. addArgs See corresponding argument function fitMod. argument directly passed fitMod. object, digits object: planMod object. digits: Digits summary output len Number equally spaced points determine mean-squared error grid (cRMSE). Delta Additional arguments determining dose estimate plot, type = \"ED\" type = \"TD\" dLB, dUB quantiles use calculation lengthTDCI lengthEDpCI. default dLB = 0.05 dUB = 0.95, corresponds 90% interval. ... Additional arguments (currently ignored) x object class planMod type Type plot produce placAdj type = \"dose-response\", determines whether dose-response estimates shown placebo-adjusted original scale xlab, ylab Labels plot (ylab applies type = \"dose-response\")","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/planMod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate performance metrics for fitting dose-response models — planMod","text":"plot method exists summarize dose-response dose estimations graphically.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/planMod.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Evaluate performance metrics for fitting dose-response models — planMod","text":"TBD","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/reference/planMod.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Evaluate performance metrics for fitting dose-response models — planMod","text":"Bjoern Bornkamp","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/planMod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate performance metrics for fitting dose-response models — planMod","text":"","code":"if (FALSE) { # \\dontrun{ doses <- c(0,10,25,50,100,150) fmodels <- Mods(linear = NULL, emax = 25,                 logistic = c(50, 10.88111), exponential= 85,                 betaMod=rbind(c(0.33,2.31),c(1.39,1.39)),                 doses = doses, addArgs=list(scal = 200),                 placEff = 0, maxEff = 0.4) sigma <- 1 n <- rep(62, 6)*2  model <- \"quadratic\" pObj <- planMod(model, fmodels, n, sigma, doses=doses,                simulation = TRUE,                alpha = 0.025, nSim = 200,                p = 0.5, pLB = 0.25, pUB = 0.75) print(pObj) ## to get additional metrics (e.g. Eff-vs-ANOVA, cRMSE, lengthTDCI, ...) summary(pObj, p = 0.5, Delta = 0.3) plot(pObj) plot(pObj, type = \"TD\", Delta=0.3) plot(pObj, type = \"ED\", p = 0.5) } # }"},{"path":"https://openpharma.github.io/DoseFinding/reference/powMCT.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate power for multiple contrast test — powMCT","title":"Calculate power for multiple contrast test — powMCT","text":"Calculate power multiple contrast test set specified alternatives.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/powMCT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate power for multiple contrast test — powMCT","text":"","code":"powMCT(   contMat,   alpha = 0.025,   altModels,   n,   sigma,   S,   placAdj = FALSE,   alternative = c(\"one.sided\", \"two.sided\"),   df,   critV = TRUE,   control = mvtnorm.control() )"},{"path":"https://openpharma.github.io/DoseFinding/reference/powMCT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate power for multiple contrast test — powMCT","text":"contMat Contrast matrix use. individual contrasts saved columns matrix alpha Significance level use altModels object class Mods, defining mean vectors power calculated n, sigma, S Either vector n sigma S need specified.  n sigma specified assumed computations made normal homoscedastic ANOVA model group sample sizes given n residual standard deviation sigma, .e. covariance matrix used estimates thus sigma^2*diag(1/n) degrees freedom calculated sum(n)-nrow(contMat). single number specified n assumed sample size per group balanced allocations used. S specified used covariance matrix estimates. placAdj Logical, true, assumed standard deviation variance matrix placebo-adjusted estimates specified sigma S, respectively. contrast matrix produced placebo-adjusted scale, see optContr, coefficients longer contrasts (.e. sum 0). alternative Character determining alternative multiple contrast trend test. df Degrees freedom assume case S (general covariance matrix) specified. n sigma specified ones corresponding ANOVA model calculated. critV Critical value, equal TRUE critical value calculated. Otherwise one can directly specify critical value . control list specifying additional control parameters qmvt pmvt calls code, see also mvtnorm.control details.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/powMCT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate power for multiple contrast test — powMCT","text":"Numeric containing calculated power values","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/powMCT.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate power for multiple contrast test — powMCT","text":"Pinheiro, J. C., Bornkamp, B., Bretz, F. (2006). Design analysis dose finding studies combining multiple comparisons modeling procedures, Journal Biopharmaceutical Statistics, 16, 639–656","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/reference/powMCT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate power for multiple contrast test — powMCT","text":"Bjoern Bornkamp","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/powMCT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate power for multiple contrast test — powMCT","text":"","code":"## look at power under some dose-response alternatives ## first the candidate models used for the contrasts doses <- c(0,10,25,50,100,150) ## define models to use as alternative  fmodels <- Mods(linear = NULL, emax = 25,                 logistic = c(50, 10.88111), exponential= 85,                 betaMod=rbind(c(0.33,2.31),c(1.39,1.39)),                 doses = doses, addArgs=list(scal = 200),                 placEff = 0, maxEff = 0.4) ## plot alternatives plot(fmodels)  ## power for to detect a trend contMat <- optContr(fmodels, w = 1) powMCT(contMat, altModels = fmodels, n = 50, alpha = 0.05, sigma = 1) #>      linear        emax    logistic exponential    betaMod1    betaMod2  #>   0.7015660   0.6849209   0.8519343   0.6711498   0.7338515   0.6775027   if (FALSE) { # \\dontrun{ ## power under the Dunnett test ## contrast matrix for Dunnett test with informative names contMatD <- rbind(-1, diag(5)) rownames(contMatD) <- doses colnames(contMatD) <- paste(\"D\", doses[-1], sep=\"\") powMCT(contMatD, altModels = fmodels, n = 50, alpha = 0.05, sigma = 1)  ## now investigate power of the contrasts in contMat under \"general\" alternatives altFmods <- Mods(linInt = rbind(c(0, 1, 1, 1, 1),                                   c(0.5, 1, 1, 1, 0.5)),                  doses=doses, placEff=0, maxEff=0.5) plot(altFmods) powMCT(contMat, altModels = altFmods, n = 50, alpha = 0.05, sigma = 1)  ## now the first example but assume information only on the ## placebo-adjusted scale ## for balanced allocations and 50 patients with sigma = 1 one obtains ## the following covariance matrix S <- 1^2/50*diag(6) ## now calculate variance of placebo adjusted estimates CC <- cbind(-1,diag(5)) V <- (CC)%*%S%*%t(CC) linMat <- optContr(fmodels, doses = c(10,25,50,100,150),                    S = V, placAdj = TRUE) powMCT(linMat, altModels = fmodels, placAdj=TRUE,        alpha = 0.05, S = V, df=6*50-6) # match df with the df above } # }"},{"path":"https://openpharma.github.io/DoseFinding/reference/sampSize.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample size calculations — sampSize","title":"Sample size calculations — sampSize","text":"sampSize function implements bisection search algorithm sample size calculation. user can hand general target function (via targFunc) iterated certain target achieved. sampSizeMCT convenience wrapper sampSize multiple contrast tests using power target function.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/sampSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample size calculations — sampSize","text":"","code":"sampSize(   upperN,   lowerN = floor(upperN/2),   targFunc,   target,   tol = 0.001,   alRatio,   Ntype = c(\"arm\", \"total\"),   verbose = FALSE )  sampSizeMCT(   upperN,   lowerN = floor(upperN/2),   ...,   power,   sumFct = mean,   tol = 0.001,   alRatio,   Ntype = c(\"arm\", \"total\"),   verbose = FALSE )  targN(   upperN,   lowerN,   step,   targFunc,   alRatio,   Ntype = c(\"arm\", \"total\"),   sumFct = c(\"min\", \"mean\", \"max\") )  powN(   upperN,   lowerN,   step,   ...,   alRatio,   Ntype = c(\"arm\", \"total\"),   sumFct = c(\"min\", \"mean\", \"max\") )  # S3 method for class 'targN' plot(x, superpose = TRUE, line.at = NULL, xlab = NULL, ylab = NULL, ...)"},{"path":"https://openpharma.github.io/DoseFinding/reference/sampSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample size calculations — sampSize","text":"upperN, lowerN Upper lower bound target sample size. lowerN defaults floor(upperN/2). targFunc, target target function needs take input vector sample sizes different dose groups. sampSize needs return univariate number. function targN return numerical vector. Example: targFunc function calculates power test, target desired target power value.   function sampSize bisection search iterates sample size specific target value achieved (implicit assumption targFunc monotonically increasing sample size). Function targN simply calculates targFunc given set sample sizes. tol positive numeric value specifying tolerance level bisection search algorithm. Bisection stopped targFunc value within tol target. alRatio Vector describing relative patient allocations dose groups proportionality, e.g. rep(1, length(doses)) corresponds balanced allocations. Ntype One \"arm\" \"total\". Determines, whether sample size smallest arm total sample size iterated bisection search algorithm. verbose Logical value indicating trace iteration progress bisection search algorithm displayed. ... Arguments directly passed powMCT function sampSizeMCT powN function. power, sumFct power numeric defining desired summary power achieve (sampSizeMCT). step needed functions targN powN. Stepsize sample size target function calculated. steps calculated via seq(lowerN,upperN,=step). x, superpose, line., xlab, ylab arguments plot method targN powN, additional arguments passed low-level lattice plotting routines.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/sampSize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample size calculations — sampSize","text":"targN functions calculates general target function different given sample sizes. powN function convenience wrapper targN multiple contrast tests using power target function.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/sampSize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample size calculations — sampSize","text":"Pinheiro, J. C., Bornkamp, B., Bretz, F. (2006). Design analysis dose finding studies   combining multiple comparisons modeling procedures, Journal Biopharmaceutical Statistics, 16,   639–656 Pinheiro, J.C., Bornkamp, B. (2017) Designing Phase II Dose-Finding Studies: Sample Size, Doses Dose Allocation   Weights, O'Quigley, J., Iasonos, . Bornkamp, B. (eds) Handbook methods designing, monitoring,   analyzing dose-finding trials, CRC press","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/reference/sampSize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample size calculations — sampSize","text":"Jose Pinheiro, Bjoern Bornkamp","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/sampSize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample size calculations — sampSize","text":"","code":"## sampSize examples  ## first define the target function ## first calculate the power to detect all of the models in the candidate set fmodels <- Mods(linear = NULL, emax = c(25),                 logistic = c(50, 10.88111), exponential=c(85),                 betaMod=matrix(c(0.33,2.31,1.39,1.39), byrow=TRUE, nrow=2),                 doses = c(0,10,25,50,100,150), placEff=0, maxEff=0.4,                 addArgs = list(scal=200)) ## contrast matrix to use contMat <- optContr(fmodels, w=1) ## this function calculates the power under each model and then returns ## the average power under all models tFunc <- function(n){   powVals <- powMCT(contMat, altModels=fmodels, n=n, sigma = 1,                     alpha=0.05)   mean(powVals) }  ## assume we want to achieve 80% average power over the selected shapes ## and want to use a balanced allocations if (FALSE) { # \\dontrun{ sSize <- sampSize(upperN = 80, targFunc = tFunc, target=0.8,                   alRatio = rep(1,6), verbose = TRUE) sSize   ## Now the same using the convenience sampSizeMCT function sampSizeMCT(upperN=80, contMat = contMat, sigma = 1, altModels=fmodels,             power = 0.8, alRatio = rep(1, 6), alpha = 0.05) ## Alternatively one can also specify an S matrix ## covariance matrix in one observation (6 total observation result in a ## variance of 1 in each group) S <- 6*diag(6) ## this uses df = Inf, hence a slightly smaller sample size results sampSizeMCT(upperN=500, contMat = contMat, S=S, altModels=fmodels,             power = 0.8, alRatio = rep(1, 6), alpha = 0.05, Ntype = \"total\")   ## targN examples ## first calculate the power to detect all of the models in the candidate set fmodels <- Mods(linear = NULL, emax = c(25),                 logistic = c(50, 10.88111), exponential=c(85),                 betaMod=matrix(c(0.33,2.31,1.39,1.39), byrow=TRUE, nrow=2),                 doses = c(0,10,25,50,100,150), placEff=0, maxEff=0.4,                 addArgs = list(scal=200)) ## corresponding contrast matrix contMat <- optContr(fmodels, w=1) ## define target function tFunc <- function(n){   powMCT(contMat, altModels=fmodels, n=n, sigma = 1, alpha=0.05) } powVsN <- targN(upperN = 100, lowerN = 10, step = 10, tFunc,                 alRatio = rep(1, 6)) plot(powVsN)  ## the same can be achieved using the convenience powN function ## without the need to specify a target function powN(upperN = 100, lowerN=10, step = 10, contMat = contMat,      sigma = 1, altModels = fmodels, alpha = 0.05, alRatio = rep(1, 6)) } # }"},{"path":"https://openpharma.github.io/DoseFinding/reference/targdose.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate dose estimates for a fitted dose-response model (via fitMod, bFitMod) or maFitMod) or a Mods object — Target doses","title":"Calculate dose estimates for a fitted dose-response model (via fitMod, bFitMod) or maFitMod) or a Mods object — Target doses","text":"TD (target dose) defined dose achieves target effect Delta placebo (multiple doses, smallest chosen): $$TD_\\Delta = \\min \\{x|f(x) > f(0)+\\Delta\\}$$ decreasing trend beneficial definition TD $$TD_\\Delta = \\min \\{x|f(x) < f(0)-\\Delta\\}$$ \\(\\Delta\\) clinical relevance threshold, TD similar usual definition minimum effective dose (MED). ED (effective dose) defined dose achieves certain percentage p full effect size (within observed dose-range!) placebo (multiple doses, smallest chosen). $$ED_p=\\min\\{x|f(x) > f(0) + p(f(dmax)-f(0))$$ Note definition EDp different traditional definition based Emax model, EDp defined relative asymptotic maximum effect (rather maximum effect observed dose-range). ED TD calculation bootstrap model averaging (maFit) objects based first calculating pointwise median dose-response curve estimate. calculating dose estimate based curve.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/targdose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate dose estimates for a fitted dose-response model (via fitMod, bFitMod) or maFitMod) or a Mods object — Target doses","text":"","code":"TD(   object,   Delta,   TDtype = c(\"continuous\", \"discrete\"),   direction = c(\"increasing\", \"decreasing\"),   doses = NULL )  ED(   object,   p,   EDtype = c(\"continuous\", \"discrete\"),   direction = c(\"increasing\", \"decreasing\"),   doses = NULL )"},{"path":"https://openpharma.github.io/DoseFinding/reference/targdose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate dose estimates for a fitted dose-response model (via fitMod, bFitMod) or maFitMod) or a Mods object — Target doses","text":"object object class c(Mods, fullMod), DRMod, bFitMod maFit Delta, p Delta: target effect size use target dose (TD) (Delta > 0). p: percentage dose use effective dose. TDtype, EDtype character determines, whether dose treated continuous variable calculating TD/ED whether TD/ED calculated based grid doses specified doses direction Direction used defining TD. depends whether increasing decreasing response variable beneficial. case ED calculation needed maFit objects. doses Dose levels used TDtype EDtype equal \"discrete\". Needs include placebo, may exceed dose range model(s) provided object.","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/targdose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate dose estimates for a fitted dose-response model (via fitMod, bFitMod) or maFitMod) or a Mods object — Target doses","text":"Returns dose estimate","code":""},{"path":[]},{"path":"https://openpharma.github.io/DoseFinding/reference/targdose.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate dose estimates for a fitted dose-response model (via fitMod, bFitMod) or maFitMod) or a Mods object — Target doses","text":"Bjoern Bornkamp","code":""},{"path":"https://openpharma.github.io/DoseFinding/reference/targdose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate dose estimates for a fitted dose-response model (via fitMod, bFitMod) or maFitMod) or a Mods object — Target doses","text":"","code":"## example for creating a \"full-model\" candidate set placebo response ## and maxEff already fixed in Mods call doses <- c(0, 10, 25, 50, 100, 150) fmodels <- Mods(linear = NULL, emax = 25,                 logistic = c(50, 10.88111), exponential = 85,                 betaMod = rbind(c(0.33, 2.31), c(1.39, 1.39)),                 linInt = rbind(c(0, 1, 1, 1, 1),                                c(0, 0, 1, 1, 0.8)),                 doses=doses, placEff = 0, maxEff = 0.4,                 addArgs=list(scal=200)) ## calculate doses giving an improvement of 0.3 over placebo TD(fmodels, Delta=0.3) #>      linear        emax    logistic exponential    betaMod1    betaMod2  #>  112.500000   45.000000   62.095220  130.265330    4.880978   56.762044  #>     linInt1     linInt2  #>   21.250000   43.750000  ## discrete version TD(fmodels, Delta=0.3, TDtype = \"discrete\", doses=doses) #>      linear        emax    logistic exponential    betaMod1    betaMod2  #>         150          50         100         150          10         100  #>     linInt1     linInt2  #>          25          50  ## doses giving 50% of the maximum effect ED(fmodels, p=0.5) #>      linear        emax    logistic exponential    betaMod1    betaMod2  #>   75.000000   18.750000   50.215409  104.517639    1.255838   37.337384  #>     linInt1     linInt2  #>   17.500000   37.500000  ED(fmodels, p=0.5, EDtype = \"discrete\", doses=doses) #>      linear        emax    logistic exponential    betaMod1    betaMod2  #>         100          25         100         150          10          50  #>     linInt1     linInt2  #>          25          50  plot(fmodels, plotTD = TRUE, Delta = 0.3)"},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-13-1","dir":"Changelog","previous_headings":"","what":"DoseFinding 1.3-1","title":"DoseFinding 1.3-1","text":"CRAN release: 2025-03-11 Added maFitMod function implement fitting dose-response models via model averaging (#11, thanks Björn Bornkamp) Fixed way ED dose estimation works type = “discrete”. Previously maximum effect size ED calculation taken highest effect among doses provided arguments, rather across observed dose range fitted model (#18) replaced uses ggplot2::aes_string, deprecated (#14) added additional tests several functions","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-12-1","dir":"Changelog","previous_headings":"","what":"DoseFinding 1.2-1","title":"DoseFinding 1.2-1","text":"CRAN release: 2024-08-23 Documentation revised updated, documentation now uses roxygen, README NEWS (replacing old changelog) added Former “Depends” packages changed “Imports” nlme added suggested package Marius Thomas new maintainer package, Novartis Pharma AG added copyright holder funder Package now hosted https://github.com/openpharma/DoseFinding","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-11-1","dir":"Changelog","previous_headings":"","what":"DoseFinding 1.1-1","title":"DoseFinding 1.1-1","text":"CRAN release: 2023-11-02 Big thanks Marius Thomas adding bMCTtest function, implementing generalized version Bayesian MCP-Mod methodology Fleischer et al (2022) (https://doi.org/10.1002/pst.2193) Thanks Sebastian Bossert feedback bMCTtest Function critVal now exported","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-10-5","dir":"Changelog","previous_headings":"","what":"DoseFinding 1.0-5","title":"DoseFinding 1.0-5","text":"CRAN release: 2023-06-27 Fixed bug non-exported function powMCTBinCount, situation user defined contrast matrix handed . Added function DesignMCPModApp starts externally hosted R-Shiny app DesignMCPMod perform power sample size calculations (main authors app Sophie Sun Danyi Xiong).","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-10-4","dir":"Changelog","previous_headings":"","what":"DoseFinding 1.0-4","title":"DoseFinding 1.0-4","text":"CRAN release: 2023-05-18 Added non-exported function powMCTBinCount, power calculation binary count data.","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-10-3","dir":"Changelog","previous_headings":"","what":"DoseFinding 1.0-3","title":"DoseFinding 1.0-3","text":"CRAN release: 2023-01-06 Stop throw error calculated df=0 powMCT (passed mvtnorm df=0 implies use normal distribution) Added function plotMods plot candidate models using ggplot2 function plotContr plot optimal contrasts using ggplot2 (thanks Sophie Sun testing feedback) Added documentation quadratic model (definition delta) Fixed local options guesst logistic sigEmax models","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-10-2","dir":"Changelog","previous_headings":"","what":"DoseFinding 1.0-2","title":"DoseFinding 1.0-2","text":"CRAN release: 2021-10-03 Define USE_FC_LEN_T add length character arguments Fortran code called C, reflect recent changes gfortran. Fix incorrect error message fitMod (case placAdj = TRUE data handed data frame via data argument)","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-10-1","dir":"Changelog","previous_headings":"","what":"DoseFinding 1.0-1","title":"DoseFinding 1.0-1","text":"CRAN release: 2021-06-25 Big thanks Ludger Sandig, instrumental adding vignettes practical MCP-Mod implementation guidance; introducing tests based testthat bug fixes. Thanks Dong Xi, Hilke Kracker review earlier versions draft vignettes Thanks Julia Duda helpful comments package","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-09-17","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.9-17","title":"DoseFinding 0.9-17","text":"CRAN release: 2019-11-16 Added citation DESCRIPTION file Removed alpha argument pValues function (used) Propagate error messages mvtnorm pValues function (e.g. cov-matrix psd), (thx Daisy Bai) Make direction attribute Mods object unique (thx Yuhan Li)","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-09-16","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.9-16","title":"DoseFinding 0.9-16","text":"CRAN release: 2018-01-04 Fixed minor bug print.summary.planMod","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-09-15","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.9-15","title":"DoseFinding 0.9-15","text":"CRAN release: 2016-07-27 Mods Added parameter names models output list (thanks Dong Xi catching ) DoseFinding 0.9-14 * planMod.Rd Documentation slightly extended. * qmvtDF moved back qmvt function mvtnorm, problems mvtnorm fixed. DoseFinding 0.9-13 * projPrBnds now also covers case parameter exactly bound * bFitMod doseNam changes * critVal Added self-written qmvt function qmvtDF (mvtnorm::qmvt got instable Windows 32bit release 1.0-3), hopefully superfluous mvtnorm fixes . DoseFinding 0.9-12 * glycobrom dataset: Included column number observations per treatment. * calcCrit now takes account “nold” determining whether enough design points specified able calculate design criteria. * bFitMod documentation plot.bFitMod predict.bFitMod methods added. coef.bFitMod method added. Thanks Lieven Nils Kennes pointing towards issue. DoseFinding 0.9-11 * Mods Introduce fullMod argument allow specification full model parameters (). * calcTDgrad now calculates analytical gradient TD optimal designs beta model. previous numerical gradient get unstable particular parameter values. Thanks Tobias Mielke calculations! * planMod.Rd, powMCT.Rd description “sigma” * optDesign, optContr Catch Mods objects multiple direction attributes properly functions.","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-09-10","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.9-10","title":"DoseFinding 0.9-10","text":"CRAN release: 2013-11-25 plot.MCPMod case significant model, plot anything. optContr Bugfix function constOptC, previous algorithm selected situation incorrect active set (hence suboptimal solution), current implementation uses quadratic programming (hence new suggested package quadprog).","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-09-9","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.9-9","title":"DoseFinding 0.9-9","text":"CRAN release: 2013-10-16 bFitMod.Bayes Stop starting values lie outside bounds specified prior distribution predict.bFitMod Remove incorrect “” statement (use “effect-curve” “EffectCurve”) fitModels.bndnls now uses narrowed bounds 1d models (0.9-5 earlier), thanks Tobias Mielke reporting three points . optContr now allows constrained contrasts, .e. contrast coefficients placebo active treatment groups required different signs.","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-09-8","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.9-8","title":"DoseFinding 0.9-8","text":"CRAN release: 2013-09-18 MCPMod Major changes needed (also fitMod MCTtest) allow dose/response names different “dose”, “resp” data-frame specified (problem existed MCTtest, fitMod called inside MCPMod). bFitMod.Bayes Ensure starting values parameters within bounds specified prior (starting values specified). Thanks Tobias Mielke reporting . bFitMod.bootstrap Remove bug model = “linear” placAdj = TRUE. Thanks Tobias Mielke reporting .","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-09-7","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.9-7","title":"DoseFinding 0.9-7","text":"CRAN release: 2013-08-16 fitMod ensure data set returned DRMod objects original order (sorted dose). Also ensure right S matrix used fitting type = “general” unsorted dose, resp. MCTtest fixed problems type = “general” unsorted dose, resp. glycobrom Added glycobrom data set planMod Added planning functions non-linear modelling Coded calculations compositions able remove dependency partitions package man files: added reference paper generalized MCPMod plot.DRMod Minor changes ensure raw means always inside plotting region (plotData = “means”)","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-09-6","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.9-6","title":"DoseFinding 0.9-6","text":"CRAN release: 2013-04-16 optDesign Re-named “fmodels” argument “models”. optDesign solnp lowbnd uppbnd specified now use feasible starting value (otherwise solnp might get problems). plot.DRMod, plot.MCPMod now use lattice graphics powMCT removed bug case placAdj = TRUE (thanks Tobias Mielke reporting ) ess.mcmc minor change avoid occasional NA’s Mods removed class c(“Mods”, “standMod”), now class “Mods”, changes API MCTtest, optContr MCPMod function (direction argument longer needed, info now contained “Mods” object). neurodeg added simulated longitudinal dose-finding data set neurodeg targN catch incorrect matrix dimension, case one alternative model fitModel.bndnls old version used narrowed bnds 1-dim model, starting value supplied manually (instead calculated via optGrid); fixed. MCTtest re-name p-value column “adj-p”.","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-09-5","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.9-5","title":"DoseFinding 0.9-5","text":"CRAN release: 2013-03-07 targN, powN added function targN evaluate target function (e.g. power) different sample sizes (similar old powerMM function). powN convenience function multiple contrast tests using power. sampSizeMCT added convenience function sample size calculation multiple contrast tests using power. optContr Re-named “weights” argument “w”","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-09-4","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.9-4","title":"DoseFinding 0.9-4","text":"CRAN release: 2013-02-13 TD, ED Fixed bug model = linInt placAdj = TRUE powMCT Fixed bug nr(altModels)=1 case placAdj=TRUE Mods Add requirement placebo dose needs included print.bFitMod show n.eff bootstrap samples ess.mcmc return NA, just one unique value chain fitMod, MCTtest catch situations, type = “normal” placAdj = TRUE bFitMod fixed bug column names linear model case placAdj = TRUE MCPMod: Fixed sign error model selection, critV specified","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-09-3","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.9-3","title":"DoseFinding 0.9-3","text":"CRAN release: 2013-01-29 fitMod Improvements efficiency (removed calls .call optLoc) MCPMod passes direction argument now also TD optDesign solnp now default optimizer calcCrit default arg designCrit calcCrit changed (harmonize calcCrit optDesign) bFitMod use fitMod.raw bFitMod.bootstrap (efficiency) critVal Remove contMat argument (unused) powMCT Allow power calculation placebo adjusted data","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-09-1","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.9-1","title":"DoseFinding 0.9-1","text":"CRAN release: 2013-01-10 Complete re-structuring tidying package. Main ideas: () smoother integration g-functions (ii) focus core functionality (iii) general code/easier extensibility. New features: Bayesian dose-response fitting, nicer plots, optimal designs non-normal responses, … Special Thanks Tobias Mielke testing package numerous bug reports. Previous versions source available http://cran.r-project.org/package=DoseFinding “Old sources”, Windows binary last version changes available http://goo.gl/p1UZ7.","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-06-3","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.6-3","title":"DoseFinding 0.6-3","text":"CRAN release: 2012-08-22 Added PACKAGE = “DoseFinding” “.C” calls","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-06-2","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.6-2","title":"DoseFinding 0.6-2","text":"CRAN release: 2012-04-04 calcOptDesign partial rewrite optDes.c optDesign.R fix segfault bug.","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-06-1","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.6-1","title":"DoseFinding 0.6-1","text":"CRAN release: 2012-02-21 vcov.gDRMod now functional, predict.gDRMod now allows calculation confidence intervals gFitDRModel minor changes underlying optimizer explicitly export gradients model functions now","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-05-7","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.5-7","title":"DoseFinding 0.5-7","text":"CRAN release: 2012-01-24 gFitDRModel now always returns estimate (either best value nlminb grid search nlminb fails) gMCPtest: use sigma = corMat instead corr = corMat p/qmvnorm calls (mvtnorm complained 1-dimensional case) gFitDRModel: Introduced default bnds argument. plot.MCPMod: Plot clinRel right place, direction equal “decreasing” (thanks Jan Rekowski) planMM, critVal: vCov specified now right correlation matrix calculated calcOptDesign: Additional argument (standDopt) allow optional standardization (division log determinant number parameters) D-optimal design criterion.","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-05-6","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.5-6","title":"DoseFinding 0.5-6","text":"CRAN release: 2011-10-20 getGrid corrected bug Ngrd > 75025 calcOptDesign: method = “exact” n2 > 0 function return optimal incremental design overall optimal design","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-05-5","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.5-5","title":"DoseFinding 0.5-5","text":"CRAN release: 2011-09-01 gFitDRModel can now fit dose-response models without intercept gMCPtest minor changes allow user defined contrast matrix","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-05-4","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.5-4","title":"DoseFinding 0.5-4","text":"CRAN release: 2011-08-10 MCPtest now uses correct degrees freedom addCovars != ~1 Feedback Andreas Krause led number smaller changes package (e.g., plot.(g)DRMod fitDRModel). Thanks Andreas! Print lattice plots explicitly increase compability Sweave.","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-05-3","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.5-3","title":"DoseFinding 0.5-3","text":"CRAN release: 2011-05-10 Ensure rndDesign N recognized integer using N <- round(N), avoid floating point problems. Remove naming bug gFitDRModel (drFit instead drEst)","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-05-2","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.5-2","title":"DoseFinding 0.5-2","text":"CRAN release: 2011-04-27 Corrected bug b-vector sigEmax model (calcBvec, affected MED-type optimal designs) Included INDEX file order overview help-page better predict.DRMod now stops type = “fullModel” argument newdata contain values variables specified addCovars (thanks Mouna).","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-05-1","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.5-1","title":"DoseFinding 0.5-1","text":"CRAN release: 2011-03-26 Restructured calcOptDesign function allow user defined criteria functions. MCPMod object now always contains estDose fm entry (NA case non-significance non-convergence) Added generalized fitting code, variances covariances estimates available moment. Added vCov argument planMM, sampSize, powerMM (possible take account covariances calculating optimal contrasts) Changed order trellis plots plotModels (order specified models list instead alphanumerical order) Restructured summarized help pages Removed dependency numDeriv package (suggested now), needed calculating optimal designs involving beta model.","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-04-3","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.4-3","title":"DoseFinding 0.4-3","text":"CRAN release: 2011-02-10 Minor change Makevars file (DoseFinding works Solaris).","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-04-2","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.4-2","title":"DoseFinding 0.4-2","text":"CRAN release: 2011-02-09 calcBayesEst, getUpdDesign: Minor changes make functions suited general purpose use.","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-04-1","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.4-1","title":"DoseFinding 0.4-1","text":"CRAN release: 2010-12-02 Introduced new functions calcBayesEst getUpdDesign, used simulation purposes paper Bornkamp et al. (2011) “Response Adaptive Dose-Finding Model Uncertainty” (appear Annals Applied Statistics).","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-03-1","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.3-1","title":"DoseFinding 0.3-1","text":"CRAN release: 2010-11-13 calcOptDesign now additional optimizer “exact”. methods calculates possible designs given sample size selects best. Changed order MakeVars requested calcCrit now checks whether less design points parameters. Code now checks positive sigma powCalc powerMM","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-02-3","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.2-3","title":"DoseFinding 0.2-3","text":"CRAN release: 2010-11-06 MED function now checks clinRel > 0 (thanks Georgina). Changed minor bug output print.MCPtest (print one-sided just ) Code now outputs warning, ‘models’ argument missing (MCPMod fullMod function); fitDRModel outputs warning ‘model’ missing Introduced default base = 0 maxEff = 1 plotModels function. Added summary method DRMod objects. Removed superfluous addCovarVals argument predict.DRMod Removed option method = “mult” calcOptDesign","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-02-2","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.2-2","title":"DoseFinding 0.2-2","text":"CRAN release: 2010-07-24 calcCrit calcOptDesign now check NA, NaN +-Inf values gradient bvector (stop execution values occur) passing values C code. Introduced logLik method DRMod objects Changed mvtnorm.control default argument “interval” reflect recent changes mvtnorm package.","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-02-1","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.2-1","title":"DoseFinding 0.2-1","text":"CRAN release: 2010-05-28 Made getGrad function (gradient dose-response model), including documentation available end-user (previously hidden NAMESPACE) Changes plot.MCPMod function (col argument panel.superpose read different order depending lattice options, now manual workaround panel.xyplot calls group)","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-01-3","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.1-3","title":"DoseFinding 0.1-3","text":"CRAN release: 2010-05-22 Smaller changes calcCrit functions (parameter p now calculated nPars function getOptDesign) Add options powerScenario function (now possible user-specified row column names output matrix)","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-01-2","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.1-2","title":"DoseFinding 0.1-2","text":"CRAN release: 2010-05-16 Removed one example sampSize reduce check time. modelSelect: Use first model two models exactly AIC BIC value. predict.DRMod: Return NA standard deviation code calculate Cholesky transformation covariance matrix (thanks Setia Pramana hint). calcCrit: Code now allows specifying multiple designs matrix.","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-01-1","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.1-1","title":"DoseFinding 0.1-1","text":"CRAN release: 2010-04-14 fitModel.nls now checks whether nls plinear option made positive number iterations (additional convergence check). cases (eg. number parameters = number doses) plinear iteration put warning message algorithm failed. calcOptDesign function now allows upper lower bounds allocation weights. longer need specify clinRel, one wants calculate D-optimal design. Output bootMCPMod function case model averaging now also includes dose estimates model & corrected bug print.bootMCPMod function (thanks Setia Pramana)","code":""},{"path":"https://openpharma.github.io/DoseFinding/news/index.html","id":"dosefinding-01","dir":"Changelog","previous_headings":"","what":"DoseFinding 0.1","title":"DoseFinding 0.1","text":"CRAN release: 2010-03-08 1st Release version 0.1. Improvements MCPMod package: Extended improved version MCPMod (allowing covariates robustified self-developed optimizer) Functions MCP (MCPtest) Modelling (fitDRModel) part now available user New functions (eg. bootMCPMod, powerScenario) Functions calculating optimal designs","code":""}]
